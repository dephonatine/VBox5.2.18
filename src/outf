recompiler/VBoxREMWrapper.cpp:2025:    strcpy(&szPath[offFilename], "/VBoxREM2.rel");
bldprogs/VBoxTpG.cpp:1159:    strcpy(&szTmp[3 + cchName ], "___WRAPPER___");
bldprogs/scm.cpp:1465:                strcpy(pszDst, pszSrc);
bldprogs/scmsubversion.cpp:841:            strcpy(g_szSvnPath, "svn");
bldprogs/scmsubversion.cpp:844:        strcpy(g_szSvnPath, "svn");
bldprogs/scmsubversion.cpp:891:    strcpy(pszDst, pState->pszFilename); /* ASSUMES sizeof(szBuf) <= sizeof(szPath) */
VBox/ValidationKit/utils/TestExecServ/TestExecServiceTcp.cpp:750:                strcpy(g_szTcpConnectAddr, TXS_TCP_DEF_CONNECT_ADDRESS);
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3140:    strcpy(g_szOsShortName, KBUILD_TARGET);
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3143:    strcpy(g_szArchShortName, KBUILD_TARGET_ARCH);
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3146:    strcpy(g_szOsDotArchShortName, KBUILD_TARGET);
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3148:    strcpy(&g_szOsDotArchShortName[sizeof(KBUILD_TARGET)], KBUILD_TARGET_ARCH);
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3151:    strcpy(g_szOsSlashArchShortName, KBUILD_TARGET);
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3153:    strcpy(&g_szOsSlashArchShortName[sizeof(KBUILD_TARGET)], KBUILD_TARGET_ARCH);
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3156:    strcpy(g_szExeSuff,    ".exe");
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3157:    strcpy(g_szScriptSuff, ".cmd");
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3159:    strcpy(g_szExeSuff,    "");
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3160:    strcpy(g_szScriptSuff, ".sh");
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3168:    strcpy(g_szDefCdRomPath, "D:/");
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3170:    strcpy(g_szDefCdRomPath, "D:/");
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3173:        strcpy(g_szDefCdRomPath, "/media/cdrom");
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3175:        strcpy(g_szDefCdRomPath, "/mnt/cdrom");
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3177:    strcpy(g_szCdRomPath, g_szDefCdRomPath);
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3192:        strcpy(g_szDefScratchPath, "/tmp/txs-XXXX.tmp");
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:3194:    strcpy(g_szScratchPath, g_szDefScratchPath);
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1317:    strcpy(g_szOsShortName, KBUILD_TARGET);
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1320:    strcpy(g_szArchShortName, KBUILD_TARGET_ARCH);
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1323:    strcpy(g_szOsDotArchShortName, KBUILD_TARGET);
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1325:    strcpy(&g_szOsDotArchShortName[sizeof(KBUILD_TARGET)], KBUILD_TARGET_ARCH);
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1328:    strcpy(g_szOsSlashArchShortName, KBUILD_TARGET);
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1330:    strcpy(&g_szOsSlashArchShortName[sizeof(KBUILD_TARGET)], KBUILD_TARGET_ARCH);
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1333:    strcpy(g_szExeSuff,    ".exe");
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1334:    strcpy(g_szScriptSuff, ".cmd");
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1336:    strcpy(g_szExeSuff,    "");
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1337:    strcpy(g_szScriptSuff, ".sh");
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1345:    strcpy(g_szDefCdRomPath, "D:/");
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1347:    strcpy(g_szDefCdRomPath, "D:/");
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1350:        strcpy(g_szDefCdRomPath, "/media/cdrom");
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1352:        strcpy(g_szDefCdRomPath, "/mnt/cdrom");
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1354:    strcpy(g_szCdRomPath, g_szDefCdRomPath);
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1369:        strcpy(g_szDefScratchPath, "/tmp/uts-XXXX.tmp");
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1371:    strcpy(g_szScratchPath, g_szDefScratchPath);
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1378:    strcpy(g_szCfgPath, "/etc/uts.conf");
VBox/ValidationKit/utils/usb/UsbTestService.cpp:1380:    strcpy(g_szCfgPath, "");
VBox/ValidationKit/bootsectors/bs3kit/bs3kit.h:1672: * CRT style unsafe strcpy.
VBox/ValidationKit/bootsectors/bs3kit/VBoxBs3ObjConverter.cpp:2120:                strcpy(szName, "BS3TEXT64");
VBox/ValidationKit/bootsectors/bs3kit/VBoxBs3ObjConverter.cpp:2126:                strcpy(szName, "BS3DATA64");
VBox/ValidationKit/bootsectors/bs3kit/VBoxBs3ObjConverter.cpp:2132:                strcpy(szName, "BS3BSS64");
VBox/ValidationKit/bootsectors/bs3kit/VBoxBs3ObjConverter.cpp:2138:                strcpy(szName, "BS3DATA64CONST");
VBox/ValidationKit/bootsectors/bs3kit/VBoxBs3ObjConverter.cpp:2144:                strcpy(szName, "$$SYMBOLS");
VBox/ValidationKit/bootsectors/bs3kit/VBoxBs3ObjConverter.cpp:2150:                strcpy(szName, "$$TYPES");
VBox/ValidationKit/testboxscript/TestBoxHelper.cpp:424:               strcpy(szValue, "<volatile>");
VBox/ValidationKit/testdriver/winbase.py:315:        ctypes.windll.msvcrt.strcpy(None, None, 1024);
VBox/Disassembler/testcase/tstDisasm-2.cpp:80:    strcpy(szTmp, RTStrStripL(strchr(pState->szLine, ':') + 1));
VBox/Disassembler/DisasmFormatYasm.cpp:644:                        strcpy (pszFmtDst, pszSpace);
VBox/RDP/client-1.8.3/disk.c:340:		strcpy(g_rdpdr_device[*id].local_path, pos2);
VBox/RDP/client-1.8.3/disk.c:1062:	strcpy(info.label, "RDESKTOP");
VBox/RDP/client-1.8.3/disk.c:1063:	strcpy(info.type, "RDPFS");
VBox/RDP/client-1.8.3/disk.c:1074:			strcpy(info.type, e->mnt_type);
VBox/RDP/client-1.8.3/disk.c:1075:			strcpy(info.name, e->mnt_fsname);
VBox/RDP/client-1.8.3/disk.c:1086:						strcpy(info.type, "vfat");
VBox/RDP/client-1.8.3/disk.c:1110:	strcpy(info.label, "RDESKTOP");
VBox/RDP/client-1.8.3/disk.c:1111:	strcpy(info.type, "RDPFS");
VBox/RDP/client-1.8.3/utils.c:163:	strcpy(bp, path);
VBox/RDP/client-1.8.3/utils.c:227:	/* can dest hold strcpy of src */
VBox/RDP/client-1.8.3/rdesktop.c:949:					strcpy(g_rdpdr_clientname, optarg + 11);
VBox/RDP/client-1.8.3/rdesktop.c:1153:		strcpy(g_title, "rdesktop - ");
VBox/RDP/client-1.8.3/rdesktop.c:1762:	strcpy(head, tail);
VBox/RDP/client-1.8.3/scard.c:586:	strcpy(*destination, reader);
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:221:    strcpy(pBuf + iBuf, pcsz);
VBox/RDP/client-1.8.3/serial.c:545:		strcpy(g_rdpdr_device[*id].name, optarg);
VBox/RDP/client-1.8.3/serial.c:550:		strcpy(g_rdpdr_device[*id].local_path, pos2);
VBox/RDP/client-1.8.3/ctrl.c:203:	strcpy(saun.sun_path, ctrlsock_name);
VBox/RDP/client-1.8.3/ctrl.c:481:	strcpy(saun.sun_path, ctrlsock_name);
VBox/RDP/client-1.8.3/parallel.c:67:		strcpy(g_rdpdr_device[*id].name, optarg);
VBox/RDP/client-1.8.3/parallel.c:72:		strcpy(g_rdpdr_device[*id].local_path, pos2);
VBox/RDP/client-1.8.3/tcp.c:579:		strcpy(ipaddr, "127.0.0.1");
VBox/RDP/client-1.8.3/printer.c:73:		strcpy(g_rdpdr_device[*id].name, "PRN");
VBox/RDP/client-1.8.3/printer.c:88:			strcpy(pprinter_data->printer, optarg);
VBox/RDP/client-1.8.3/printer.c:96:			strcpy(pprinter_data->driver, pos2);
VBox/Additions/linux/drm/vbox_fb.c:294:	strcpy(info->fix.id, "vboxdrmfb");
VBox/Additions/linux/sharedfolders/mount.vboxsf.c:457:        strcpy(mntinf.name, host_name);
VBox/Additions/linux/sharedfolders/mount.vboxsf.c:463:    strcpy(mntinf.nls_name, opts.nls_name);
VBox/Additions/linux/sharedfolders/mount.vboxsf.c:502:            strcpy(mntinf.name, host_name + cchCWD);
VBox/Additions/haiku/SharedFolders/vboxsf.c:152:    strcpy(rv->String.utf8, s);
VBox/Additions/haiku/SharedFolders/vboxsf.c:186:        strcpy(rv->String.utf8, s1);
VBox/Additions/haiku/SharedFolders/vboxsf.c:205:        strcpy(rv->String.utf8, dir->path->String.utf8);
VBox/Additions/haiku/SharedFolders/vboxsf.c:499:    strcpy(info->volume_name, "VBox share");
VBox/Additions/haiku/VBoxVideo/accelerant/accelerant.cpp:232:    strcpy(path, "/dev/");
VBox/Additions/haiku/VBoxVideo/accelerant/accelerant.cpp:260:    strcpy(adi->name, "Virtual display");
VBox/Additions/haiku/VBoxVideo/accelerant/accelerant.cpp:261:    strcpy(adi->chipset, "VirtualBox Graphics Adapter");
VBox/Additions/haiku/VBoxVideo/accelerant/accelerant.cpp:262:    strcpy(adi->serial_no, "9001");
VBox/Additions/haiku/VBoxVideo/driver/driver.cpp:342:            strcpy((char *)buf, "vboxvideo.accelerant");
VBox/Additions/x11/undefined_xorg:127:strcpy
VBox/Additions/x11/x11include/xorg-server-1.4.2/xf86_libc.h:385:#undef strcpy
VBox/Additions/x11/x11include/xorg-server-1.4.2/xf86_libc.h:386:#define strcpy(cp,ccp)		xf86strcpy(cp,ccp)
VBox/Additions/x11/x11include/XFree86-4.3/Xserver/xf86_libc.h:345:#undef strcpy
VBox/Additions/x11/x11include/XFree86-4.3/Xserver/xf86_libc.h:346:#define strcpy(cp,ccp)		xf86strcpy(cp,ccp)
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:258:   strcpy((p).pws.pw_name, (p).pwp->pw_name);
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:262:   strcpy((p).pws.pw_passwd,(p).pwp->pw_passwd);
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:266:   strcpy((p).pws.pw_class, (p).pwp->pw_class);
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:270:   strcpy((p).pws.pw_gecos, (p).pwp->pw_gecos);
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:274:   strcpy((p).pws.pw_dir, (p).pwp->pw_dir);
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:278:   strcpy((p).pws.pw_shell, (p).pwp->pw_shell);
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:288:    strcpy((p).pws.pw_name, (p).pwp->pw_name), \
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:291:    strcpy((p).pws.pw_passwd,(p).pwp->pw_passwd), \
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:294:    strcpy((p).pws.pw_age, (p).pwp->pw_age), \
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:297:    strcpy((p).pws.pw_comment, (p).pwp->pw_comment), \
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:300:    strcpy((p).pws.pw_gecos, (p).pwp->pw_gecos), \
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:303:    strcpy((p).pws.pw_dir, (p).pwp->pw_dir), \
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:306:    strcpy((p).pws.pw_shell, (p).pwp->pw_shell), \
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:426:    strcpy((hp).h_name, (hp).hptr->h_name), \
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:432:    strcpy((sp).s_name, (sp).sptr->s_name), \
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:434:    strcpy((sp).s_proto, (sp).sptr->s_proto), \
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:1018:   strcpy((p).grp.gr_name, (p).pgrp->gr_name), \
VBox/Additions/x11/x11include/xproto-7.0.18/X11/Xos_r.h:1026:   strcpy((p).grp.gr_name, (p).pgrp->gr_name), \
VBox/Additions/x11/x11include/xorg-server-1.0.1/glx_ansic.h:101:#define __glXStrcpy(dest, src)		strcpy(dest, src)
VBox/Additions/x11/x11include/xorg-server-1.0.1/xf86_libc.h:389:#undef strcpy
VBox/Additions/x11/x11include/xorg-server-1.0.1/xf86_libc.h:390:#define strcpy(cp,ccp)		xf86strcpy(cp,ccp)
VBox/Additions/x11/x11include/xorg-server-1.3.0.0/xf86_libc.h:385:#undef strcpy
VBox/Additions/x11/x11include/xorg-server-1.3.0.0/xf86_libc.h:386:#define strcpy(cp,ccp)		xf86strcpy(cp,ccp)
VBox/Additions/x11/x11include/xorg-server-1.1.0/glx_ansic.h:98:#define __glXStrcpy(dest, src)		strcpy(dest, src)
VBox/Additions/x11/x11include/xorg-server-1.1.0/xf86_libc.h:391:#undef strcpy
VBox/Additions/x11/x11include/xorg-server-1.1.0/xf86_libc.h:392:#define strcpy(cp,ccp)		xf86strcpy(cp,ccp)
VBox/Additions/solaris/SharedFolders/vboxfs_prov.c:75:	strcpy(str->String.utf8, path);
VBox/Additions/solaris/SharedFolders/vboxfs_prov.c:968:	strcpy(cp, path);
VBox/Additions/solaris/SharedFolders/vboxfs_vnode.c:165:	strcpy(p, node->sf_path);
VBox/Additions/solaris/SharedFolders/vboxfs_vnode.c:498:			strcpy(new_path, path);
VBox/Additions/solaris/SharedFolders/vboxfs_vfs.c:237:	strcpy(*outpath, path.pn_path);
VBox/Additions/solaris/SharedFolders/vboxfs_vfs.c:472:	strcpy(path, ".");
VBox/Additions/solaris/SharedFolders/vboxfs_vfs.c:571:	strcpy(&sbp->f_basetype[0], "sffs");
VBox/Additions/common/VBoxService/VBoxServicePageSharing.cpp:471:                    strcpy(pModule->Info.szModule, &pSystemModules->Modules[i].FullPathName[pSystemModules->Modules[i].OffsetToFileName]);
VBox/Additions/common/VBoxService/VBoxServicePageSharing.cpp:509:                    strcpy(pModule->Info.szExePath, szFullFilePath);
VBox/Additions/common/VBoxService/VBoxServiceAutoMount.cpp:341:        strcpy(mntinf.name, pszShareName);
VBox/Additions/common/VBoxService/VBoxServiceAutoMount.cpp:342:        strcpy(mntinf.nls_name, "\0");
VBox/Additions/common/VBoxService/VBoxServiceAutoMount.cpp:386:                 *        strcpy(mntinf.name, pszShareName) to fix it again? */
VBox/Additions/common/VBoxService/VBoxServiceAutoMount.cpp:403:                    strcpy(mntinf.name, pszMountPoint + cchCWD);
VBox/Additions/common/VBoxService/VBoxServiceVMInfo.cpp:1284:            strcpy(&szPropPath[offSubProp], "/V4/IP");
VBox/Additions/common/VBoxService/VBoxServiceVMInfo.cpp:1296:            strcpy(&szPropPath[offSubProp], "/V4/Broadcast");
VBox/Additions/common/VBoxService/VBoxServiceVMInfo.cpp:1312:            strcpy(&szPropPath[offSubProp], "/V4/Netmask");
VBox/Additions/common/VBoxService/VBoxServiceVMInfo.cpp:1367:            strcpy(&szPropPath[offSubProp], "/MAC");
VBox/Additions/common/VBoxService/VBoxServiceVMInfo.cpp:1371:            strcpy(&szPropPath[offSubProp], "/Status");
VBox/Additions/common/VBoxService/VBoxServiceVMInfo.cpp:1378:                strcpy(&szPropPath[offSubProp], "/Name");
VBox/Additions/common/crOpenGL/load.c:996:    strcpy(response, "2 0 feedback 1 pack");
VBox/Additions/common/testcase/tstPageFusion.cpp:279:            strcpy(ModuleInfo.szModule, &pSystemModules->Modules[i].FullPathName[pSystemModules->Modules[i].OffsetToFileName]);
VBox/Additions/common/testcase/tstPageFusion.cpp:298:            strcpy(ModuleInfo.szExePath, szFullFilePath);
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:194:                            strcpy(&g_szInitText[0],
Binary file VBox/Additions/common/VBoxGuest/lib/.VBoxGuestR3LibGuestProp.cpp.swo matches
Binary file VBox/Additions/common/VBoxGuest/lib/.VBoxGuestR3LibGuestProp.cpp.swp matches
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR3LibHGCM.cpp:51:    strcpy(Info.u.In.Loc.u.host.achName, pszServiceName);
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR3LibGuestProp.cpp:50:# undef strcpy
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR3LibGuestProp.cpp:51:# define strcpy xf86strcpy
VBox/Additions/common/VBoxGuest/VBoxGuest-linux.c:1163:    strcpy(pszBuf, g_DevExt.fLoggingEnabled ? "enabled" : "disabled");
VBox/Additions/WINNT/Graphics/Wine_new/vbox/libWineStub/debug.c:141:    strcpy( debug_options[pos].name, name );
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/glsl_shader.c:1551:                    strcpy(register_name, "gl_Color");
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/glsl_shader.c:1553:                    strcpy(register_name, "gl_SecondaryColor");
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:999:    strcpy(priv->addr_reg, src);
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:1030:                        strcpy(register_name, "fragment.color.primary");
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:1032:                        strcpy(register_name, "fragment.color.secondary");
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:1046:                                strcpy(register_name, ctx->ps_input[idx]);
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:1095:                            strcpy(register_name, ctx->ps_input[reg->idx[0].offset]);
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:1180:                strcpy(register_name, "TMP_COLOR");
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:1189:                    strcpy(register_name, "result.color");
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:1201:            strcpy(register_name, "result.depth");
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:1209:                strcpy(register_name, ctx->color_output[reg->idx[0].offset]);
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:1216:                strcpy(register_name, ctx->texcrd_output[reg->idx[0].offset]);
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:1218:                strcpy(register_name, ctx->vs_output[reg->idx[0].offset]);
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:1269:    strcpy(str, register_name);
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:2007:        strcpy(reg_coord, "TA");
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:3735:        strcpy(fragcolor, "R0");
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:3748:                strcpy(fragcolor, "TMP_COLOR");
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:3751:            strcpy(fragcolor, "result.color");
VBox/Additions/WINNT/Graphics/Wine_new/wined3d/arb_program_shader.c:3971:        strcpy(name, sig[i].semantic_name);
VBox/Additions/WINNT/Graphics/Video/disp/wddm/VBoxDispDbg.cpp:158:        strcpy(rectBuf, "n/a");
VBox/Additions/WINNT/VBoxTray/VBoxHelpers.cpp:328:    strcpy(niData.szInfo, pszMsg ? pszMsg : "-");
VBox/Additions/WINNT/VBoxTray/VBoxHelpers.cpp:329:    strcpy(niData.szInfoTitle, pszTitle ? pszTitle : "Information");
VBox/Additions/darwin/vboxfs/mount.vboxvfs.c:73:    strcpy(mnt_info.name, sShareName);
VBox/Debugger/DBGPlugInDarwin.cpp:504:                strcpy(aSegs[cSegs].szName, uLCmd.pSeg32->segname);
VBox/Debugger/DBGPlugInDarwin.cpp:523:                strcpy(aSegs[cSegs].szName, uLCmd.pSeg64->segname);
VBox/Debugger/DBGPlugInDarwin.cpp:586:                strcat(strcpy(szTmp, aSegs[iSeg].szName), "_start");
VBox/Debugger/VBoxDbgStatsQt.cpp:2181:            strcpy(&sz[off], formatNumber(szTmp, pNode->Data.RatioU32.u32B));
VBox/Debugger/DBGPlugInSolaris.cpp:390:        strcpy(&UtsName.sysname[0], "SunOS");
VBox/Debugger/DBGPlugInSolaris.cpp:460:        strcpy(szFilename, szModName);
VBox/Debugger/DBGPlugInSolaris.cpp:609:        strcpy(szFilename, szModName);
VBox/Debugger/DBGCEmulateCodeView.cpp:5989:                                        strcpy(SegInfo.szName, "error");
VBox/Frontends/VBoxSDL/VBoxSDL.cpp:4359:    strcpy(szPrevTitle, szTitle);
VBox/Frontends/VBoxManage/Makefile.kmk:164:# update: Fixed in SVN (strcpy -> memmove in new_job(), job.c - r2591). Just need to rebuild all platforms.
VBox/Runtime/r0drv/nt/ntBldSymDb.cpp:589:                        strcat(strcat(strcpy(pszSubPrefix, pszPrefix), pszMember), ".");
VBox/Runtime/VBox/log-vbox.cpp:574:        strcpy(szExecName, "VBox");
VBox/Runtime/tools/RTGzip.cpp:320:        strcpy(pOpts->szOutput, "-");
VBox/Runtime/Makefile.kmk:252:	common/string/strcpy.asm \
VBox/Runtime/Makefile.kmk:2455:	common/string/strcpy.asm \
VBox/Runtime/Makefile.kmk:3191:			-e '/^strcpy/d' \
VBox/Runtime/common/zip/tarvfswriter.cpp:485:                strcpy(pObjInfo->Attr.u.UnixOwner.szName, pPush->pParent->aHdrs[0].Common.uname);
VBox/Runtime/common/zip/tarvfswriter.cpp:494:                strcpy(pObjInfo->Attr.u.UnixGroup.szName, pPush->pParent->aHdrs[0].Common.uname);
VBox/Runtime/common/zip/tarvfswriter.cpp:1707:        strcpy(ObjOwnerName.Attr.u.UnixOwner.szName, "someone");
VBox/Runtime/common/zip/tarvfswriter.cpp:1712:        strcpy(ObjGrpName.Attr.u.UnixGroup.szName, "somegroup");
VBox/Runtime/common/alloc/memtracker.cpp:247:                        strcpy(pTracker->FallbackUser.szName, "fallback");
VBox/Runtime/common/dbg/dbgmodcontainer.cpp:204:    strcpy(pLineInfo->szFilename, pMyLine->pszFile);
VBox/Runtime/common/dbg/dbgmodcontainer.cpp:231:    strcpy(pLineInfo->szFilename, pMyLine->pszFile);
VBox/Runtime/common/dbg/dbgmodcontainer.cpp:476:    strcpy(pSegInfo->szName, pThis->paSegs[iSeg].pszName);
VBox/Runtime/common/dbg/dbgcfg.cpp:384:            strcpy(pszName, u.Entry.szName);
VBox/Runtime/common/dbg/dbgcfg.cpp:674:    strcpy(szExtractDir, pszPath);
VBox/Runtime/common/dbg/dbgcfg.cpp:926:            strcpy(szBackup, pszPath);
VBox/Runtime/common/dbg/dbgcfg.cpp:929:                strcpy(pszPath, szBackup);
VBox/Runtime/common/dbg/dbgcfg.cpp:1219:            strcpy(szPath, ".");
VBox/Runtime/common/dbg/dbgcfg.cpp:1752:            strcpy(szPath, ".");
VBox/Runtime/common/dbg/dbgmoddeferred.cpp:209:    strcpy(pSymInfo->szName, "DeferredStart");
VBox/Runtime/common/dbg/dbgmoddeferred.cpp:229:    strcpy(pSymInfo->szName, "DeferredLast");
VBox/Runtime/common/log/log.cpp:915:                strcpy(pszEnvVar + cchEnvVarBase, "_DEST");
VBox/Runtime/common/log/log.cpp:923:                strcpy(pszEnvVar + cchEnvVarBase, "_FLAGS");
VBox/Runtime/common/string/strcpy.asm:1:; $Id: strcpy.asm $
VBox/Runtime/common/string/strcpy.asm:3:; IPRT - No-CRT strcpy - AMD64 & X86.
VBox/Runtime/common/string/strcpy.asm:34:RT_NOCRT_BEGINPROC strcpy
VBox/Runtime/common/string/strcpy.asm:88:ENDPROC RT_NOCRT(strcpy)
VBox/Runtime/common/string/strcpy.cpp:1:/* $Id: strcpy.cpp $ */
VBox/Runtime/common/string/strcpy.cpp:3: * IPRT - CRT Strings, strcpy().
VBox/Runtime/common/string/strcpy.cpp:41:char* strcpy(char *pszDst, register const char *pszSrc)
VBox/Runtime/common/string/strcpy_alias.c:3: * IPRT - No-CRT strcpy() alias for gcc.
VBox/Runtime/common/string/strcpy_alias.c:32:#undef strcpy
VBox/Runtime/common/string/strcpy_alias.c:36:#  pragma weak strcpy
VBox/Runtime/common/string/strcpy_alias.c:40:extern char * (strcpy)(char *psz1, const char *psz2)
VBox/Runtime/common/string/strcpy_alias.c:42:    return RT_NOCRT(strcpy)(psz1, psz2);
VBox/Runtime/common/string/strcpy_alias.c:47:__asm__(".weak strcpy\t\n"
VBox/Runtime/common/string/strcpy_alias.c:48:        " .set strcpy," RT_NOCRT_STR(strcpy) "\t\n"
VBox/Runtime/common/string/strcpy_alias.c:49:        ".global strcpy\t\n"
VBox/Runtime/common/string/strcpy_alias.c:53:extern __typeof(RT_NOCRT(strcpy)) strcpy __attribute__((weak, alias(RT_NOCRT_STR(strcpy))));
VBox/Runtime/common/string/uniread.cpp:866:    strcpy(pszEnd, pszFlag);
VBox/Runtime/testcase/tstRTProcIsRunningByName.cpp:63:    strcpy(szExecPath, "/bin/vbox-5b05e1ff-6ae2-4d10-885a-7d25018c4c5b");
VBox/Runtime/testcase/tstRTR0CommonDriver.h:119:    strcpy(szSrvReqHandler, pszTestServiceName);
VBox/Runtime/testcase/tstRTDirCreateUniqueNumbered.cpp:64:        RTTESTI_CHECK_RC(rc = RTPathAppend(strcpy(szName, g_szTempPath), sizeof(szName), "RTDirCreateUniqueNumbered"), VINF_SUCCESS);
VBox/Runtime/testcase/tstRTDirCreateUniqueNumbered.cpp:89:        RTTESTI_CHECK_RC(rc = RTPathAppend(strcpy(szName, g_szTempPath), sizeof(szName), "RTDirCreateUniqueNumbered"), VINF_SUCCESS);
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:99:    memset(pszBuf4T, 0xff, 4); strcpy(pszBuf4T, "a");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:100:    memset(pszBuf4H, 0xff, 4); strcpy(pszBuf4H, "a");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:106:    memset(pszBuf4T, 0xff, 4); strcpy(pszBuf4T, "ab");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:107:    memset(pszBuf4H, 0xff, 4); strcpy(pszBuf4H, "ab");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:113:    memset(pszBuf4T, 0xff, 4); strcpy(pszBuf4T, "abc");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:114:    memset(pszBuf4H, 0xff, 4); strcpy(pszBuf4H, "abc");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:120:    memset(pszBuf4T, 0xff, 4); strcpy(pszBuf4T, "");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:121:    memset(pszBuf4H, 0xff, 4); strcpy(pszBuf4H, "");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:127:    memset(pszBuf4T, 0xff, 4); strcpy(pszBuf4T, "ab");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:128:    memset(pszBuf4H, 0xff, 4); strcpy(pszBuf4H, "ab");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:134:    memset(pszBuf4T, 0xff, 4); strcpy(pszBuf4T, "abc");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:135:    memset(pszBuf4H, 0xff, 4); strcpy(pszBuf4H, "abc");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:156:    memset(pszBuf4T, 0xff, 4); strcpy(pszBuf4T, "a");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:157:    memset(pszBuf4H, 0xff, 4); strcpy(pszBuf4H, "a");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:163:    memset(pszBuf4T, 0xff, 4); strcpy(pszBuf4T, "ab");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:164:    memset(pszBuf4H, 0xff, 4); strcpy(pszBuf4H, "ab");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:170:    memset(pszBuf4T, 0xff, 4); strcpy(pszBuf4T, "abc");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:171:    memset(pszBuf4H, 0xff, 4); strcpy(pszBuf4H, "abc");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:177:    memset(pszBuf4T, 0xff, 4); strcpy(pszBuf4T, "");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:178:    memset(pszBuf4H, 0xff, 4); strcpy(pszBuf4H, "");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:184:    memset(pszBuf4T, 0xff, 4); strcpy(pszBuf4T, "ab");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:185:    memset(pszBuf4H, 0xff, 4); strcpy(pszBuf4H, "ab");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:191:    memset(pszBuf4T, 0xff, 4); strcpy(pszBuf4T, "abc");
VBox/Runtime/testcase/tstRTStrCatCopy.cpp:192:    memset(pszBuf4H, 0xff, 4); strcpy(pszBuf4H, "abc");
VBox/Runtime/testcase/tstNoCrt-1.cpp:400:     * strcpy (quick smoke testing).
VBox/Runtime/testcase/tstNoCrt-1.cpp:402:    RTPrintf("tstNoCrt-1: strcpy\n");
VBox/Runtime/testcase/tstNoCrt-1.cpp:406:    pv = RT_NOCRT(strcpy)(pszDst, pszSrc);
VBox/Runtime/testcase/tstNoCrt-1.cpp:408:    TstBufCheck(&Buf1, "strcpy 1");
VBox/Runtime/testcase/tstNoCrt-1.cpp:417:        pv = RT_NOCRT(strcpy)(pszDst, pszSrc);
VBox/Runtime/testcase/tstNoCrt-1.cpp:419:        TstBufCheck(&Buf1, "strcpy 3");
VBox/Runtime/testcase/tstLdrObjR0.cpp:59:    strcpy(achBss, szStr2);
VBox/Runtime/testcase/tstLdrObj.cpp:62:    strcpy(achBss, szStr2);
VBox/Runtime/testcase/tstRTTemp.cpp:68:        RTTESTI_CHECK_RC(rc = RTPathAppend(strcpy(szName, g_szTempPath), sizeof(szName), pszTemplate), VINF_SUCCESS);
VBox/Runtime/testcase/Makefile.kmk:536:	../common/string/strcpy.asm \
VBox/Runtime/testcase/tstRTDigest.cpp:53:        strcpy(szName, "tstRTDigest");
VBox/Runtime/testcase/tstRTPath.cpp:370:                        strcpy(szTmp + cch, s_aRTPathAbsExTests[i].pcszOutput + 2);
VBox/Runtime/testcase/tstRTPath.cpp:376:                        strcpy(szTmp + 2, s_aRTPathAbsExTests[i].pcszOutput + 2);
VBox/Runtime/testcase/tstRTPath.cpp:382:                strcpy(szTmp, s_aRTPathAbsExTests[i].pcszOutput);
VBox/Runtime/testcase/tstRTPath.cpp:423:        strcpy(szPath, pszInput);
VBox/Runtime/testcase/tstRTPath.cpp:481:        strcpy(szPath, pszInput);
VBox/Runtime/testcase/tstRTPath.cpp:498:            strcpy(szPath, pszInput);
VBox/Runtime/testcase/tstRTPath.cpp:502:            strcpy(szPath, pszInput);
VBox/Runtime/testcase/tstRTPath.cpp:508:                strcpy(szPath, pszInput);
VBox/Runtime/testcase/tstRTPath.cpp:611:        strcpy(szPath, pszInput);
VBox/Runtime/testcase/tstRTPath.cpp:727:        strcpy(szPath, pszInput);
VBox/Runtime/r3/linux/RTSystemShutdown-linux.cpp:73:        strcpy(szWhen, "now");
VBox/Runtime/r3/solaris/RTSystemShutdown-solaris.cpp:75:        strcpy(szWhen, "0");
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:186:                case kRTWinOSType_95:           strcpy(szTmp, "Windows 95"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:187:                case kRTWinOSType_95SP1:        strcpy(szTmp, "Windows 95 (Service Pack 1)"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:188:                case kRTWinOSType_95OSR2:       strcpy(szTmp, "Windows 95 (OSR 2)"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:189:                case kRTWinOSType_98:           strcpy(szTmp, "Windows 98"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:190:                case kRTWinOSType_98SP1:        strcpy(szTmp, "Windows 98 (Service Pack 1)"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:191:                case kRTWinOSType_98SE:         strcpy(szTmp, "Windows 98 (Second Edition)"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:192:                case kRTWinOSType_ME:           strcpy(szTmp, "Windows Me"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:193:                case kRTWinOSType_NT351:        strcpy(szTmp, "Windows NT 3.51"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:194:                case kRTWinOSType_NT4:          strcpy(szTmp, "Windows NT 4.0"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:195:                case kRTWinOSType_2K:           strcpy(szTmp, "Windows 2000"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:197:                    strcpy(szTmp, "Windows XP");
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:209:                case kRTWinOSType_2003:         strcpy(szTmp, "Windows 2003"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:212:                    strcpy(szTmp, "Windows Vista");
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:216:                case kRTWinOSType_2008:         strcpy(szTmp, "Windows 2008"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:217:                case kRTWinOSType_7:            strcpy(szTmp, "Windows 7"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:218:                case kRTWinOSType_2008R2:       strcpy(szTmp, "Windows 2008 R2"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:219:                case kRTWinOSType_8:            strcpy(szTmp, "Windows 8"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:220:                case kRTWinOSType_2012:         strcpy(szTmp, "Windows 2012"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:221:                case kRTWinOSType_81:           strcpy(szTmp, "Windows 8.1"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:222:                case kRTWinOSType_2012R2:       strcpy(szTmp, "Windows 2012 R2"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:223:                case kRTWinOSType_10:           strcpy(szTmp, "Windows 10"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:224:                case kRTWinOSType_2016:         strcpy(szTmp, "Windows 2016"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:282:                    case kRTWinOSType_95SP1:    strcpy(szTmp, "1"); break;
VBox/Runtime/r3/win/RTSystemQueryOSInfo-win.cpp:283:                    case kRTWinOSType_98SP1:    strcpy(szTmp, "1"); break;
VBox/Runtime/r3/win/VBoxRT-msvcr100-win32.def:1549:  strcpy
VBox/Runtime/r3/posix/pathhost-posix.cpp:156:        strcpy(g_szFsCodeset, pszEnvValue);
VBox/ExtPacks/VBoxDTrace/onnv/uts/intel/dtrace/fbt.c:595:		(void) strcpy(desc->dtargd_native, "int");
VBox/ExtPacks/VBoxDTrace/onnv/uts/common/dtrace/dcpc.c:227:	(void) strcpy(str, desc->dtpd_name);
VBox/ExtPacks/VBoxDTrace/onnv/uts/common/dtrace/dtrace.c:6753:		(void) strcpy(new, str);
VBox/ExtPacks/VBoxDTrace/onnv/uts/common/dtrace/dtrace.c:7290:	(void) strcpy(provider->dtpv_name, name);
VBox/ExtPacks/VBoxDTrace/onnv/uts/common/dtrace/dtrace.c:8153:	(void) strcpy(meta->dtm_name, name);
VBox/ExtPacks/VBoxDTrace/onnv/uts/common/dtrace/sdt_subr.c:1181:			(void) strcpy(desc->dtargd_native, a->sda_native);
VBox/ExtPacks/VBoxDTrace/onnv/uts/common/dtrace/sdt_subr.c:1184:			(void) strcpy(desc->dtargd_xlate, a->sda_xlate);
VBox/ExtPacks/VBoxDTrace/onnv/uts/common/dtrace/fasttrap.c:1085:	(void) strcpy(desc->dtargd_native, str);
VBox/ExtPacks/VBoxDTrace/onnv/uts/common/dtrace/fasttrap.c:1096:	(void) strcpy(desc->dtargd_xlate, str);
VBox/ExtPacks/VBoxDTrace/onnv/uts/common/dtrace/fasttrap.c:1366:	(void) strcpy(new_fp->ftp_name, name);
VBox/ExtPacks/VBoxDTrace/onnv/uts/common/dtrace/profile.c:178:	(void) strcpy(prof->prof_name, name);
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:259:		(void) strcpy(kind, "D type");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:262:		(void) strcpy(kind, "string");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:270:		(void) strcpy(ckind, "unknown");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:273:		(void) strcpy(ckind, "integer");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:276:		(void) strcpy(ckind, "float");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:279:		(void) strcpy(ckind, "pointer");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:282:		(void) strcpy(ckind, "array");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:285:		(void) strcpy(ckind, "function");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:288:		(void) strcpy(ckind, "struct");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:291:		(void) strcpy(ckind, "union");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:294:		(void) strcpy(ckind, "enum");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:297:		(void) strcpy(ckind, "forward");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:300:		(void) strcpy(ckind, "typedef");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:303:		(void) strcpy(ckind, "volatile");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:306:		(void) strcpy(ckind, "const");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:309:		(void) strcpy(ckind, "restrict");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:465:			(void) strcpy(kind, "arr");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:468:			(void) strcpy(kind, "scl");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:477:			(void) strcpy(scope, "glb");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:480:			(void) strcpy(scope, "tls");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_dis.c:483:			(void) strcpy(scope, "loc");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_subr.c:937:		(void) strcpy(str, s);
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_options.c:202:	(void) strcpy(buf, opt);
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_pid.c:466:			(void) strcpy(pdp->dtpd_mod, "a.out");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_decl.c:995:		(void) strcpy(name, "struct ");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_decl.c:998:		(void) strcpy(name, "union ");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_decl.c:1001:		(void) strcpy(name, "enum ");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_printf.c:1216:				(void) strcpy(pfd->pfd_fmt, "ll");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_printf.c:1219:				(void) strcpy(pfd->pfd_fmt, "L");
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_printf.c:1613:		(void) strcpy(f, pfd->pfd_fmt);
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_provider.c:560:			(void) strcpy(pip->pi_rname, rname);
VBox/ExtPacks/VBoxDTrace/onnv/lib/libdtrace/common/dt_open.c:772:		(void) strcpy(prov->dp_name, dp->d_name);
VBox/ExtPacks/VBoxDTrace/onnv/common/ctf/ctf_util.c:128:		(void) strcpy(s2, s1);
VBox/ExtPacks/VBoxDTrace/VBoxDTraceWrapper.cpp:88:                strcpy(szDTraceCmd, s_apszNativeDTrace[i]);
VBox/Devices/VMMDev/VMMDev.cpp:654:            strcpy(szTmp, pszName);
VBox/Devices/VMMDev/VMMDev.cpp:690:    strcpy(pThis->guestInfo2.szName, pszName);
VBox/Devices/VMMDev/VMMDev.cpp:2110:            strcpy(pReq->szUserName, pThis->pCredentials->Logon.szUserName);
VBox/Devices/VMMDev/VMMDev.cpp:2112:            strcpy(pReq->szPassword, pThis->pCredentials->Logon.szPassword);
VBox/Devices/VMMDev/VMMDev.cpp:2114:            strcpy(pReq->szDomain, pThis->pCredentials->Logon.szDomain);
VBox/Devices/VMMDev/VMMDev.cpp:2136:            strcpy(pReq->szUserName, pThis->pCredentials->Judge.szUserName);
VBox/Devices/VMMDev/VMMDev.cpp:2138:            strcpy(pReq->szPassword, pThis->pCredentials->Judge.szPassword);
VBox/Devices/VMMDev/VMMDev.cpp:2140:            strcpy(pReq->szDomain, pThis->pCredentials->Judge.szDomain);
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:461:            strcpy(psz + 1, "devices");
VBox/Devices/Graphics/shaderlib/glsl_shader.c:1519:                if (reg->idx == 0) strcpy(register_name, "gl_Color");
VBox/Devices/Graphics/shaderlib/glsl_shader.c:1520:                else strcpy(register_name, "gl_SecondaryColor");
VBox/Devices/Graphics/shaderlib/wine/vbox/libWineStub/debug.c:137:    strcpy( debug_options[pos].name, name );
VBox/Devices/Graphics/shaderlib/wine/include/msvcrt/string.h:71:char*   __cdecl strcpy(char*,const char*);
VBox/Devices/Graphics/shaderlib/wine/include/tchar.h:122:#define _tcscpy       WINE_tchar_routine(strcpy,          _mbscpy,     wcscpy)
VBox/Devices/Graphics/shaderlib/wine/include/winbase.h:2521:    return strcpy( dst, src );
VBox/Devices/Graphics/shaderlib/wine/include/rpcndr.h:130:#define MIDL_ascii_strcpy(d,s) strcpy(d,s)
VBox/Devices/Graphics/shaderlib/wine/include/windowsx.h:1418:#define _fstrcpy    strcpy
VBox/Devices/Graphics/shaderlib/libWineStub/debug.c:157:    strcpy( debug_options[pos].name, name );
VBox/Devices/Graphics/testcase/dump-vmwgfx.c:467:            strcpy(&szPath[offPath + cchName], "/boot_vga");
VBox/Devices/Graphics/testcase/dump-vmwgfx.c:471:                strcpy(&szPath[offPath + cchName], "/resource2");
VBox/Devices/PC/ipxe/src/util/mucurses_test.c:52:		strcpy( sec, pw1 );
VBox/Devices/PC/ipxe/src/arch/i386/core/runtime.c:100:		strcpy ( strip, ( strip_end + 1 ) );
VBox/Devices/PC/ipxe/src/drivers/block/ibft.c:170:	strcpy ( dest, data );
VBox/Devices/PC/ipxe/src/include/string.h:23:char * strcpy(char * dest,const char *src) __nonnull;
VBox/Devices/PC/ipxe/src/net/80211/net80211.c:1302:		strcpy ( dev->essid, ctx->essid );
VBox/Devices/PC/ipxe/src/net/80211/net80211.c:1475:		strcpy ( wlan->essid, ssid );
VBox/Devices/PC/ipxe/src/net/80211/net80211.c:2118:	strcpy ( dev->essid, wlan->essid );
VBox/Devices/PC/ipxe/src/net/tcp/iscsi.c:1900:	strcpy ( rp_copy, root_path );
VBox/Devices/PC/ipxe/src/net/infiniband/ib_srp.c:513:	strcpy ( rp_string_copy, rp_string );
VBox/Devices/PC/ipxe/src/net/udp/tftp.c:457:	strcpy ( err->errmsg, errmsg );
VBox/Devices/PC/ipxe/src/core/settings.c:1161:	strcpy ( tmp_name, name );
VBox/Devices/PC/ipxe/src/core/menu.c:72:		strcpy ( name_copy, name );
VBox/Devices/PC/ipxe/src/core/menu.c:75:	strcpy ( title_copy, title );
VBox/Devices/PC/ipxe/src/core/menu.c:124:		strcpy ( label_copy, label );
VBox/Devices/PC/ipxe/src/core/menu.c:127:	strcpy ( text_copy, text );
VBox/Devices/PC/ipxe/src/core/string.c:35: * strcpy - Copy a %NUL terminated string
VBox/Devices/PC/ipxe/src/core/string.c:39:char * strcpy(char * dest,const char *src)
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1230:    strcpy(name, subname);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1275:        strcpy(buf, PyString_AsString(path));
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1278:        strcpy(name, buf);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1280:            strcpy(buf, name);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1289:            strcpy(buf, name);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1293:            strcpy(buf, name);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1351:        strcpy(buf, PyString_AS_STRING(v));
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1393:        strcpy(buf+len, name);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1474:            strcpy(buf+len, fdp->suffix);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1491:            strcpy(buf, saved_buf);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1680:    strcpy(buf2, buf);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1742:    strcpy(pname, "__init__.py");
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1753:    strcpy(buf+i, Py_OptimizeFlag ? "o" : "c");
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1780:    strcpy(buf+i, "__init__/py");
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1787:        strcpy(buf+i, "o");
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:1789:        strcpy(buf+i, "c");
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:2270:        strcpy(buf, PyString_AS_STRING(pkgname));
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:2287:            strcpy(buf, PyString_AS_STRING(modname));
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/PyMod-2.7.2/Python/import.c:2512:            strcpy(p, subname);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/Efi/edk2module.c:5033:    strcpy(mode, orgmode);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/Efi/getpath.c:343:        strcpy(path, p);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/Efi/getpath.c:348:        strcpy(path, volume_name);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/Efi/getpath.c:352:        strcpy(path, p);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/Efi/getpath.c:374:    strcpy(path, buffer);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/Efi/getpath.c:573:      strcpy(prefix, volume_name);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/Efi/getpath.c:622:            strcpy(buf, rtpypath);
VBox/Devices/EFI/Firmware/AppPkg/Applications/Python/Efi/getpath.c:673:          strcpy(exec_prefix, volume_name);
VBox/Devices/EFI/Firmware/CryptoPkg/Include/OpenSslSupport.h:172:char           *strcpy     (char *, const char *);
VBox/Devices/EFI/Firmware/CryptoPkg/Include/OpenSslSupport.h:239:#define strcpy(strDest,strSource)         AsciiStrCpy(strDest,strSource)
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VolInfo/VolInfo.c:572:  strcpy (SectionStr, SectionTypeStringTable[Type]);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrSyntax.g:4642:    strcpy (NewStr, *Dest);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrCompiler.cpp:120:      strcpy (mOptions.OutputDirectory, Argv[Index]);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrCompiler.cpp:173:    strcpy (mOptions.VfrFileName, Argv[Index]);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrCompiler.cpp:316:  strcpy (mOptions.PkgOutputFileName, mOptions.OutputDirectory);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrCompiler.cpp:332:  strcpy (mOptions.COutputFileName, mOptions.OutputDirectory);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrCompiler.cpp:348:  strcpy (mOptions.PreprocessorOutputFileName, mOptions.OutputDirectory);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrCompiler.cpp:364:  strcpy (mOptions.RecordListFile, mOptions.OutputDirectory);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrCompiler.cpp:499:  strcpy (PreProcessCmd, mPreProcessCmd), strcat (PreProcessCmd, " ");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrFormPkg.h:791:          strcpy ((CHAR8 *)(mVarStore->Name), Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrFormPkg.h:834:          strcpy ((CHAR8 *)(mVarStoreEfi->Name), Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:139:      strcpy (mName, Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:151:      strcpy (mId, Id);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:174:      strcpy (mName, Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:186:      strcpy (mId, Id);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:365:      strcpy (mItemListPos->mId, Id);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:773:      strcpy (New->mTypeName, gInternalTypesTable[Index].mTypeName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:782:        strcpy (pYearField->mFieldName, "Year");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:788:        strcpy (pMonthField->mFieldName, "Month");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:794:        strcpy (pDayField->mFieldName, "Day");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:806:        strcpy (pHoursField->mFieldName, "Hours");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:812:        strcpy (pMinutesField->mFieldName, "Minutes");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:818:        strcpy (pSecondsField->mFieldName, "Seconds");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:831:        strcpy (pQuestionIdField->mFieldName, "QuestionId");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:837:        strcpy (pFormIdField->mFieldName, "FormId");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:843:        strcpy (pFormSetGuidField->mFieldName, "FormSetGuid");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:849:        strcpy (pDevicePathField->mFieldName, "DevicePath");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:1004:  strcpy(mNewDataType->mTypeName, TypeName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:1037:  strcpy (pNewField->mFieldName, FieldName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:1331:    strcpy (mVarStoreName, StoreName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:1358:    strcpy (mVarStoreName, StoreName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:1376:    strcpy (mVarStoreName, StoreName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2038:    strcpy (mRefName, RefName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2142:        strcpy (pNode->mRefName, RefName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2241:    strcpy (mRuleName, RuleName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2430:    strcpy (mName, "$DEFAULT");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2433:    strcpy (mName, Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2438:    strcpy (mVarIdStr, VarIdStr);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2441:    strcpy (mVarIdStr, "$");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2648:      strcpy (VarIdStr[0], BaseVarId);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2653:      strcpy (VarIdStr[1], BaseVarId);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2658:      strcpy (VarIdStr[2], BaseVarId);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2666:      strcpy (VarIdStr[0], Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2671:      strcpy (VarIdStr[1], Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2676:      strcpy (VarIdStr[2], Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2824:      strcpy (VarIdStr[0], BaseVarId);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2829:      strcpy (VarIdStr[1], BaseVarId);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2834:      strcpy (VarIdStr[2], BaseVarId);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2842:      strcpy (VarIdStr[0], Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2847:      strcpy (VarIdStr[1], Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2852:      strcpy (VarIdStr[2], Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2932:      strcpy (VarIdStr[0], BaseVarId);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2937:      strcpy (VarIdStr[1], BaseVarId);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2942:      strcpy (VarIdStr[2], BaseVarId);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2947:      strcpy (VarIdStr[3], BaseVarId);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2955:      strcpy (VarIdStr[0], Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2960:      strcpy (VarIdStr[1], Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2965:      strcpy (VarIdStr[2], Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:2970:      strcpy (VarIdStr[3], Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:3183:  strcpy (mStringFileName, StringFileName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.cpp:3355:    strcpy (VarStoreName, StringName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrUtilityLib.h:136:      strcpy (mIdentifier, Identifier);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/misc.c:700:	strcpy(key,rule);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:88:          strcpy(HdrAction, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:102:            strcpy(FirstAction, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:436:  else strcpy(CurrentClassName, name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:459:        /* MR22 */				  strcpy(BaseClassName,LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:570:      strcpy(pdecl, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:592:      strcpy(ret, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:691:      strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:752:  strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:786:    /* MR1 */		  strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:822:    /* MR1 */		  strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:1604:      strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:2361:                  strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:2429:            strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:2518:                  /* MR21 */                          strcpy(pFirstSetSymbol, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:2531:                    /* MR21 */                      strcpy(pFirstSetSymbol, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:2632:                              strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:2890:        strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:2894:        strcpy(eh->signalname, "default");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:2996:      strcpy(_retv->signalname, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:3006:        strcpy(_retv->signalname, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.c:3026:      strcpy(_retv->action, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:632:				strcpy(HdrAction, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:641:        				strcpy(FirstAction, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:774:		else strcpy(CurrentClassName, name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:794:/* MR22 */				  strcpy(BaseClassName,LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:860:					strcpy(pdecl, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:868:					strcpy(ret, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:935:					strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:969:			strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:992:/* MR1 */		  strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:1011:/* MR1 */		  strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:1428:					strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:1791:					strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:1830:				strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:1861:/* MR21 */                          strcpy(pFirstSetSymbol, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:1869:/* MR21 */                      strcpy(pFirstSetSymbol, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:1906:							strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:2038:			strcpy(a, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:2042:			strcpy(eh->signalname, "default");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:2113:			strcpy($eh->signalname, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:2119:			strcpy($eh->signalname, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/antlr.g:2128:			strcpy($eh->action, LATEXT(1));
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/main.c:827:			strcpy(Parser_h_Name, CurrentClassName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/main.c:829:			strcpy(Parser_c_Name, CurrentClassName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/main.c:1157:	strcpy(buf, fs);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/main.c:1526:	strcpy(newname, OutputDirectory);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/main.c:1707:	strcpy(ua->action, s);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/main.c:1745:	strcpy(p, buf);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/build.c:65:	strcpy(q, parm);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/antlr/build.c:105:	strcpy(a->action, action);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/dlg/support.c:230:	strcpy(newname, OutputDirectory);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/dlg/output.c:144:	strcpy(p, s);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/h/err.h:301:	for (i=0; i<LL_K; i++) strcpy(buf->textLA[i], zztextLA[i]);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/h/err.h:306:	strcpy(buf->text, zzlextext);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/h/err.h:361:	for (i=0; i<LL_K; i++) strcpy(zztextLA[i], buf->textLA[i]);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/h/err.h:366:	strcpy(zzlextext, buf->text);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/h/err.h:638:		{NLA = zzEOF_TOKEN; strcpy(NLATEXT, "");}
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/h/err.h:642:		strcpy(NLATEXT, zzinf_text[zzinf_labase]);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/h/err.h:730:		strcpy(&zzinf_text_buffer[zzinf_text_buffer_index], NLATEXT);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/h/charptr.c:57:	strcpy(*a, text);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/h/AToken.h:205:            strcpy(_text,s);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/h/AToken.h:209:            strcpy(_text,"");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/h/AToken.h:278:            strcpy(_text,s);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/h/AToken.h:282:            strcpy(_text,"");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/support/genmk/genmk_old.c:265:	strcpy(ATOKENBUFFER_O, ATOKENBUFFER_C);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/support/genmk/genmk_old.c:268:	strcpy(APARSER_O, APARSER_C);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/support/genmk/genmk_old.c:272:	strcpy(ASTBASE_O, ASTBASE_C);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/support/genmk/genmk_old.c:276:	strcpy(PCCTSAST_O, PCCTSAST_C);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/support/genmk/genmk_old.c:280:	strcpy(LIST_O, LIST_C);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/support/genmk/genmk_old.c:284:	strcpy(DLEXERBASE_O, DLEXERBASE_C);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/support/genmk/genmk_old.c:311:		else strcpy(buf, p->option);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/support/genmk/genmk.c:387:	strcpy(ATOKENBUFFER_O, ATOKENBUFFER_C);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/support/genmk/genmk.c:390:	strcpy(APARSER_O, APARSER_C);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/support/genmk/genmk.c:394:	strcpy(ASTBASE_O, ASTBASE_C);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/support/genmk/genmk.c:398:	strcpy(PCCTSAST_O, PCCTSAST_C);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/support/genmk/genmk.c:402:	strcpy(LIST_O, LIST_C);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/support/genmk/genmk.c:406:	strcpy(DLEXERBASE_O, DLEXERBASE_C);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/Pccts/support/genmk/genmk.c:441:		else strcpy(buf, p->option);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrError.cpp:108:    strcpy (mInputFileName, InputFile);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrFormPkg.cpp:41:      strcpy (mKey, Key);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrFormPkg.cpp:48:      strcpy (mMsg, Msg);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/VfrCompile/VfrFormPkg.cpp:876:            strcpy (NewStr, SName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GnuGenBootSector/GnuGenBootSector.c:140:      strcpy (PathInfo->PhysicalPath, PathInfo->Path);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GnuGenBootSector/GnuGenBootSector.c:172:  strcpy(PathInfo->PhysicalPath, PathInfo->Path);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenBootSector/GenBootSector.c:640:  strcpy(PathInfo->PhysicalPath, PathInfo->Path);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Common/StringFuncs.c:47:    strcpy (NewString, String);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Common/CommonLib.c:627:    strcpy (mCommonLibFullPath, WINDOWS_EXTENSION_PATH);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Common/CommonLib.c:633:      strcpy (mCommonLibFullPath, WINDOWS_UNC_EXTENSION_PATH);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Common/OsPath.c:247:  strcpy (Result, OldPath);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Common/OsPath.c:264:  strcpy (Result, Peer);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Common/ParseInf.c:330:            strcpy (Value, CurrentToken);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Common/MyAlloc.c:245:  strcpy ((CHAR8 *)Tmp->File, (CHAR8 *)File);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Common/EfiUtilityMsgs.c:613:      strcpy (mUtilityName, UtilityName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Common/SimpleFileParsing.c:646:  strcpy (FoundFileName, SourceFile->FileName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Common/SimpleFileParsing.c:1052:    strcpy (IncludedSourceFile.FileName, IncludeFileName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/EfiRom/EfiRom.c:98:    strcpy (mOptions.OutFileName, mOptions.FileList->FileName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/EfiRom/EfiRom.c:115:    strcpy (Ext, DEFAULT_OUTPUT_EXTENSION);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/EfiRom/EfiRom.c:980:        strcpy (Options->OutFileName, Argv[1]);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFw/Elf32Convert.c:1012:  strcpy ((char *)(Nb10 + 1), mInImageName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFw/ElfConvert.c:131:  strcpy((char *)Hdr->Name, Name);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFw/Elf64Convert.c:917:  strcpy ((char *)(Nb10 + 1), mInImageName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFw/GenFw.c:2535:      strcpy((char *) SectionHeader[Index].Name, ".rsrc");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFw/GenFw.c:2712:      strcpy (ReportFileName, OutImageName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFw/GenFw.c:2713:      strcpy (ReportFileName + (FileLen - 4), ".txt");
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFv/GenFv.c:340:      strcpy (mFvDataInfo.FvFiles[Index], argv[1]);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFv/GenFv.c:628:      strcpy (mCapDataInfo.CapFiles[Index], mFvDataInfo.FvFiles[Index]);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFv/GenFvInternalLib.c:240:    strcpy (FvInfo->FvExtHeaderFile, Value);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFv/GenFvInternalLib.c:251:    strcpy (FvInfo->FvName, Value);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFv/GenFvInternalLib.c:380:      strcpy (FvInfo->FvFiles[Number + Index], Value);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFv/GenFvInternalLib.c:764:  strcpy (PeMapFileName, FileName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFv/GenFvInternalLib.c:801:	strcpy (KeyWord, Cptr + 1);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFv/GenFvInternalLib.c:2222:    strcpy (FvMapName, MapFileName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFv/GenFvInternalLib.c:2224:    strcpy (FvMapName, FvFileName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFv/GenFvInternalLib.c:2232:  strcpy (FvReportName, FvFileName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFv/GenFvInternalLib.c:3053:          strcpy (PeFileName, FileName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFv/GenFvInternalLib.c:3307:      strcpy (PeFileName, FileName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFv/GenFvInternalLib.c:3652:    strcpy (CapInfo->CapName, Value);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenFv/GenFvInternalLib.c:3672:      strcpy (CapInfo->CapFiles[Index], Value);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenVtf/GenVtf.c:197:  strcpy (Line, TmpLine);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenVtf/GenVtf.c:264:      strcpy (*TokenStr, Token);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenVtf/GenVtf.c:365:      strcpy (VtfInfo->CompBinName, *TokenStr);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenVtf/GenVtf.c:368:      strcpy (VtfInfo->CompSymName, *TokenStr);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenVtf/GenVtf.c:447:        strcpy (IA32BinFile, *TokenStr);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenVtf/GenVtf.c:454:        strcpy (FileListPtr->CompName, *TokenStr);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/GenVtf/GenVtf.c:2209:  strcpy (BaseToken, SourceFileName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Split/Split.c:366:    strcpy (OutName1, InputFileName);
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Split/Split.c:377:    strcpy (OutName2, InputFileName);
Binary file VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Dll/sqlite3.dll matches
VBox/Devices/EFI/Firmware/StdLib/LibC/Time/ZoneProc.c:343:      (void) strcpy(fullname, p); /* XXX strcpy is safe */
VBox/Devices/EFI/Firmware/StdLib/LibC/String/Copying.c:61:/** The strcpy function copies the string pointed to by s2 (including the
VBox/Devices/EFI/Firmware/StdLib/LibC/String/Copying.c:65:    @return   The strcpy function returns the value of s1.
VBox/Devices/EFI/Firmware/StdLib/LibC/String/Copying.c:68:strcpy(char * __restrict s1, const char * __restrict s2)
VBox/Devices/EFI/Firmware/StdLib/BsdSocketLib/res_init.c:391:        strcpy(_res.defdname, cp + 1);
VBox/Devices/EFI/Firmware/StdLib/BsdSocketLib/inet_neta.c:118:		strcpy(dst, "0.0.0.0");
VBox/Devices/EFI/Firmware/StdLib/BsdSocketLib/res_update.c:341:            strcpy(cp1, primary);
VBox/Devices/EFI/Firmware/StdLib/BsdSocketLib/res_update.c:347:            strcpy(cp1, mailaddr);
VBox/Devices/EFI/Firmware/StdLib/BsdSocketLib/res_update.c:364:            strcpy(zptr->z_origin, zname);
VBox/Devices/EFI/Firmware/StdLib/BsdSocketLib/res_update.c:371:            strcpy(zname, dname);
VBox/Devices/EFI/Firmware/StdLib/BsdSocketLib/res_update.c:437:                strcpy(target, name);
VBox/Devices/EFI/Firmware/StdLib/BsdSocketLib/res_update.c:516:                    strcpy(zptr->z_ns[i].nsname,
VBox/Devices/EFI/Firmware/StdLib/BsdSocketLib/res_update.c:518:                    strcpy(zptr->z_ns[0].nsname,
VBox/Devices/EFI/Firmware/StdLib/BsdSocketLib/ns_ttl.c:183:	strcpy(*buf, tmp);
VBox/Devices/EFI/Firmware/StdLib/BsdSocketLib/res_debug.c:334:            strcpy(name + newlen, ".");
VBox/Devices/EFI/Firmware/StdLib/BsdSocketLib/gethostbydns.c:324:			strcpy(bp, tbuf);
VBox/Devices/EFI/Firmware/StdLib/BsdSocketLib/gethostbydns.c:347:			strcpy(bp, tbuf);
VBox/Devices/EFI/Firmware/StdLib/BsdSocketLib/gethostbydns.c:487:			strcpy(bp, qname);
VBox/Devices/EFI/Firmware/StdLib/BsdSocketLib/gethostbydns.c:696:		strcpy(qp, "ip6.int");
VBox/Devices/EFI/Firmware/StdLib/Include/string.h:35:      char     *strcpy      (char * __restrict s1, const char * __restrict s2);
VBox/Devices/EFI/Firmware/StdLib/Include/string.h:127:/** The strcpy function copies the string pointed to by Src (including the
VBox/Devices/EFI/Firmware/StdLib/Include/string.h:134:    @return   The strcpy function returns the value of Dest.
VBox/Devices/EFI/Firmware/StdLib/Include/string.h:136:char     *strcpy(char * __restrict Dest, const char * __restrict Src);
VBox/Devices/EFI/DevEFI.cpp:2310:    //strcpy(pThis->szBootArgs, "-v keepsyms=1 io=0xf debug=0x2a");
VBox/Devices/EFI/DevEFI.cpp:2311:    //strcpy(pThis->szBootArgs, "-v keepsyms=1 debug=0x2a");
VBox/Devices/Network/slirp/libalias/alias_proxy.c:700:    strcpy(buffer, cmd);
VBox/Devices/Network/slirp/libalias/alias_proxy.c:782:            strcpy(str_port, token);
VBox/Devices/Network/lwip-new/src/netif/ppp/chap.c:750:  char msg[256]; /* @todo: this can be a char*, no strcpy needed */
VBox/Devices/Network/lwip-new/src/netif/ppp/chap.c:753:    strcpy(msg, "Welcome!");
VBox/Devices/Network/lwip-new/src/netif/ppp/chap.c:755:    strcpy(msg, "I don't like you.  Go 'way.");
VBox/Devices/Network/lwip-new/src/netif/ppp/ppp_oe.c:305:  strcpy(devname, "pppoe");  /* as long as we don't know which instance */
VBox/Devices/Network/lwip-new/src/netif/ppp/auth.c:793:      strcpy(ppp_settings.our_name, ppp_settings.hostname);
VBox/Devices/Network/lwip-new/src/netif/ppp/auth.c:797:    strcpy(ppp_settings.user, ppp_settings.our_name);
VBox/Devices/Network/lwip-new/src/netif/ppp/auth.c:1031:    strcpy(user, "none");
VBox/Devices/Network/lwip-new/src/netif/ppp/auth.c:1034:    strcpy(passwd, "none");
VBox/Devices/Network/SrvIntNetR0.cpp:6381:    strcpy(pNetwork->szTrunk, pszTrunk);
VBox/Devices/Network/DrvIntNet.cpp:1451:    strcpy(pThis->szNetwork, OpenReq.szNetwork);
VBox/Devices/Network/DrvIntNet.cpp:1718:        strcpy(OpenReq.szTrunk, &pThis->szNetwork[sizeof("if=") - 1]);
VBox/Devices/Network/DrvIntNet.cpp:1729:        strcpy(OpenReq.szTrunk, &pThis->szNetwork[sizeof("wif=") - 1]);
VBox/Devices/Audio/DevSB16.cpp:365:        strcpy(pCfg->szName, "Output");
VBox/Devices/Audio/DevSB16.cpp:511:        strcpy(pCfg->szName, "Output");
VBox/Devices/Audio/DevSB16.cpp:1085:    strcpy(pCfg->szName, "Output");
VBox/Devices/Audio/DevSB16.cpp:2034:            strcpy(pCfg->szName, "Output");
VBox/Devices/Audio/DevIchAc97.cpp:1697:            strcpy(pCfg->szName, "Line-In");
VBox/Devices/Audio/DevIchAc97.cpp:1709:            strcpy(pCfg->szName, "Mic-In");
VBox/Devices/Audio/DevIchAc97.cpp:1721:            strcpy(pCfg->szName, "Output");
VBox/Devices/Storage/DrvHostBase-darwin.cpp:582:                        strcpy(szName1, *pszVendor ? pszVendor : pszProduct);
VBox/Devices/Storage/DrvHostBase-darwin.cpp:589:                    strcpy(szName2, szName1);
VBox/VMM/VMMR3/PDMUsb.cpp:348:            strcpy(szFilename, szName);
VBox/VMM/VMMR3/PDMLdr.cpp:515:    strcpy(pModule->szName, pszName);
VBox/VMM/VMMR3/PDMLdr.cpp:517:    strcpy(pModule->szFilename, pszFilename);
VBox/VMM/VMMR3/PDMLdr.cpp:690:    strcpy(pModule->szName, pszName);
VBox/VMM/VMMR3/PDMLdr.cpp:692:    strcpy(pModule->szFilename, pszFilename);
VBox/VMM/VMMR3/DBGFReg.cpp:377:    strcpy(szName, pRegSet->szPrefix);
VBox/VMM/VMMR3/DBGFReg.cpp:386:        strcpy(pszReg, paRegisters[iDesc].pszName);
VBox/VMM/VMMR3/DBGFReg.cpp:415:                    strcpy(pszSub, paSubFields[iSubField].pszName);
VBox/VMM/VMMR3/DBGFReg.cpp:436:            strcpy(pszReg, pszRegName);
VBox/VMM/VMMR3/STAM.cpp:2699:                        strcpy(&szName[cchBase], "/idxCpuSet");
VBox/VMM/VMMR3/STAM.cpp:2702:                        strcpy(&szName[cchBase], "/DesiredHz");
VBox/VMM/VMMR3/STAM.cpp:2705:                        strcpy(&szName[cchBase], "/CurTimerHz");
VBox/VMM/VMMR3/STAM.cpp:2708:                        strcpy(&szName[cchBase], "/PPTChanges");
VBox/VMM/VMMR3/STAM.cpp:2711:                        strcpy(&szName[cchBase], "/PPTStarts");
VBox/VMM/VMMR3/PGMDbg.cpp:1152:        strcpy(szPage, " not found");
VBox/VMM/VMMR3/PGMDbg.cpp:1195:            strcpy(szPage, "not found");
VBox/VMM/VMMR3/PGMDbg.cpp:1874:        strcpy(szPage, " not found");
VBox/VMM/VMMR3/PDMDriver.cpp:179:            strcpy(szFilename, szName);
VBox/VMM/VMMR3/PDMDriver.cpp:1726:            strcat(strcat(strcpy(szSymbol, "drvR0"),         pDrvIns->pReg->szName),         "ReqHandler");
VBox/VMM/VMMR3/HM.cpp:1056:        strcpy((char *)pCache->aMagic, "VMCSCACHE Magic");
VBox/VMM/VMMR3/HM.cpp:1967:    strcpy((char *)pCache->aMagic, "VMCSCACHE Magic");
VBox/VMM/VMMR3/SELM.cpp:2470:#define ADD_STR(psz, pszAdd) do { strcpy(psz, pszAdd); psz += strlen(pszAdd); } while (0)
VBox/VMM/VMMR3/PDMDevice.cpp:560:            strcpy(szFilename, szName);
VBox/VMM/VMMR3/PDMDevHlp.cpp:2562:        strcat(strcat(strcpy(szSymbol, "devR0"),         pDevIns->pReg->szName),         "ReqHandler");
VBox/VMM/VMMR3/CPUM.cpp:1307:        strcpy((char *)pVM->aCpus[i].cpum.s.aMagic, "CPUMCPU Magic");
VBox/VMM/VMMR3/CPUM.cpp:1793:            strcpy(psz, pszAdd);
VBox/VMM/VMMR0/HMVMXR0.cpp:978:    strcpy((char *)pVM->hm.s.vmx.pbScratch, "SCRATCH Magic");
VBox/VMM/VMMR0/GMMR0.cpp:4421:    strcpy(pGblMod->szName, pszModuleName);
VBox/VMM/VMMR0/GMMR0.cpp:4422:    strcpy(pGblMod->szVersion, pszVersion);
VBox/VMM/VMMR0/HMR0.cpp:1822:# define ADD_STR(psz, pszAdd) do { strcpy(psz, pszAdd); psz += strlen(pszAdd); } while (0)
VBox/VMM/VMMR0/HMR0.cpp:1913:            strcpy(psz, pszAdd);
VBox/VMM/tools/VBoxCpuReport.cpp:4651:        pszName = strcpy(szName, pszCpuDesc);
VBox/VMM/tools/VBoxCpuReport.cpp:4692:        strcpy(szNameC, pszName);
VBox/VMM/tools/VBoxCpuReport.cpp:4731:            strcpy(pchDot, "Z");
VBox/HostDrivers/VBoxNetFlt/win/cfg/VBoxNetCfg.cpp:2024:            strcpy(pszBuf, "unknown");
VBox/HostDrivers/Support/SUPR3HardenedNoCrt.cpp:113:/** strcpy */
VBox/HostDrivers/Support/SUPLibLdr.cpp:415:        strcpy(OpenReq.u.In.szName, pszModule);
VBox/HostDrivers/Support/SUPLibLdr.cpp:416:        strcpy(OpenReq.u.In.szFilename, pszFilename);
VBox/HostDrivers/Support/SUPLib.cpp:276:        strcpy(CookieReq.u.In.szMagic, SUPCOOKIE_MAGIC);
VBox/HostDrivers/Support/SUPLib.cpp:2061:                    strcpy(&Req.u.In.szName[cchModule], ".exe");
VBox/HostDrivers/Support/Makefile.kmk:348:	$(VBOX_PATH_RUNTIME_SRC)/common/string/strcpy.asm \
VBox/HostDrivers/Support/win/SUPHardenedVerify-win.h:256:#  define suplibHardenedStrCopy      strcpy
VBox/HostDrivers/Support/win/SUPHardenedVerify-win.h:267:#  define strcpy                     suplibHardenedStrCopy
VBox/HostDrivers/Support/os2/SUPDrv-os2.cpp:124:                    strcpy(&g_szInitText[0],
VBox/HostDrivers/Support/SUPLibInternal.h:124:# define suplibHardenedStrCopy strcpy
VBox/HostDrivers/VBoxUSB/win/mon/VBoxUsbFlt.cpp:1197:    strcpy(pDevInfo->szDrvKeyName, pDevice->szDrvKeyName);
VBox/HostDrivers/VBoxUSB/win/mon/VBoxUsbFlt.cpp:1202:        strcpy(pDevInfo->szObjName, pDevice->szObjName);
VBox/HostDrivers/VBoxUSB/win/lib/VBoxUsbLib-win.cpp:842:    strcpy(lpszDevName, "\\\\.\\");
VBox/HostDrivers/VBoxUSB/win/lib/VBoxUsbLib-win.cpp:843:    strcpy(lpszDevName + sizeof("\\\\.\\") - sizeof (lpszDevName[0]), lpszName);
VBox/Storage/DMG.cpp:1191:            strcpy(&pThis->aRsrcs[iRsrc].szName[0], "blkx");
VBox/Storage/DMG.cpp:1197:            strcpy(&pThis->aRsrcs[iRsrc].szName[0], "plst");
VBox/Storage/VD.cpp:9644:            strcpy(pszFilename, pImage->pszFilename);
VBox/Storage/VMDK.cpp:5179:        strcpy(pszTmp, pszFoundStr + strlen(pszWhat));
VBox/HostServices/SharedOpenGL/crserverlib/server_config.c:134:    strcpy(response, "1 0 expando");
VBox/HostServices/SharedOpenGL/crserverlib/server_config.c:136:    strcpy(response, "1 0 render");
VBox/HostServices/SharedOpenGL/crserverlib/server_config.c:237:        strcpy(response, "1 tcpip 1");
VBox/HostServices/SharedOpenGL/crserverlib/server_config.c:383:    strcpy(cr_server.protocol, "vboxhgcm");
VBox/HostServices/SharedFolders/vbsfpath.cpp:126:                    strcpy(pszStartComponent, &pDirEntry->szName[0]);
VBox/HostServices/SharedFolders/testcase/tstSharedFolderService.cpp:247:                strcpy(pDirEntry->szName, "test");
VBox/HostServices/SharedFolders/testcase/tstSharedFolderService.cpp:262:                strcpy(pDirEntry->szName, "file");
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:140:            strcpy(pDirEntry->szName, g_apszDirsC[iDirFile++]);
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:146:            strcpy(pDirEntry->szName, g_apszTestdirEntries[iDirFile++]);
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:152:            strcpy(pDirEntry->szName, g_apszSUBDIREntries[iDirFile++]);
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:221:    strcpy(pDirEntry->szName, pszFullPath);
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:254:            strcpy(pszStartComponent, &pDirEntry->szName[0]);
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:421:    strcpy(szTest, "c:\\test Dir\\z.bAt");
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:423:    strcpy(szTest, "c:\\test dir\\z.bAt");
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:425:    strcpy(szTest, "c:\\test dir\\SUBDIR\\z.bAt");
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:427:    strcpy(szTest, "c:\\test dir\\SUBDiR\\atestje.bat");
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:429:    strcpy(szTest, "c:\\TEST dir\\subDiR\\aTestje.baT");
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:431:    strcpy(szTest, "c:\\TEST dir\\subDiR\\*");
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:433:    strcpy(szTest, "c:\\TEST dir\\subDiR\\");
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:435:    strcpy(szTest, "c:\\test dir\\SUBDIR\\");
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:437:    strcpy(szTest, "c:\\test dir\\invalid\\SUBDIR\\test.bat");
VBox/Main/src-server/MachineImpl.cpp:7759:        strcpy(pszNamePart, strAppPath.c_str());
VBox/Main/src-server/MachineImpl.cpp:7763:        strcpy(pszNamePart, s_szVirtualBox_exe);
VBox/Main/src-server/MachineImpl.cpp:7800:        strcpy(pszNamePart, s_szVBoxSDL_exe);
VBox/Main/src-server/MachineImpl.cpp:7842:        strcpy(pszNamePart, s_szVBoxHeadless_exe);
VBox/Main/src-server/xpcom/server_module.cpp:218:                    strcpy(VBoxSVCPath, path.get());
VBox/Main/src-server/generic/NetIf-generic.cpp:251:                        strcpy(pInfo->szShortName, szBuf);
VBox/Main/src-server/generic/NetIf-generic.cpp:252:                        strcpy(pInfo->szName, szBuf);
VBox/Main/src-server/ApplianceImplImport.cpp:1203:    strcpy(&pszNameBuf[cchBaseName], ".mf");
VBox/Main/src-server/ApplianceImplImport.cpp:1216:        strcpy(&pszNameBuf[cchBaseName], ".cert");
VBox/Main/src-server/solaris/PerformanceSolaris.cpp:560:    strcpy(szName, name);
VBox/Main/src-server/solaris/NetIf-solaris.cpp:326:    strcpy(szIfaceName, pszIface);
VBox/Main/src-server/solaris/NetIf-solaris.cpp:499:                            strcpy(szNICDesc, pszIface);
VBox/Main/src-server/NetworkServiceRunner.cpp:96:        strcpy(suffix, m->mProcName);
VBox/Main/src-server/UnattendedImpl.cpp:293:                strcpy(&szTmp[3], "US");
VBox/Main/src-server/UnattendedImpl.cpp:295:                strcpy(&szTmp[3], "SA");
VBox/Main/src-server/UnattendedImpl.cpp:297:                strcpy(&szTmp[3], "DK");
VBox/Main/src-server/UnattendedImpl.cpp:299:                strcpy(&szTmp[3], "EE");
VBox/Main/src-server/UnattendedImpl.cpp:301:                strcpy(&szTmp[3], "GR");
VBox/Main/src-server/UnattendedImpl.cpp:303:                strcpy(&szTmp[3], "IL");
VBox/Main/src-server/UnattendedImpl.cpp:305:                strcpy(&szTmp[3], "JP");
VBox/Main/src-server/UnattendedImpl.cpp:307:                strcpy(&szTmp[3], "SE");
VBox/Main/src-server/UnattendedImpl.cpp:309:                strcpy(&szTmp[3], "UA");
VBox/Main/src-server/UnattendedImpl.cpp:311:                strcpy(szTmp, "cs-CZ");
VBox/Main/src-server/UnattendedImpl.cpp:313:                strcpy(szTmp, "nb-NO");
VBox/Main/src-server/UnattendedImpl.cpp:315:                strcpy(szTmp, "pt-PT");
VBox/Main/src-server/UnattendedImpl.cpp:317:                strcpy(szTmp, "pt-BR");
VBox/Main/src-server/UnattendedImpl.cpp:319:                strcpy(szTmp, "zh-CN");
VBox/Main/src-server/UnattendedImpl.cpp:321:                strcpy(szTmp, "zh-HK");
VBox/Main/src-server/UnattendedImpl.cpp:323:                strcpy(szTmp, "zh-TW");
VBox/Main/src-server/UnattendedImpl.cpp:325:                strcpy(szTmp, "sr-Latn-CS"); /* hmm */
VBox/Main/src-server/UnattendedImpl.cpp:334:            strcpy(szTmp, "en-US");
VBox/Main/src-server/HostImpl.cpp:2797:            strcpy(mnt_type, mntent->mnt_type);
VBox/Main/src-server/HostImpl.cpp:2798:            strcpy(mnt_dev, mntent->mnt_fsname);
VBox/Main/src-server/darwin/iokit.cpp:366:        strcpy(pszKey, "CFStringGetCString failure");
VBox/Main/src-server/darwin/iokit.cpp:437:            strcpy(pszValue, "CFStringGetCString failure");
VBox/Main/src-server/darwin/iokit.cpp:482:        strcpy(s_szPath, "IORegistryEntryGetPath failed");
VBox/Main/src-server/darwin/iokit.cpp:1532:                        strcpy(szName, *pszVendor ? pszVendor : pszProduct);
VBox/Main/src-server/darwin/iokit.cpp:1711:                        strcpy(szTmp, szBSDName);
VBox/Main/src-client/HGCM.cpp:2012:                    strcpy(handle->pszServiceName, pMsg->pszServiceName);
VBox/Main/src-client/Nvram.cpp:177:                strcpy(szExtraName + offValueNm, apszTodo[i]);
VBox/Main/src-client/Nvram.cpp:219:        strcpy(szExtraName + offValue, s_apszValueNames[i]);
VBox/Main/src-client/ConsoleImpl2.cpp:5348:                        strcpy(szTrunkName, VBOX_WIN_BINDNAME_PREFIX);
VBox/Main/src-client/ConsoleImpl2.cpp:5634:                            strcpy(szTrunkName, VBOX_WIN_BINDNAME_PREFIX);
VBox/Main/src-all/HashedPw.cpp:89:        strcpy(pszHashedPw, s_szHashedPwPrefix);
libs/liblzf-3.4/lzf.c:343:      strcpy (oname, fname);
libs/liblzf-3.4/lzf.c:354:      strcpy (oname, fname);
libs/libpng-1.2.54/ltmain.sh:5840:  strcpy (newargz[0], actual_cwrapper_path);
libs/libpng-1.2.54/ltmain.sh:5941:  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),
libs/libpng-1.2.54/ltmain.sh:6073:		  strcpy (concat_name + tmp_len + 1, wrapper);
libs/libpng-1.2.54/ltmain.sh:6081:		  strcpy (concat_name + p_len + 1, wrapper);
libs/libpng-1.2.54/ltmain.sh:6098:  strcpy (concat_name + tmp_len + 1, wrapper);
libs/libpng-1.2.54/ltmain.sh:6266:          strcpy (new_value, orig_value);
libs/libpng-1.2.54/ltmain.sh:6267:          strcpy (new_value + orig_value_len, add);
libs/libpng-1.2.54/ltmain.sh:6271:          strcpy (new_value, add);
libs/libpng-1.2.54/ltmain.sh:6272:          strcpy (new_value + add_len, orig_value);
libs/libpng-1.2.54/contrib/visupng/VisualPng.c:109:            strcpy (szCmdFileName, szCmdLine);
libs/libpng-1.2.54/contrib/visupng/VisualPng.c:111:        strcpy (szCmdFileName, "");
libs/libpng-1.2.54/contrib/visupng/VisualPng.c:181:        strcpy (szImgPathName, "");
libs/libpng-1.2.54/contrib/visupng/VisualPng.c:187:            strcpy (szImgPathName, szCmdFileName);
libs/libpng-1.2.54/contrib/visupng/VisualPng.c:536:    strcpy (szImgPathName, pstrPathName);
libs/libpng-1.2.54/contrib/visupng/VisualPng.c:537:    strcpy (szImgFileName, strrchr (pstrPathName, '\\') + 1);
libs/libpng-1.2.54/contrib/visupng/VisualPng.c:539:    strcpy (szImgFindName, szImgPathName);
libs/libpng-1.2.54/contrib/visupng/VisualPng.c:570:        strcpy (*ppFileList + ii, szImgPathName);
libs/libpng-1.2.54/contrib/visupng/VisualPng.c:571:        strcpy (strrchr(*ppFileList + ii, '\\') + 1, finddata.cFileName);
libs/libpng-1.2.54/contrib/visupng/VisualPng.c:593:                strcpy (szTmp, *ppFileList + jj);
libs/libpng-1.2.54/contrib/visupng/VisualPng.c:594:                strcpy (*ppFileList + jj, *ppFileList + ii);
libs/libpng-1.2.54/contrib/visupng/VisualPng.c:595:                strcpy (*ppFileList + ii, szTmp);
libs/libpng-1.2.54/contrib/visupng/VisualPng.c:630:            strcpy (pstrPrevName, pFileList + (*pFileIndex * MAX_PATH));
libs/libpng-1.2.54/contrib/visupng/VisualPng.c:642:            strcpy (pstrNextName, pFileList + (*pFileIndex * MAX_PATH));
libs/libpng-1.2.54/contrib/gregbook/wpng.c:368:                    strcpy(outname, inname);
libs/libpng-1.2.54/contrib/gregbook/wpng.c:369:                    strcpy(outname+len, ".png");
libs/libpng-1.2.54/contrib/gregbook/wpng.c:373:                    strcpy(outname+len, ".png");
libs/libpng-1.2.54/CHANGES:701:  Changed sprintf() to strcpy() in png_write_sCAL_s() to work without STDIO
libs/libpng-1.2.54/CHANGES:949:  Changed all instances of memcpy, strcpy, and strlen to png_memcpy, png_strcpy,
libs/zlib-1.2.8/examples/gzlog.c:229:#include <string.h>     /* strlen, strrchr, strcpy, strncpy, strcmp */
libs/zlib-1.2.8/examples/gzlog.c:353:    strcpy(log->end, ".lock");
libs/zlib-1.2.8/examples/gzlog.c:376:    strcpy(log->end, ".lock");
libs/zlib-1.2.8/examples/gzlog.c:388:    strcpy(log->end, ".lock");
libs/zlib-1.2.8/examples/gzlog.c:400:    strcpy(log->end, ".lock");
libs/zlib-1.2.8/examples/gzlog.c:559:    strcpy(log->end, ".add");
libs/zlib-1.2.8/examples/gzlog.c:577:    strcpy(log->end, ".add");
libs/zlib-1.2.8/examples/gzlog.c:582:    strcpy(log->end, ".dict");
libs/zlib-1.2.8/examples/gzlog.c:586:    strcpy(dest, log->path);
libs/zlib-1.2.8/examples/gzlog.c:587:    strcpy(log->end, ".temp");
libs/zlib-1.2.8/examples/gzlog.c:628:        strcpy(log->end, ".dict");
libs/zlib-1.2.8/examples/gzlog.c:724:    strcpy(log->end, ".repairs");
libs/zlib-1.2.8/examples/gzlog.c:750:        strcpy(log->end, ".add");
libs/zlib-1.2.8/examples/gzlog.c:828:    strcpy(log->end, ".gz");
libs/zlib-1.2.8/examples/gzlog.c:843:        strcpy(log->end, ".dict");
libs/zlib-1.2.8/examples/gzlog.c:878:    strcpy(log->id, LOGID);
libs/zlib-1.2.8/examples/gzlog.c:888:    strcpy(log->path, path);
libs/zlib-1.2.8/examples/gzlog.c:952:        strcpy(log->end, ".add");
libs/zlib-1.2.8/examples/gzlog.c:962:        strcpy(log->end, ".temp");
libs/zlib-1.2.8/examples/gzlog.c:1013:    strcpy(log->end, ".add");
libs/zlib-1.2.8/examples/gzlog.c:1056:    strcpy(log->id, "bad");
libs/zlib-1.2.8/gzlib.c:216:        strcpy(state->path, path);
libs/zlib-1.2.8/gzlib.c:610:    strcpy(state->msg, state->path);
libs/zlib-1.2.8/test/minigzip.c:473:    strcpy(outfile, file);
libs/zlib-1.2.8/test/minigzip.c:513:    strcpy(buf, file);
libs/zlib-1.2.8/test/minigzip.c:568:    strcpy(outmode, "wb6 ");
libs/zlib-1.2.8/test/example.c:98:    strcpy((char*)uncompr, "garbage");
libs/zlib-1.2.8/test/example.c:149:    strcpy((char*)uncompr, "garbage");
libs/zlib-1.2.8/test/example.c:245:    strcpy((char*)uncompr, "garbage");
libs/zlib-1.2.8/test/example.c:341:    strcpy((char*)uncompr, "garbage");
libs/zlib-1.2.8/test/example.c:420:    strcpy((char*)uncompr, "garbage");
libs/zlib-1.2.8/test/example.c:501:    strcpy((char*)uncompr, "garbage");
libs/zlib-1.2.8/test/infcover.c:529:    strcpy(prefix, id);
libs/zlib-1.2.8/test/infcover.c:555:        strcpy(prefix, id);
libs/zlib-1.2.8/contrib/untgz/untgz.c:137:  strcpy(buffer,arcname);
libs/zlib-1.2.8/contrib/untgz/untgz.c:142:       strcpy(buffer+origlen,TGZsuffix[i]);
libs/zlib-1.2.8/contrib/minizip/miniunz.c:154:  strcpy(buffer,newdir);
libs/zlib-1.2.8/contrib/iostream3/zfstream.cc:11:#include <cstring>          // for strcpy, strcat, strlen (mode strings)
libs/zlib-1.2.8/contrib/iostream3/zfstream.cc:146:    strcpy(c_mode, "w");
libs/zlib-1.2.8/contrib/iostream3/zfstream.cc:148:    strcpy(c_mode, "a");
libs/zlib-1.2.8/contrib/iostream3/zfstream.cc:150:    strcpy(c_mode, "w");
libs/zlib-1.2.8/contrib/iostream3/zfstream.cc:152:    strcpy(c_mode, "r");
libs/zlib-1.2.8/contrib/iostream3/zfstream.cc:155://    strcpy(c_mode, "r+");
libs/zlib-1.2.8/contrib/iostream3/zfstream.cc:157://    strcpy(c_mode, "w+");
libs/kStuff/kStuff/kHlp/CRT/kHlpCRTString.cpp:153:    return strcpy(psz1, psz2);
libs/kStuff/kStuff/kLdr/testcase/tst-0-driver.c:90:    strcpy(szErr, pszErrInit);
libs/kStuff/iprt/kHlpString-iprt.cpp:140:    return strcpy(psz1, psz2);
libs/libxml2-2.9.4/triostr.c:282:  (void)strcpy(target, source);
libs/libxml2-2.9.4/xzlib.c:116:    strcpy(state->msg, state->path);
libs/libxml2-2.9.4/xzlib.c:158:    strcpy(state->path, path);
libs/libxml2-2.9.4/xmlmemory.c:525:    strcpy(s,str);
libs/libxml2-2.9.4/ltmain.sh:5840:  strcpy (newargz[0], actual_cwrapper_path);
libs/libxml2-2.9.4/ltmain.sh:5941:  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),
libs/libxml2-2.9.4/ltmain.sh:6073:		  strcpy (concat_name + tmp_len + 1, wrapper);
libs/libxml2-2.9.4/ltmain.sh:6081:		  strcpy (concat_name + p_len + 1, wrapper);
libs/libxml2-2.9.4/ltmain.sh:6098:  strcpy (concat_name + tmp_len + 1, wrapper);
libs/libxml2-2.9.4/ltmain.sh:6266:          strcpy (new_value, orig_value);
libs/libxml2-2.9.4/ltmain.sh:6267:          strcpy (new_value + orig_value_len, add);
libs/libxml2-2.9.4/ltmain.sh:6271:          strcpy (new_value, add);
libs/libxml2-2.9.4/ltmain.sh:6272:          strcpy (new_value + add_len, orig_value);
libs/libxml2-2.9.4/uri.c:1534:        /* Valgrind complained, strcpy(cur, segp + 3); */
libs/libxml2-2.9.4/uri.c:1535:        /* string will overlap, do not use strcpy */
libs/libxml2-2.9.4/HTMLparser.c:6374:		strcpy ((char *)content, (char *)content_line);
libs/libxml2-2.9.4/ChangeLog:9656:	* xpath.c: fix a problem with strcpy() in xmlXPathFormatNumber()
libs/libxml2-2.9.4/ChangeLog:9992:	* uri.c: fixing an use of strcpy() where both strings overlap
libs/xpcom18a4/nsprpub/lib/prstreams/tests/testprstrm/testprstrm.cpp:80:	strcpy(fname1, (char *)arg->mytag);
libs/xpcom18a4/nsprpub/lib/prstreams/tests/testprstrm/testprstrm.cpp:81:	strcpy(fname2, (char *)arg->mytag);
libs/xpcom18a4/nsprpub/lib/libc/src/Makefile.in:55:	strcpy.c  \
libs/xpcom18a4/nsprpub/lib/libc/src/strcpy.c:46:    return strcpy(dest, src);
libs/xpcom18a4/nsprpub/pr/src/linking/prlink.c:510:        strcpy(p, ev);
libs/xpcom18a4/nsprpub/pr/src/linking/prlink.c:545:        strcpy(p, ev);
libs/xpcom18a4/nsprpub/pr/src/linking/prlink.c:1198:            strcpy(stubName, name);
libs/xpcom18a4/nsprpub/pr/src/linking/prlink.c:1824:        strcpy(result, dli.dli_fname);
libs/xpcom18a4/nsprpub/pr/src/linking/prlink.c:1837:                strcpy(result, image_name);
libs/xpcom18a4/nsprpub/pr/src/linking/prlink.c:1876:                strcpy(result, infop->ldinfo_filename);
libs/xpcom18a4/nsprpub/pr/src/linking/prlink.c:1948:                    strcpy(result, info.lmi_name);
libs/xpcom18a4/nsprpub/pr/src/linking/prlink.c:2034:			strcpy(result, p);
libs/xpcom18a4/nsprpub/pr/src/linking/prlink.c:2055:                strcpy(result, desc.filename);
libs/xpcom18a4/nsprpub/pr/src/linking/prlink.c:2072:                strcpy(result, desc.filename);
libs/xpcom18a4/nsprpub/pr/src/linking/prlink.c:2098:        strcpy(result, module_name);
libs/xpcom18a4/nsprpub/pr/src/linking/prlink.c:2119:        strcpy(result, module_name);
libs/xpcom18a4/nsprpub/pr/src/linking/prlink.c:2140:        strcpy(result, module_name);
libs/xpcom18a4/nsprpub/pr/src/io/prlayer.c:641:        strcpy(name, layer_name);
libs/xpcom18a4/nsprpub/pr/src/misc/prerrortable.c:156:    strcpy (buffer, "Unknown code ");
libs/xpcom18a4/nsprpub/pr/src/misc/pratom.c:347:		strcpy(stack->prstk_name, stack_name);
libs/xpcom18a4/nsprpub/pr/src/misc/prinit.c:582:    strcpy(attr->currentDirectory, dir);
libs/xpcom18a4/nsprpub/pr/src/misc/prtrace.c:279:        strcpy( qnp->name, qName );
libs/xpcom18a4/nsprpub/pr/src/misc/prtrace.c:301:    strcpy( rnp->name, rName );
libs/xpcom18a4/nsprpub/pr/src/misc/prtrace.c:302:    strcpy( rnp->desc, description );
libs/xpcom18a4/nsprpub/pr/src/misc/pripc.c:119:    strcpy(result, name);
libs/xpcom18a4/nsprpub/pr/src/misc/prcountr.c:194:        strcpy( qnp->name, qName );
libs/xpcom18a4/nsprpub/pr/src/misc/prcountr.c:216:    strcpy( rnp->name, rName );
libs/xpcom18a4/nsprpub/pr/src/misc/prcountr.c:217:    strcpy( rnp->desc, description );
libs/xpcom18a4/nsprpub/pr/src/md/unix/uxshm.c:109:    strcpy( shm->ipcname, ipcname );
libs/xpcom18a4/nsprpub/pr/src/md/unix/uxshm.c:347:    strcpy( shm->ipcname, ipcname );
libs/xpcom18a4/nsprpub/pr/src/md/unix/nextstep.c:172:	strcpy (copy, s1);
libs/xpcom18a4/nsprpub/pr/src/md/mac/macio.c:1636:	strcpy(*fullPath, "");				// Clear C result
libs/xpcom18a4/nsprpub/pr/src/md/mac/macio.c:1637:	strcpy(tmpPath, "");
libs/xpcom18a4/nsprpub/pr/src/md/mac/macio.c:1665:		strcpy(*fullPath, tmpPath);
libs/xpcom18a4/nsprpub/pr/src/md/windows/w95io.c:513:    strcpy(filename, name);
libs/xpcom18a4/nsprpub/pr/src/md/windows/w95io.c:522:    strcpy(&filename[len], "\\*.*");
libs/xpcom18a4/nsprpub/pr/src/md/windows/w95io.c:660:            strcpy(newfn, fn);
libs/xpcom18a4/nsprpub/pr/src/md/windows/ntio.c:2766:    strcpy(filename, name);
libs/xpcom18a4/nsprpub/pr/src/md/windows/ntio.c:2775:    strcpy(&filename[len], "\\*.*");
libs/xpcom18a4/nsprpub/pr/src/md/windows/ntio.c:2913:            strcpy(newfn, fn);
libs/xpcom18a4/nsprpub/pr/src/md/windows/w16thred.c:173:    strcpy( thread->md.guardBand, "GuardBand" );
libs/xpcom18a4/nsprpub/pr/src/md/windows/w32shm.c:105:    strcpy( shm->ipcname, ipcname );
libs/xpcom18a4/nsprpub/pr/src/md/os2/os2misc.c:345:                strcpy(pszFormatString, "/C %s %s");
libs/xpcom18a4/nsprpub/pr/src/md/os2/os2misc.c:346:                strcpy(pszEXEName, pszComSpec);
libs/xpcom18a4/nsprpub/pr/src/md/os2/os2misc.c:383:            strcpy(pszEXEName, path);
libs/xpcom18a4/nsprpub/pr/src/md/os2/os2misc.c:391:            strcpy(pszArgs, cmdLine);
libs/xpcom18a4/nsprpub/pr/src/md/os2/os2misc.c:394:        strcpy(pszFormatResult, pszArg0);
libs/xpcom18a4/nsprpub/pr/src/md/os2/os2misc.c:433:            strcpy(pszEXEName, "WINOS2.COM");
libs/xpcom18a4/nsprpub/pr/src/md/os2/os2misc.c:435:            strcpy(pszFormatString, "/3 %s %s");
libs/xpcom18a4/nsprpub/pr/src/md/os2/os2misc.c:445:            strcpy(pszEXEName, path);
libs/xpcom18a4/nsprpub/pr/src/md/os2/os2io.c:534:            strcpy(newfn, fn);
libs/xpcom18a4/nsprpub/pr/src/threads/prrwlock.c:149:		strcpy(rwlock->rw_name, lock_name);
libs/xpcom18a4/nsprpub/pr/tests/pipepong.c:81:        strcpy(buf, "pong");
libs/xpcom18a4/nsprpub/pr/tests/libfilename.c:97:    strcpy(name, "libnspr4.dll");
libs/xpcom18a4/nsprpub/pr/tests/prftest.c:67:    strcpy(answer, "ffff ");
libs/xpcom18a4/nsprpub/pr/tests/anonfm.c:318:                strcpy(dirName, opt->value);
libs/xpcom18a4/nsprpub/pr/tests/select2.c:193:        strcpy(buf, "XXXXXXXXXX");
libs/xpcom18a4/nsprpub/pr/tests/select2.c:276:        strcpy(buf, "XXXXXXXXXX");
libs/xpcom18a4/nsprpub/pr/tests/prftest1.c:132:    strcpy(answer, "ffff ");
libs/xpcom18a4/nsprpub/pr/tests/pipeping2.c:143:        strcpy(buf, "ping");
libs/xpcom18a4/nsprpub/pr/tests/pipeself.c:87:        strcpy(buf, "pong");
libs/xpcom18a4/nsprpub/pr/tests/pipeself.c:136:        strcpy(buf, "ping");
libs/xpcom18a4/nsprpub/pr/tests/sockpong.c:100:        strcpy(buf, "pong");
libs/xpcom18a4/nsprpub/pr/tests/nameshm1.c:447:    strcpy( (char*)addr, "FooBar" );
libs/xpcom18a4/nsprpub/pr/tests/nameshm1.c:570:                strcpy( optName, opt->value );
libs/xpcom18a4/nsprpub/pr/tests/bigfile3.c:79:    strcpy(buf, MESSAGE);
libs/xpcom18a4/nsprpub/pr/tests/sprintf.c:223:		strcpy(sfmt, fmt);
libs/xpcom18a4/nsprpub/pr/tests/sprintf.c:346:		strcpy(sfmt, fmt);
libs/xpcom18a4/nsprpub/pr/tests/pipepong2.c:110:        strcpy(buf, "pong");
libs/xpcom18a4/nsprpub/pr/tests/pipeping.c:140:        strcpy(buf, "ping");
libs/xpcom18a4/nsprpub/pr/tests/testfile.c:404:	strcpy(tmpname,pathname);
libs/xpcom18a4/nsprpub/pr/tests/testfile.c:654:	strcpy(pathname, TEST_DIR);
libs/xpcom18a4/nsprpub/pr/tests/testfile.c:679:	strcpy(pathname, TEST_DIR);
libs/xpcom18a4/nsprpub/pr/tests/testfile.c:799:		strcpy(pathname, TEST_DIR);
libs/xpcom18a4/nsprpub/pr/tests/testfile.c:854:	strcpy(pathname, TEST_DIR);
libs/xpcom18a4/nsprpub/pr/tests/testfile.c:867:	strcpy(renamename, TEST_DIR);
libs/xpcom18a4/nsprpub/pr/tests/testfile.c:910:	strcpy(pathname, TEST_DIR);
libs/xpcom18a4/nsprpub/pr/tests/testfile.c:987:		strcpy((testdir + len),"prdir");
libs/xpcom18a4/nsprpub/pr/tests/sockping.c:119:        strcpy(buf, "ping");
libs/xpcom18a4/nsprpub/pr/tests/bigfile2.c:78:    strcpy(buf, MESSAGE);
libs/xpcom18a4/nsprpub/config/nsinstall.c:314:			strcpy(linkname + lplen, name);
libs/xpcom18a4/nsprpub/config/nsinstall.c:518:    return strcpy((char*)xmalloc(strlen(s) + 1), s);
libs/xpcom18a4/nsprpub/config/nsinstall.c:554:	len = strlen(strcpy(outpath, to));
libs/xpcom18a4/nsprpub/config/nsinstall.c:562:	    strcpy(outpath + len, "../");
libs/xpcom18a4/nsprpub/config/nsinstall.c:580:    cp = strcpy(outpath + PATH_MAX - (len + 1), name);
libs/xpcom18a4/nsprpub/config/nsinstall.c:591:	    strcpy(cp, name);
libs/xpcom18a4/nsprpub/config/nsinstall.c:601:    strcpy(outpath, cp);
libs/xpcom18a4/xpcom/obsolete/nsFileSpec.cpp:461:            strcpy(startDir, pathCopy);
libs/xpcom18a4/xpcom/obsolete/nsSpecialSystemDirectory.cpp:430:        strcpy(buf, info.name);
libs/xpcom18a4/xpcom/obsolete/nsSpecialSystemDirectory.cpp:533:             if( c) strcpy( buffer, c);
libs/xpcom18a4/xpcom/obsolete/nsSpecialSystemDirectory.cpp:537:                if( c) strcpy( buffer, c);
libs/xpcom18a4/xpcom/obsolete/component/nsRegistry.cpp:1770:    strcpy(mName, name);
libs/xpcom18a4/xpcom/obsolete/nsFileSpecMac.cpp:193:		strcpy(newPath, inPath);
libs/xpcom18a4/xpcom/components/nsComponentManager.cpp:2464:    strcpy(registryName + len, aDllName);
libs/xpcom18a4/xpcom/io/nsLocalFileOS2.cpp:602:          strcpy(achProgram, "CMD.EXE  /C ");
libs/xpcom18a4/xpcom/io/nsDirectoryService.cpp:262:                    strcpy(buf2, psz);
libs/xpcom18a4/xpcom/io/nsDirectoryService.cpp:308:                strcpy(szPath, buf2);
libs/xpcom18a4/xpcom/io/nsDirectoryService.cpp:395:        strcpy(buf, info.name);
libs/xpcom18a4/xpcom/io/SpecialSystemDirectory.cpp:292:            if( c) strcpy( buffer, c);
libs/xpcom18a4/xpcom/io/SpecialSystemDirectory.cpp:296:                if( c) strcpy( buffer, c);
libs/xpcom18a4/xpcom/base/nsDebugImpl.cpp:232:         NULL != strcpy(pName+1, "windbgdlg.exe") &&
libs/xpcom18a4/xpcom/glue/standalone/nsGREDirServiceProvider.cpp:193:                    strcpy(buf2, psz);
libs/xpcom18a4/xpcom/glue/standalone/nsGREDirServiceProvider.cpp:239:                strcpy(szPath, buf2);
libs/xpcom18a4/xpcom/glue/standalone/nsGREDirServiceProvider.cpp:246:        strcpy(buffer, szPath);
libs/xpcom18a4/xpcom/glue/standalone/nsGREDirServiceProvider.cpp:277:            strcpy(buffer, moz5);
libs/xpcom18a4/xpcom/glue/standalone/nsGREDirServiceProvider.cpp:317:      strcpy(buffer, moz5);
libs/xpcom18a4/xpcom/glue/standalone/nsGREDirServiceProvider.cpp:328:        strcpy(buffer, info.name);
libs/xpcom18a4/xpcom/glue/standalone/nsGREDirServiceProvider.cpp:364:    strcpy(buffer + pathlen, XPCOM_FILE_PATH_SEPARATOR XPCOM_DLL);
libs/xpcom18a4/xpcom/glue/standalone/nsGREDirServiceProvider.cpp:372:      strcpy(sGRELocation, buffer);
libs/xpcom18a4/xpcom/glue/standalone/nsGREDirServiceProvider.cpp:382:      strcpy(sGRELocation, env);
libs/xpcom18a4/xpcom/glue/standalone/nsGREDirServiceProvider.cpp:385:      strcpy(sGRELocation, env);
libs/xpcom18a4/xpcom/glue/standalone/nsGREDirServiceProvider.cpp:447:  strcpy(szKey, GRE_WIN_REG_LOC GRE_BUILD_ID);
libs/xpcom18a4/xpcom/glue/standalone/nsGREDirServiceProvider.cpp:537:      strcpy(pathBuffer, buffer + 9);
libs/xpcom18a4/xpcom/glue/nsGenericFactory.cpp:120:        strcpy(*aContractID, mInfo->mContractID);
libs/xpcom18a4/xpcom/glue/nsGenericFactory.cpp:134:        strcpy(*aClassDescription, mInfo->mDescription);
libs/xpcom18a4/xpcom/typelib/xpidl/macplugin/mac_xpt_linker.cpp:445:	strcpy(targ.symfile.path, targ.outfile.path);
libs/xpcom18a4/xpcom/typelib/xpidl/xpidl_typelib.c:96:            strcpy(holder->full_name, holder->name_space);
libs/xpcom18a4/ipc/ipcd/extensions/transmngr/test/tmModuleTest.cpp:135:  strcpy(profileName, "defaultProfile");
libs/xpcom18a4/ipc/ipcd/extensions/transmngr/test/tmModuleTest.cpp:136:  strcpy(queueName, "defaultQueue");
libs/xpcom18a4/ipc/ipcd/extensions/transmngr/test/tmModuleTest.cpp:137:  strcpy(data, "test data");
libs/xpcom18a4/ipc/ipcd/extensions/transmngr/test/tmModuleTest.cpp:171:          strcpy(profileName, opt->value);
libs/xpcom18a4/ipc/ipcd/extensions/transmngr/test/tmModuleTest.cpp:175:          strcpy(queueName, opt->value);
libs/xpcom18a4/Makefile.kmk:595:	nsprpub/lib/libc/src/strcpy.c \
libs/xpcom18a4/python/src/PyGBase.cpp:637:	strcpy(buf, "get_");
libs/xpcom18a4/python/src/PyGBase.cpp:683:	strcpy(buf, "set_");
libs/xpcom18a4/python/src/ErrorUtils.cpp:449:	strcpy(result, tempResult);
libs/xpcom18a4/python/src/ErrorUtils.cpp:457:			strcpy(result, errMsg);
libs/xpcom18a4/python/src/PyGWeakReference.cpp:60:	strcpy(dest, "(WR)");
libs/xpcom18a4/python/src/loader/pyloader.cpp:417:	strcpy(result, tempResult);
libs/xpcom18a4/python/src/loader/pyloader.cpp:425:			strcpy(result, errMsg);
