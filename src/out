recompiler/qemu-log.h:14:/* Log settings checking macros: */
recompiler/qemu-log.h:39:# define qemu_log(...) Log((__VA_ARGS__))
recompiler/qemu-log.h:66:            Log((__VA_ARGS__)); \
recompiler/cpu-all.h:1060:            Log(("%s: %RGp\n", __FUNCTION__, (RTGCPHYS)addr)); \
recompiler/cpu-all.h:1067:            Log(("%s: %RGp\n", __FUNCTION__, (RTGCPHYS)addr)); \
recompiler/VBoxRecompiler.c:1110:         * Log the current registers state and instruction.
recompiler/VBoxRecompiler.c:1903:    Log(("remR3FlushTLB: CR0=%08RX64 CR3=%08RX64 CR4=%08RX64 %s\n", (uint64_t)env->cr[0], (uint64_t)env->cr[3], (uint64_t)env->cr[4], fGlobal ? " global" : ""));
recompiler/VBoxRecompiler.c:1978:            Log(("PGMChangeMode(, %RX64, %RX64, %RX64) -> %Rrc -> remR3RaiseRC\n", env->cr[0], env->cr[4], efer, rc));
recompiler/VBoxRecompiler.c:2047:    Log(("remR3NotifyTrap: uTrap=%x error=%x next_eip=%RGv eip=%RGv cr2=%RGv\n", uTrap, uErrorCode, pvNextEIP, (RTGCPTR)env->eip, (RTGCPTR)env->cr[2]));
recompiler/VBoxRecompiler.c:2063:            Log(("remR3NotifyTrap: uTrap=%#x set as pending\n", uTrap));
recompiler/VBoxRecompiler.c:2282:            Log(("Clearing VMCPU_FF_INHIBIT_INTERRUPTS at %RGv - successor %RGv (REM#1)\n", (RTGCPTR)pCtx->rip, InhibitPC));
recompiler/VBoxRecompiler.c:2725:        Log(("REM: TR changed! %#x{%#llx,%#x,%#x} -> %#x{%llx,%#x,%#x}\n",
recompiler/VBoxRecompiler.c:2762:        Log(("Settings VMCPU_FF_INHIBIT_INTERRUPTS at %RGv (REM)\n", (RTGCPTR)pCtx->rip));
recompiler/VBoxRecompiler.c:2768:        Log(("Clearing VMCPU_FF_INHIBIT_INTERRUPTS at %RGv - successor %RGv (REM#2)\n", (RTGCPTR)pCtx->rip, EMGetInhibitInterruptsPC(pVCpu)));
recompiler/VBoxRecompiler.c:2775:        Log(("Settings VMCPU_FF_BLOCK_NMIS at %RGv (REM)\n", (RTGCPTR)pCtx->rip));
recompiler/VBoxRecompiler.c:2780:        Log(("Clearing VMCPU_FF_BLOCK_NMIS at %RGv (REM)\n", (RTGCPTR)pCtx->rip));
recompiler/VBoxRecompiler.c:2795:        Log(("REMR3StateBack: Pending trap %x %d\n", pVM->rem.s.Env.exception_index, pVM->rem.s.Env.exception_is_int));
recompiler/VBoxRecompiler.c:2976:        Log(("REM: TR changed! %#x{%#llx,%#x,%#x} -> %#x{%llx,%#x,%#x}\n",
recompiler/VBoxRecompiler.c:3236:    Log(("REMR3NotifyPhysRamRegister: GCPhys=%RGp cb=%RGp fFlags=%#x\n", GCPhys, cb, fFlags));
recompiler/VBoxRecompiler.c:3285:    Log(("REMR3NotifyPhysRomRegister: GCPhys=%RGp cb=%d fShadow=%RTbool\n", GCPhys, cb, fShadow));
recompiler/VBoxRecompiler.c:3317:    Log(("REMR3NotifyPhysRamDeregister: GCPhys=%RGp cb=%d\n", GCPhys, cb));
recompiler/VBoxRecompiler.c:3355:    Log(("REMR3NotifyHandlerPhysicalRegister: enmKind=%d GCPhys=%RGp cb=%RGp fHasHCHandler=%d\n",
recompiler/VBoxRecompiler.c:3408:    Log(("REMR3NotifyHandlerPhysicalDeregister: enmKind=%d GCPhys=%RGp cb=%RGp fHasHCHandler=%RTbool fRestoreAsRAM=%RTbool RAM=%08x\n",
recompiler/VBoxRecompiler.c:3468:    Log(("REMR3NotifyHandlerPhysicalModify: enmKind=%d GCPhysOld=%RGp GCPhysNew=%RGp cb=%RGp fHasHCHandler=%RTbool fRestoreAsRAM=%RTbool\n",
recompiler/VBoxRecompiler.c:4088:     * Log registers if requested.
recompiler/VBoxRecompiler.c:4465:    Log(("remR3RaiseRC: rc=%Rrc\n", rc));
recompiler/VBoxRecompiler.c:4605:        Log(("cpu_outb: addr=%#06x val=%#x -> %Rrc\n", addr, val, rc));
recompiler/VBoxRecompiler.c:4620:        Log(("cpu_outw: addr=%#06x val=%#x -> %Rrc\n", addr, val, rc));
recompiler/VBoxRecompiler.c:4636:        Log(("cpu_outl: addr=%#06x val=%#x -> %Rrc\n", addr, val, rc));
recompiler/VBoxRecompiler.c:4655:        Log(("cpu_inb: addr=%#06x -> %#x rc=%Rrc\n", addr, u32, rc));
recompiler/VBoxRecompiler.c:4674:        Log(("cpu_inw: addr=%#06x -> %#x rc=%Rrc\n", addr, u32, rc));
recompiler/VBoxRecompiler.c:4693:        Log(("cpu_inl: addr=%#06x -> %#x rc=%Rrc\n", addr, u32, rc));
recompiler/VBoxRecompiler.c:5139:                Log(("REM: linux syscall %3d: %s (eip=%08x ebx=%08x ecx=%08x edx=%08x esi=%08x edi=%08x ebp=%08x)\n",
recompiler/VBoxRecompiler.c:5143:                Log(("eip=%08x: linux syscall %d (#%x) unknown\n", CPUMGetGuestEIP(pVCpu), uEAX, uEAX));
recompiler/target-i386/op_helper.c:340:        Log(("RPL 1 -> sel %04X -> %04X (tss_load_seg)\n", selector, selector & 0xfffc));
recompiler/target-i386/op_helper.c:2525:    Log(("helper_lldt_T0: old ldtr=%RTsel {.base=%RGv, .limit=%RGv} new=%RTsel\n",
recompiler/target-i386/op_helper.c:2573:    Log(("helper_lldt_T0: new ldtr=%RTsel {.base=%RGv, .limit=%RGv}\n",
recompiler/target-i386/op_helper.c:2591:    Log(("helper_ltr: pc=%RGv old tr=%RTsel {.base=%RGv, .limit=%RGv, .flags=%RX32} new=%RTsel\n",
recompiler/target-i386/op_helper.c:2647:    Log(("helper_ltr: new tr=%RTsel {.base=%RGv, .limit=%RGv, .flags=%RX32} new=%RTsel\n",
recompiler/target-i386/op_helper.c:2673:        Log(("RPL 1 -> sel %04X -> %04X (helper_load_seg)\n", selector, selector & 0xfffc));
recompiler/target-i386/op_helper.c:3226:            Log(("iret: new CS     %04X (old=%x)\n", new_cs, env->segs[R_CS].selector));
recompiler/target-i386/op_helper.c:3227:            Log(("iret: new EIP    %08X\n", (uint32_t)new_eip));
recompiler/target-i386/op_helper.c:3228:            Log(("iret: new EFLAGS %08X\n", new_eflags));
recompiler/target-i386/op_helper.c:3229:            Log(("iret: EAX=%08x\n", (uint32_t)EAX));
recompiler/target-i386/op_helper.c:3240:                Log(("RPL 1 -> new_cs %04X -> %04X\n", new_cs, new_cs & 0xfffc));
recompiler/target-i386/op_helper.c:3246:                Log(("Genuine switch to ring-1 (iret)\n"));
recompiler/target-i386/op_helper.c:3251:            Log(("RPL 2 -> new_cs %04X -> %04X\n", new_cs, (new_cs & 0xfffc) | 1));
recompiler/target-i386/op_helper.c:3268:        Log(("new_cs & 0xfffc) == 0\n"));
recompiler/target-i386/op_helper.c:3275:        Log(("load_segment failed\n"));
recompiler/target-i386/op_helper.c:3283:        Log(("e2 mask %08x\n", e2));
recompiler/target-i386/op_helper.c:3292:        Log(("rpl < cpl (%d vs %d)\n", rpl, cpl));
recompiler/target-i386/op_helper.c:3302:            Log(("dpl > rpl (%d vs %d)\n", dpl, rpl));
recompiler/target-i386/op_helper.c:3310:            Log(("dpl != rpl (%d vs %d) e1=%x e2=%x\n", dpl, rpl, e1, e2));
recompiler/target-i386/op_helper.c:3318:        Log(("DESC_P_MASK e2=%08x\n", e2));
recompiler/target-i386/op_helper.c:3382:                Log(("NULL ss, rpl=%d\n", rpl));
recompiler/target-i386/op_helper.c:3390:                Log(("new_ss=%x != rpl=%d\n", new_ss, rpl));
recompiler/target-i386/op_helper.c:3397:                Log(("new_ss=%x load error\n", new_ss));
recompiler/target-i386/op_helper.c:3406:                Log(("new_ss=%x ss_e2=%#x bad type\n", new_ss, ss_e2));
recompiler/target-i386/op_helper.c:3414:                Log(("SS.dpl=%u  !=  rpl=%u\n", dpl, rpl));
recompiler/target-i386/op_helper.c:3421:                Log(("new_ss=%#x #NP\n", new_ss));
recompiler/target-i386/op_helper.c:3507:    Log(("iret (shift=%d new_eip=%#x)\n", shift, next_eip));
recompiler/target-i386/op_helper.c:3518:            Log(("eflags.NT=1 on iret in long mode\n"));
recompiler/target-i386/op_helper.c:5969:            Log(("sync_seg: out of sync seg_reg=%d selector=%#x\n", seg_reg, selector));
recompiler/target-i386/op_helper.c:6082:        Log(("REM: Emulating next instruction due to instruction fusing (HF_INHIBIT_IRQ_MASK) at %RGv\n", env->eip));
recompiler/target-i386/translate.c:4410:    Log(("illegal lock sequence %RGv (b=%#x)\n", pc_start, b));
recompiler/cpu-exec.c:344:                    Log(("do_interrupt: vec=%#x int=%d pc=%04x:%RGv\n", env->exception_index, env->exception_is_int,
recompiler/cpu-exec.c:537:                            Log(("do_interrupt %d\n", intno));
recompiler/Sun/testmath.c:758:    Log(("/*code*/ \n"));
recompiler/Sun/testmath.c:760:        Log(("/*code*/ *(unsigned long long *)&env_org.fpregs[%d] = %#018llxULL; ((unsigned short *)&env_org.fpregs[%d])[4] = %#06x; env_org.fptags[%d]=%d;\n",
recompiler/Sun/testmath.c:762:    Log(("/*code*/ env_org.fpstt=%#x;\n", my_fpstt));
recompiler/Sun/testmath.c:763:    Log(("/*code*/ env_org.fpus=%#x;\n", my_fpus));
recompiler/Sun/testmath.c:764:    Log(("/*code*/ env_org.fpuc=%#x;\n", my_fpuc));
recompiler/Sun/testmath.c:769:        Log(("/*code*/ *(unsigned long long *)&env_res.fpregs[%d] = %#018llxULL; ((unsigned short *)&env_res.fpregs[%d])[4] = %#06x; env_res.fptags[%d]=%d;\n",
recompiler/Sun/testmath.c:772:    Log(("/*code*/ env_res.fpstt=%#x;\n", env->fpstt));
recompiler/Sun/testmath.c:773:    Log(("/*code*/ env_res.fpus=%#x;\n", env->fpus));
recompiler/Sun/testmath.c:774:    Log(("/*code*/ env_res.fpuc=%#x;\n", env->fpuc));
recompiler/Sun/testmath.c:776:    Log(("/*code*/ my_env = env_org;\n"));
recompiler/Sun/testmath.c:777:    Log(("/*code*/ %s();\n", psz));
recompiler/Sun/testmath.c:778:    Log(("/*code*/ check_env();\n"));
VBox/ImageMounter/VBoxFUSE/VBoxFUSE.cpp:542:        Log(("VDCreate failed, rc=%Rrc\n", rc));
VBox/ImageMounter/VBoxFUSE/VBoxFUSE.cpp:986:        Log(("vboxfuseOp_symlink: \"%s\" => \"%s\" SUCCESS!\n", pszPath, pszDst));
VBox/ValidationKit/utils/TestExecServ/vboxtxs-readme.txt:90:1. Log on as Administrator.
VBox/ValidationKit/utils/TestExecServ/TestExecServiceTcp.cpp:157:    Log(("txsTcpConnectServerThread: RTTcpServerListen2 -> %Rrc\n", rc));
VBox/ValidationKit/utils/TestExecServ/TestExecServiceTcp.cpp:210:        Log(("txsTcpRecvPkt: RTTcpClientConnect -> %Rrc\n", rc));
VBox/ValidationKit/utils/TestExecServ/TestExecServiceTcp.cpp:275:        Log(("txsTcpRecvPkt: RTTcpServerListen2 -> %Rrc\n", rc));
VBox/ValidationKit/utils/TestExecServ/TestExecServiceTcp.cpp:284:            Log(("txsTcpRecvPkt: RTTcpClientConnect -> %Rrc\n", rc));
VBox/ValidationKit/utils/TestExecServ/TestExecServiceTcp.cpp:353:    Log(("txsTcpNotifyReboot: RTTcpServerDestroy(%p)\n", g_pTcpServer));
VBox/ValidationKit/utils/TestExecServ/TestExecServiceTcp.cpp:368:    Log(("txsTcpNotifyBye: txsTcpDisconnectClient %RTsock\n", g_hTcpClient));
VBox/ValidationKit/utils/TestExecServ/TestExecServiceTcp.cpp:404:    Log(("txsTcpBabble: txsTcpDisconnectClient(%RTsock) (RTTcpWrite rc=%Rrc)\n", g_hTcpClient, rc));
VBox/ValidationKit/utils/TestExecServ/TestExecServiceTcp.cpp:431:        Log(("RTTcpWrite -> %Rrc -> txsTcpDisconnectClient(%RTsock)\n", rc, g_hTcpClient));
VBox/ValidationKit/utils/TestExecServ/TestExecServiceTcp.cpp:498:            Log(("txsTcpRecvPkt: RTTcpRead -> %Rrc / cbRead=0 -> VERR_NET_NOT_CONNECTED (#1)\n", rc));
VBox/ValidationKit/utils/TestExecServ/TestExecServiceTcp.cpp:538:                        Log(("txsTcpRecvPkt: RTTcpRead -> %Rrc / cbRead=0 -> VERR_NET_NOT_CONNECTED (#2)\n", rc));
VBox/ValidationKit/utils/TestExecServ/TestExecServiceTcp.cpp:568:            Log(("txsTcpRecvPkt: RTTcpRead -> %Rrc -> txsTcpDisconnectClient(%RTsock)\n", rc, g_hTcpClient));
VBox/ValidationKit/utils/TestExecServ/TestExecServiceTcp.cpp:618:        Log(("txsTcpTerm: Destroying server...\n"));
VBox/ValidationKit/utils/TestExecServ/TestExecServiceTcp.cpp:630:            Log(("txsTcpTerm: Disconnecting client...\n"));
VBox/ValidationKit/utils/TestExecServ/TestExecServiceTcp.cpp:657:    Log(("txsTcpTerm: done\n"));
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:215:    Log(("txsSendPkt: cb=%#x opcode=%.8s\n", pPkt->cb, pPkt->achOpcode));
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:221:        Log(("txsSendPkt: rc=%Rrc\n", rc));
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:283:                        Log(("txsRecvPkt: cb=%#x opcode=%.8s\n", pPktHdr->cb, pPktHdr->achOpcode));
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:292:                    Log(("txsRecvPkt: cb=%#x opcode=%.8s crc32=%#x actual=%#x\n",
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:319:            Log(("txsRecvPkt: rc=%Rrc\n", rc));
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:1586:    Log(("txsDoExecHlpHandleOutputEvent: %s fPollEvt=%#x\n", pszOpcode, fPollEvt));
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:1603:        Log(("Crc32=%#x ", *puCrc32));
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:1605:        Log(("cbRead=%#x Crc32=%#x \n", cbRead, *puCrc32));
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:1745:    Log(("txsDoExecHlpHandleTransportEvent\n"));
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:1758:        Log(("Bad transport event\n"));
VBox/ValidationKit/utils/TestExecServ/TestExecService.cpp:1766:    Log(("Bad transport event\n"));
VBox/ValidationKit/utils/usb/UsbTestService.cpp:214:    Log(("utsSendPkt: cb=%#x opcode=%.8s\n", pPkt->cb, pPkt->achOpcode));
VBox/ValidationKit/utils/usb/UsbTestService.cpp:220:        Log(("utsSendPkt: rc=%Rrc\n", rc));
VBox/ValidationKit/utils/usb/UsbTestService.cpp:284:                        Log(("utsRecvPkt: cb=%#x opcode=%.8s\n", pPktHdr->cb, pPktHdr->achOpcode));
VBox/ValidationKit/utils/usb/UsbTestService.cpp:293:                    Log(("utsRecvPkt: cb=%#x opcode=%.8s crc32=%#x actual=%#x\n",
VBox/ValidationKit/utils/usb/UsbTestService.cpp:320:            Log(("utsRecvPkt: rc=%Rrc\n", rc));
VBox/ValidationKit/utils/usb/UsbTestServicePlatform-linux.cpp:334:                rc = VERR_UNRESOLVED_ERROR; /** @todo Log and give finer grained status code. */
VBox/ValidationKit/utils/usb/UsbTestServicePlatform-linux.cpp:362:                rc = VERR_UNRESOLVED_ERROR; /** @todo Log and give finer grained status code. */
VBox/ValidationKit/utils/usb/UsbTestServiceTcp.cpp:125:    Log(("utsTcpWaitForConnect: RTTcpServerListen2 -> %Rrc\n", rc));
VBox/ValidationKit/utils/usb/UsbTestServiceTcp.cpp:153:    Log(("utsTcpNotifyReboot: RTTcpServerDestroy(%p)\n", g_pTcpServer));
VBox/ValidationKit/utils/usb/UsbTestServiceTcp.cpp:168:    Log(("utsTcpNotifyBye: utsTcpDisconnectClient %RTsock\n", pClient->hTcpClient));
VBox/ValidationKit/utils/usb/UsbTestServiceTcp.cpp:199:    Log(("utsTcpBabble: utsTcpDisconnectClient(%RTsock) (RTTcpWrite rc=%Rrc)\n", pClient->hTcpClient, rc));
VBox/ValidationKit/utils/usb/UsbTestServiceTcp.cpp:219:        Log(("RTTcpWrite -> %Rrc -> utsTcpDisconnectClient(%RTsock)\n", rc, pClient->hTcpClient));
VBox/ValidationKit/utils/usb/UsbTestServiceTcp.cpp:274:            Log(("utsTcpRecvPkt: RTTcpRead -> %Rrc / cbRead=0 -> VERR_NET_NOT_CONNECTED (#1)\n", rc));
VBox/ValidationKit/utils/usb/UsbTestServiceTcp.cpp:314:                        Log(("utsTcpRecvPkt: RTTcpRead -> %Rrc / cbRead=0 -> VERR_NET_NOT_CONNECTED (#2)\n", rc));
VBox/ValidationKit/utils/usb/UsbTestServiceTcp.cpp:344:            Log(("utsTcpRecvPkt: RTTcpRead -> %Rrc -> utsTcpDisconnectClient(%RTsock)\n", rc, pClient->hTcpClient));
VBox/ValidationKit/utils/usb/UsbTestServiceTcp.cpp:386:        Log(("utsTcpTerm: Destroying server...\n"));
VBox/ValidationKit/utils/usb/UsbTestServiceTcp.cpp:393:    Log(("utsTcpTerm: done\n"));
VBox/ValidationKit/utils/usb/UsbTestServiceGadgetHostUsbIp.cpp:112:                rc = VERR_UNRESOLVED_ERROR; /** @todo Log and give finer grained status code. */
VBox/ValidationKit/testboxscript/testboxtasks.py:279:        # Log it.
VBox/ValidationKit/testboxscript/testboxtasks.py:391:            # Log it.
VBox/ValidationKit/testboxscript/testboxcommons.py:77:    Log an exception, optionally with a preceeding message and more than one
VBox/ValidationKit/testmanager/webui/wuiadmin.py:168:        # System Log actions.
VBox/ValidationKit/testmanager/webui/wuiadmin.py:439:    # System Log actions.
VBox/ValidationKit/testmanager/webui/wuiadminsystemlog.py:5:Test Manager WUI - Admin - System Log.
VBox/ValidationKit/testmanager/webui/wuiadminsystemlog.py:41:    WUI System Log Content Generator.
VBox/ValidationKit/testmanager/webui/wuiadminsystemlog.py:45:        WuiListContentBase.__init__(self, aoEntries, iPage, cItemsPerPage, tsEffective, 'System Log',
VBox/ValidationKit/testmanager/webui/wuimain.py:127:    ## @name Log Viewer parameters.
VBox/ValidationKit/testmanager/webui/wuimain.py:1170:        Log viewer action.
VBox/ValidationKit/testmanager/webui/wuitestresult.py:580:                aoBuildRows += [ ( 'Log:',       WuiBuildLogLink(oBuildEx.sLogUrl, fBracketed = False) ), ];
VBox/ValidationKit/testmanager/webui/wuitestresult.py:607:                aoValidationKitRows += [ ( 'Log:', WuiBuildLogLink(oValidationKitEx.sLogUrl, fBracketed = False) ), ];
VBox/ValidationKit/testmanager/webui/wuitestresult.py:721:               % ( WuiTmLink('Log File', '',
VBox/ValidationKit/testmanager/webui/wuitestresult.py:725:                   WuiTmLink('Raw Log', '',
VBox/ValidationKit/testmanager/webui/wuitestresult.py:730:                   WuiTmLink('Download Log', '',
VBox/ValidationKit/testmanager/webui/wuicontentbase.py:601:                    '  <h3>Change Log </h3>\n';
VBox/ValidationKit/testmanager/webui/wuilogviewer.py:5:Test Manager WUI - Log viewer
VBox/ValidationKit/testmanager/webui/wuilogviewer.py:39:    """Log viewer."""
VBox/ValidationKit/testmanager/webui/wuilogviewer.py:98:        oDownloadLink = WuiTmLink('Download Log', '',
VBox/ValidationKit/testmanager/webui/wuibase.py:235:            # Log in as the logout user in the same realm, the browser forgets
VBox/ValidationKit/testmanager/webui/wuiadminbuild.py:67:        oForm.addWideText   (BuildData.ksParam_sLogUrl,             oData.sLogUrl,            'Log URL')
VBox/ValidationKit/testmanager/webui/wuiadminbuild.py:98:            aoActions.append(WuiBuildLogLink(oEntry.sLogUrl, 'Build Log'));
VBox/ValidationKit/testmanager/cgi/logout2.py:6:VirtualBox Validation Kit - CGI - Log out page for Safari.
VBox/ValidationKit/testmanager/cgi/logout2.py:61:    oSrvGlue.write('<p><a href="%sadmin.py">Log in</a> under another user name.</p>' %
VBox/ValidationKit/testmanager/cgi/logout.py:6:VirtualBox Validation Kit - CGI - Log out page.
VBox/ValidationKit/testmanager/cgi/logout.py:57:        oSrvGlue.write('<p><a href="%sadmin.py">Log in</a> under another user name.</p>' %
VBox/ValidationKit/testmanager/batch/filearchiver.py:53:    Log+files comp
VBox/ValidationKit/testmanager/batch/virtual_test_sheriff.py:523:        # Log it and create a dReasonForReasultId we can use below.
VBox/ValidationKit/testmanager/db/TestManagerDatabaseInit.pgsql:51:-- Log table for a few important events.
VBox/ValidationKit/testmanager/db/tmdb-r17-testresultvalues-4.pgsql:3:-- VBox Test Manager Database - Log viewer related optimizations for TestResultValues.
VBox/ValidationKit/testmanager/htdocs/css/common.css:1012: * Log viewer.
VBox/ValidationKit/testmanager/core/testboxcontroller.py:625:        # Log NACKs.
VBox/ValidationKit/testmanager/core/testset.py:240:        Log parsing utility function for finding the offset for the given timestamp.
VBox/ValidationKit/testmanager/core/testresults.py:2829:        # Log the error.
VBox/ValidationKit/testmanager/core/db.py:606:        sDebug = '<h3>SQL Debug Log (total time %s ns):</h3>\n' \
VBox/ValidationKit/testmanager/core/db.py:653:        sHdr = 'SQL Debug Log (total time %s ns)' % (utils.formatNumber(cNsElapsed),);
VBox/ValidationKit/testdriver/vboxinstaller.py:908:        # Log driver service states (should ls \Driver\VBox* and \Device\VBox*).
VBox/ValidationKit/testdriver/reporter.py:1047:    Log an exception, optionally with a preceeding message and more than one
VBox/ValidationKit/testdriver/reporter.py:1275:    Log an exception, optionally with a preceeding message and more than one
VBox/ValidationKit/testdriver/reporter.py:1281:    """Log level 2: Writes the specfied text to the log."""
VBox/ValidationKit/testdriver/reporter.py:1293:    Log level 2: Log an exception, optionally with a preceeding message and
VBox/ValidationKit/testdriver/reporter.py:1343:    Log an error caused by an exception.  If sText is given, it will preceed
VBox/ValidationKit/testdriver/reporter.py:1394:    Log a fatal error caused by an exception.  If sText is given, it will
VBox/ValidationKit/docs/testbox-maintenance.sh:203:# Log the action in both logs.
VBox/Disassembler/DisasmCore.cpp:304:        Log(("disReadMore failed with rc=%Rrc!!\n", rc));
VBox/Disassembler/DisasmCore.cpp:322:        Log(("disReadByte: too long instruction...\n"));
VBox/Disassembler/DisasmCore.cpp:363:        Log(("disReadWord: too long instruction...\n"));
VBox/Disassembler/DisasmCore.cpp:419:        Log(("disReadDWord: too long instruction...\n"));
VBox/Disassembler/DisasmCore.cpp:482:        Log(("disReadQWord: too long instruction...\n"));
VBox/Disassembler/DisasmCore.cpp:899:        Log(("disasmModRMReg %x:%x failed!!\n", type, subtype));
VBox/Disassembler/DisasmCore.cpp:928:        Log(("disasmModRMSReg %d failed!!\n", idx));
VBox/Disassembler/DisasmCore.cpp:2242:        Log(("ParseShiftGrp2: bOpCode=%#x\n", pDis->bOpCode));
VBox/Disassembler/DisasmCore.cpp:2930:        Log(("Initial read failed with rc=%Rrc!!\n", rc));
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:308:    Log(("RDPUSB build_device_list"));
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:335:	Log(("RDPUSB send:\n"));
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:401:			Log(("RDPUSB: rdpusb_reap_urbs: cbData = %d, enmStatus = %d\n", pUrb->cbData, pUrb->enmStatus));
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:442:			Log(("Going to free %p\n", pUrb));
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:446:			Log(("freed %p\n", pUrb));
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:468:	Log(("RDPUSB recv:\n"));
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:481:	Log(("RDPUSB recv: len = %d, code = %d\n", len, code));
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:716:			Log(("RDPUSB: queued URB handle = %d\n", handle));
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:816:				Log(("Cancelled URB %p\n", pUrb));
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:866://	Log(("RDPUSB: rdpusb_add_fds: begin *n = %d\n", *n));
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:874://		        Log(("RDPUSB: rdpusb_add_fds: adding %d\n", proxy->priv.File));
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:884://	Log(("RDPUSB: rdpusb_add_fds: end *n = %d\n", *n));
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:910://	Log(("RDPUSB: rdpusb_check_fds: begin\n"));
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:915://	Log(("RDPUSB: rdpusb_check_fds: end\n"));
VBox/RDP/client-1.8.3/vrdp/rdpusb.c:945:		Log(("RDPUSB: closing proxy %p\n", proxy));
VBox/Additions/linux/lightdm-greeter/vbox-greeter.cpp:874:                   "Log opened %s\n",
VBox/Additions/linux/lightdm-greeter/vbox-greeter.cpp:908:            pfnLog(pLoggerRelease, "Log rotated - Log started %s\n", szTmp);
VBox/Additions/linux/lightdm-greeter/vbox-greeter.cpp:912:            pfnLog(pLoggerRelease, "Log continuation - Log started %s\n", szTmp);
VBox/Additions/linux/lightdm-greeter/vbox-greeter.cpp:916:            pfnLog(pLoggerRelease, "End of log file - Log started %s\n", szTmp);
VBox/Additions/linux/lightdm-greeter/vbox-greeter.cpp:1272:                                         100, 40, "Log In");
VBox/Additions/haiku/SharedFolders/vboxsf.c:77:                    Log((FS_NAME ": init_module succeeded.\n");
VBox/Additions/haiku/VBoxMouse/VBoxMouse.cpp:146:    Log(("VBoxMouse::%s()\n", __FUNCTION__));
VBox/Additions/haiku/VBoxMouse/VBoxMouse.cpp:215:    Log(("VBoxMouse::%s()\n", __FUNCTION__));
VBox/Additions/haiku/VBoxMouse/VBoxMouse.cpp:256:    Log(("VBoxMouse::%s()\n", __FUNCTION__));
VBox/Additions/haiku/VBoxTray/VBoxDisplay.cpp:66:# undef Log
VBox/Additions/haiku/VBoxTray/VBoxDisplay.cpp:67:# define Log(x) printf x
VBox/Additions/haiku/VBoxTray/VBoxClipboard.cpp:71:# undef Log
VBox/Additions/haiku/VBoxTray/VBoxClipboard.cpp:72:# define Log(x) printf x
VBox/Additions/haiku/VBoxTray/VBoxClipboard.cpp:414:                    Log(("VBoxClipboardService::%s: Unsupported message from host! Message = %u\n", __FUNCTION__, u32Msg));
VBox/Additions/x11/x11include/xorg-server-1.13.0/xf86Privstr.h:43:} Log;
VBox/Additions/x11/x11include/xorg-server-1.13.0/xf86Privstr.h:94:    Log log;
VBox/Additions/x11/x11include/xorg-server-1.4.2/xf86Privstr.h:55:} Log;
VBox/Additions/x11/x11include/xorg-server-1.4.2/xf86Privstr.h:116:    Log			log;
VBox/Additions/x11/x11include/xorg-server-1.8.0/xf86Privstr.h:43:} Log;
VBox/Additions/x11/x11include/xorg-server-1.8.0/xf86Privstr.h:98:    Log			log;
VBox/Additions/x11/x11include/xorg-server-1.10.0/xf86Privstr.h:43:} Log;
VBox/Additions/x11/x11include/xorg-server-1.10.0/xf86Privstr.h:98:    Log			log;
VBox/Additions/x11/x11include/xorg-server-1.9.0/xf86Privstr.h:43:} Log;
VBox/Additions/x11/x11include/xorg-server-1.9.0/xf86Privstr.h:98:    Log			log;
VBox/Additions/x11/x11include/XFree86-4.3/Xserver/xf86Privstr.h:33:} Log;
VBox/Additions/x11/x11include/XFree86-4.3/Xserver/xf86Privstr.h:140:    Log			log;
VBox/Additions/x11/x11include/xproto-7.0.18/X11/XF86keysym.h:136:#define XF86XK_LogOff		0x1008FF61   /* Log off system              */
VBox/Additions/x11/x11include/xorg-server-1.0.1/uda1380.h:25: * $Log: uda1380.h,v $
VBox/Additions/x11/x11include/xorg-server-1.0.1/xf86Privstr.h:56:} Log;
VBox/Additions/x11/x11include/xorg-server-1.0.1/xf86Privstr.h:163:    Log			log;
VBox/Additions/x11/x11include/xorg-server-1.15.0/xf86Privstr.h:43:} Log;
VBox/Additions/x11/x11include/xorg-server-1.15.0/xf86Privstr.h:94:    Log log;
VBox/Additions/x11/x11include/xorg-server-1.7.7/xf86Privstr.h:43:} Log;
VBox/Additions/x11/x11include/xorg-server-1.7.7/xf86Privstr.h:98:    Log			log;
VBox/Additions/x11/x11include/xorg-server-1.14.0/xf86Privstr.h:43:} Log;
VBox/Additions/x11/x11include/xorg-server-1.14.0/xf86Privstr.h:94:    Log log;
VBox/Additions/x11/x11include/xorg-server-1.12.0/xf86Privstr.h:43:} Log;
VBox/Additions/x11/x11include/xorg-server-1.12.0/xf86Privstr.h:94:    Log			log;
VBox/Additions/x11/x11include/xorg-server-1.16.0/xf86Privstr.h:43:} Log;
VBox/Additions/x11/x11include/xorg-server-1.16.0/xf86Privstr.h:94:    Log log;
VBox/Additions/x11/x11include/xorg-server-1.5.3/xf86Privstr.h:55:} Log;
VBox/Additions/x11/x11include/xorg-server-1.5.3/xf86Privstr.h:121:    Log			log;
VBox/Additions/x11/x11include/xorg-server-1.11.0/xf86Privstr.h:43:} Log;
VBox/Additions/x11/x11include/xorg-server-1.11.0/xf86Privstr.h:98:    Log			log;
VBox/Additions/x11/x11include/xorg-server-1.3.0.0/uda1380.h:25: * $Log$
VBox/Additions/x11/x11include/xorg-server-1.3.0.0/xf86Privstr.h:55:} Log;
VBox/Additions/x11/x11include/xorg-server-1.3.0.0/xf86Privstr.h:162:    Log			log;
VBox/Additions/x11/x11include/xorg-server-1.6.5/xf86Privstr.h:44:} Log;
VBox/Additions/x11/x11include/xorg-server-1.6.5/xf86Privstr.h:101:    Log			log;
VBox/Additions/x11/x11include/xorg-server-1.1.0/uda1380.h:25: * $Log: uda1380.h,v $
VBox/Additions/x11/x11include/xorg-server-1.1.0/xf86Privstr.h:56:} Log;
VBox/Additions/x11/x11include/xorg-server-1.1.0/xf86Privstr.h:163:    Log			log;
VBox/Additions/solaris/SharedFolders/vboxfs_vnode.c:2457:	Log(("0x%p", node));
VBox/Additions/solaris/SharedFolders/vboxfs_vnode.c:2458:	Log((" type=%s (%d)",
VBox/Additions/solaris/SharedFolders/vboxfs_vnode.c:2463:	Log((" ino=%d", (uint_t)node->sf_ino));
VBox/Additions/solaris/SharedFolders/vboxfs_vnode.c:2464:	Log((" path=%s", node->sf_path));
VBox/Additions/solaris/SharedFolders/vboxfs_vnode.c:2465:	Log((" parent=0x%p", node->sf_parent));
VBox/Additions/solaris/SharedFolders/vboxfs_vnode.c:2467:		Log((" children=%d", node->sf_children));
VBox/Additions/solaris/SharedFolders/vboxfs_vnode.c:2469:		Log((" vnode=0x%p", node->sf_vnode));
VBox/Additions/solaris/SharedFolders/vboxfs_vnode.c:2470:	Log(("%s\n", node->sf_is_stale ? " STALE" : ""));
VBox/Additions/solaris/Mouse/vboxms.c:493:                    /* Log the failure.  I may well have not understood what
VBox/Additions/solaris/Mouse/vboxms.c:584:        Log((DEVICE_NAME "::Close: failed to get pState.\n"));
VBox/Additions/common/VBoxService/VBoxService.cpp:243:                   "Log opened %s\n",
VBox/Additions/common/VBoxService/VBoxService.cpp:278:            pfnLog(pLoggerRelease, "Log rotated - Log started %s\n", szTmp);
VBox/Additions/common/VBoxService/VBoxService.cpp:282:            pfnLog(pLoggerRelease, "Log continuation - Log started %s\n", szTmp);
VBox/Additions/common/VBoxService/VBoxService.cpp:286:            pfnLog(pLoggerRelease, "End of log file - Log started %s\n", szTmp);
VBox/Additions/common/VBoxService/VBoxServiceTimeSync.cpp:641:                     * Log radical host time changes.
VBox/Additions/common/VBoxService/VBoxServiceTimeSync.cpp:653:                 * Log radical guest time changes (we could be the cause of these, mind).
Binary file VBox/Additions/common/VBoxControl/.VBoxControl.cpp.swp matches
VBox/Additions/common/VBoxControl/VBoxControl.cpp:294:        Log(("next %d -> %d\n", iRect, iNextRect));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:308:            Log(("XP intersection right %d left %d, diff %d\n",
VBox/Additions/common/VBoxControl/VBoxControl.cpp:322:        Log(("next %d -> %d\n", iRect, iNextRect));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:336:            Log(("XN intersection left %d right %d, diff %d\n",
VBox/Additions/common/VBoxControl/VBoxControl.cpp:350:        Log(("next %d -> %d\n", iRect, iNextRect));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:364:            Log(("YP intersection bottom %d top %d, diff %d\n",
VBox/Additions/common/VBoxControl/VBoxControl.cpp:378:        Log(("next %d -> %d\n", iRect, iNextRect));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:392:            Log(("YN intersection top %d bottom %d, diff %d\n",
VBox/Additions/common/VBoxControl/VBoxControl.cpp:419:        Log(("[%d] %s\n", i, DisplayDevice.DeviceName));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:423:            Log(("Found primary device. err %d\n", GetLastError()));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:429:            Log(("Found secondary device. err %d\n", GetLastError()));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:438:    Log(("Found total %d devices. err %d\n", NumDevices, GetLastError()));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:442:        Log(("Requested identifier %d is invalid. err %d\n", Id, GetLastError()));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:460:        Log(("[%d(%d)] %s\n", i, DevNum, DisplayDevice.DeviceName));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:466:            Log(("Found primary device. err %d\n", GetLastError()));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:473:            Log(("Found secondary device. err %d\n", GetLastError()));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:481:                Log(("%d >= %d\n", NumDevices, DevNum));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:491:                Log(("EnumDisplaySettings err %d\n", GetLastError()));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:495:            Log(("%dx%d at %d,%d\n",
VBox/Additions/common/VBoxControl/VBoxControl.cpp:525:        Log(("VBoxDisplayThread : already at desired resolution.\n"));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:532:        Log(("[%d]: %d,%d %dx%d\n",
VBox/Additions/common/VBoxControl/VBoxControl.cpp:536:#endif /* Log */
VBox/Additions/common/VBoxControl/VBoxControl.cpp:562:        Log(("calling pfnChangeDisplaySettingsEx %x\n", gpfnChangeDisplaySettingsEx));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:565:        Log(("ChangeDisplaySettings position err %d\n", GetLastError()));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:570:    Log(("ChangeDisplaySettings update status %d\n", status));
VBox/Additions/common/VBoxControl/VBoxControl.cpp:600:        Log(("VBoxService: pChangeDisplaySettingsEx = %p\n", gpfnChangeDisplaySettingsEx));
VBox/Additions/common/VBoxVideo/Modesetting.cpp:296:    // Log(("%s: cOriginX=%d, cOriginY=%d, cWidth=%u, cHeight=%u\n", __PRETTY_FUNCTION__, (int)cOriginX, (int)cOriginX,
VBox/Additions/common/VBoxVideo/HGSMIHostCmd.cpp:225:    // Log(("VBoxVideo::vboxSetupAdapterInfo\n"));
VBox/Additions/common/VBoxVideo/HGSMIHostCmd.cpp:243:    // Log(("VBoxVideo::vboxSetupAdapterInfo finished rc = %d\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-haiku.c:231:    Log(("vgdrvHaikuClone: pszName=%s ppDev=%p\n", pszName, ppDev));
VBox/Additions/common/VBoxGuest/VBoxGuest-haiku.c:245:        Log(("vgdrvHaikuClone: iUnit=%d >= 256 - rejected\n", iUnit));
VBox/Additions/common/VBoxGuest/VBoxGuest-haiku.c:249:    Log(("vgdrvHaikuClone: pszName=%s iUnit=%d\n", pszName, iUnit));
VBox/Additions/common/VBoxGuest/VBoxGuest-haiku.c:252:    Log(("vgdrvHaikuClone: clone_create -> %d; iUnit=%d\n", rc, iUnit));
VBox/Additions/common/VBoxGuest/VBoxGuest-haiku.c:265:            Log(("vgdrvHaikuClone: Created *ppDev=%p iUnit=%d si_drv1=%p si_drv2=%p\n",
VBox/Additions/common/VBoxGuest/VBoxGuest-haiku.c:270:        Log(("vgdrvHaikuClone: make_dev iUnit=%d failed\n", iUnit));
VBox/Additions/common/VBoxGuest/VBoxGuest-haiku.c:273:    Log(("vgdrvHaikuClone: Existing *ppDev=%p iUnit=%d si_drv1=%p si_drv2=%p\n",
VBox/Additions/common/VBoxGuest/VBoxGuest-solaris.c:516:        Log(("vgdrvSolarisOpen: too many open instances."));
VBox/Additions/common/VBoxGuest/VBoxGuest-solaris.c:535:        Log(("vgdrvSolarisOpen: pSession=%p pState=%p pid=%d\n", pSession, pState, (int)RTProcSelf()));
VBox/Additions/common/VBoxGuest/VBoxGuest-solaris.c:555:        Log(("vgdrvSolarisClose: failed to get pState.\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-solaris.c:566:    Log(("vgdrvSolarisClose: pSession=%p pState=%p\n", pSession, pState));
VBox/Additions/common/VBoxGuest/VBoxGuest-solaris.c:570:        Log(("vgdrvSolarisClose: failed to get pSession.\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-solaris.c:590:        Log((DEVICE_NAME "::Close: failed to get pState.\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-solaris.c:864:    Log(("vgdrvSolarisPoll: no state data for %d\n", getminor(Dev)));
VBox/Additions/common/VBoxGuest/VBoxGuest-win.cpp:687:    Log(("vgdrvNtCreate: RequestorMode=%d\n", pIrp->RequestorMode));
VBox/Additions/common/VBoxGuest/VBoxGuest-win.cpp:725:        Log(("vgdrvNtCreate: Successfully created %s session %p\n",
VBox/Additions/common/VBoxGuest/VBoxGuest-win.cpp:730:    Log(("vgdrvNtCreate: Failed to create session: rc=%Rrc\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win.cpp:874:                Log(("vgdrvNtDeviceControlSlow: Mismatching sizes (%#x) - Hdr=%#lx/%#lx Irp=%#lx/%#lx!\n",
VBox/Additions/common/VBoxGuest/VBoxGuest-win.cpp:885:            Log(("vgdrvNtDeviceControlSlow: not buffered request (%#x) - not supported\n",
VBox/Additions/common/VBoxGuest/VBoxGuest-win.cpp:893:        Log(("VBoxDrvNtDeviceControlSlow: WOW64 req - not supported\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win.cpp:1588:     * Log everything to the host.
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:136:    Log(("vgdrvOS2Init: pszArgs='%s' MMIO=0x%RX32 IOPort=0x%RX16 Int=%#x Bus=%#x Dev=%#x Fun=%d\n",
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:183:                            Log(("vgdrvOS2DevHlpSetIRQ(%d) -> %d\n", g_bInterruptLine, rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:200:                        Log(("vgdrvOS2Init: Successfully loaded\n%s", g_szInitText));
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:264:        Log(("vgdrvOS2MapMemory: RTR0MemObjEnterPhys(,%RCp,%zx) -> %Rrc\n", PhysMMIOBase, cb, rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:294:            Log(("vgdrvOS2MapMemory: Actual size %#RX32 (tried %#zx)\n", pVMMDev->u32Size, cb));
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:307:                Log(("vgdrvOS2MapMemory: RTR0MemObjMapKernel [%RCp,%zx] -> %Rrc (2nd)\n", PhysMMIOBase, cb, rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:310:                Log(("vgdrvOS2MapMemory: RTR0MemObjEnterPhys(,%RCp,%zx) -> %Rrc (2nd)\n", PhysMMIOBase, cb, rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:320:        Log(("vgdrvOS2MapMemory: RTR0MemObjMapKernel [%RCp,%zx] -> %Rrc\n", PhysMMIOBase, cb, rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:376:    Log(("vgdrvOS2Open: g_DevExt=%p pSession=%p rc=%d pid=%d\n", &g_DevExt, pSession, rc, (int)RTProcSelf()));
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:383:    Log(("vgdrvOS2Close: pid=%d sfn=%d\n", (int)RTProcSelf(), sfn));
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:425:        Log(("VBoxGuestIoctl: WHUT?!? pSession == NULL! This must be a mistake... pid=%d sfn=%d\n", (int)Process, sfn));
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:458:        Log(("VBoxGuestIoctl: WHAT?!? pSession == NULL! This must be a mistake... pid=%d\n", (int)Process));
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:536:        Log(("VBoxGuestIoctl: WHAT?!? pSession == NULL! This must be a mistake... pid=%d\n", (int)Process));
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:549:        Log(("vgdrvOS2IOCtl: pSession=%p iFunction=%#x pvParm=%p pvData=%p *pcbParm=%d *pcbData=%d\n", pSession, iFunction, pvParm, pvData, *pcbParm, *pcbData));
VBox/Additions/common/VBoxGuest/VBoxGuest-os2.cpp:594:    Log(("vgdrvOS2ISR\n"));
VBox/Additions/common/VBoxGuest/VBoxDev-haiku.c:110:        Log((DRIVER_NAME ":vgdrvHaikuOpen success: g_DevExt=%p pSession=%p rc=%d pid=%d\n",&g_DevExt, pSession, rc,(int)RTProcSelf()));
VBox/Additions/common/VBoxGuest/VBoxDev-haiku.c:130:    Log(("vgdrvHaikuClose: pSession=%p\n", pSession));
VBox/Additions/common/VBoxGuest/VBoxDev-haiku.c:159:    Log(("vgdrvHaikuFree: pSession=%p\n", pSession));
VBox/Additions/common/VBoxGuest/VBoxDev-haiku.c:170:        Log(("vgdrvHaikuFree: si_drv1=%p!\n", pSession));
VBox/Additions/common/VBoxGuest/VBoxDev-haiku.c:188:    Log(("vgdrvHaikuIOCtl: cookie=%p op=0x%08x data=%p len=%lu)\n", cookie, op, data, len));
VBox/Additions/common/VBoxGuest/VBoxDev-haiku.c:202:        Log((DRIVER_NAME ": vgdrvHaikuIOCtl: bad request %lu size=%lu expected=%d\n", ulCmd, IOCPARM_LEN(ulCmd),
VBox/Additions/common/VBoxGuest/VBoxDev-haiku.c:242:    Log(("vgdrvHaikuIOCtl: pSession=%p pid=%d.\n", pSession,(int)RTProcSelf()));
VBox/Additions/common/VBoxGuest/VBoxDev-haiku.c:254:            Log(("vgdrvHaikuIOCtl: too much output data %d expected %d\n", cbDataReturned, len));
VBox/Additions/common/VBoxGuest/VBoxDev-haiku.c:262:                Log(("vgdrvHaikuIOCtl: user_memcpy failed; pvBuf=%p pArg=%p Cmd=%lu. rc=%d\n", pvBuf, data, op, rc));
VBox/Additions/common/VBoxGuest/VBoxDev-haiku.c:269:        Log(("vgdrvHaikuIOCtl: VGDrvCommonIoCtl failed. rc=%d\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:171:        Log(("vgdrvInitFixateGuestMappings: nothing to do\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:183:        Log(("vgdrvInitFixateGuestMappings: cbHypervisor=%#x\n", cbHypervisor));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:248:                Log(("VBoxGuest: %p LB %#x; uAlignment=%#x iTry=%u hGuestMappings=%p (%s)\n",
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:327:    Log(("vgdrvReportGuestInfo: VbglR0GRAlloc VMMDevReportGuestInfo2 completed with rc=%Rrc\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:338:        Log(("vgdrvReportGuestInfo: VbglR0GRAlloc VMMDevReportGuestInfo completed with rc=%Rrc\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:353:            Log(("vgdrvReportGuestInfo: VbglR0GRPerform VMMDevReportGuestInfo2 completed with rc=%Rrc\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:357:                Log(("vgdrvReportGuestInfo: VbglR0GRPerform VMMDevReportGuestInfo completed with rc=%Rrc\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:363:                Log(("vgdrvReportGuestInfo: VbglR0GRPerform VMMDevReportGuestInfo completed with rc=%Rrc\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:367:                    Log(("vgdrvReportGuestInfo: VbglR0GRPerform VMMDevReportGuestInfo2 completed with rc=%Rrc\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:394:    Log(("vgdrvReportDriverStatus: VbglR0GRAlloc VMMDevReportGuestStatus completed with rc=%Rrc\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:403:        Log(("vgdrvReportDriverStatus: VbglR0GRPerform VMMDevReportGuestStatus completed with fActive=%d, rc=%Rrc\n",
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:553:                        Log(("VBoxGuestSetBalloonSizeKernel: PhysNC allocs not supported, falling back to R3 allocs.\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:564:                    Log(("vboxGuestSetBalloonSize(inflate): failed, rc=%Rrc!\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:580:                    Log(("vboxGuestSetBalloonSize(deflate): failed, rc=%Rrc!\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:698:                Log(("vgdrvSetBalloonSizeFromUser(inflate): failed, rc=%Rrc!\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:710:            Log(("vgdrvSetBalloonSizeFromUser(deflate): failed, rc=%Rrc!\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:804:        Log(("HB Timer: vgdrvHeartbeatSend failed: rc=%Rrc\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:822:    Log(("vgdrvHeartbeatHostConfigure: VbglR0GRAlloc vgdrvHeartbeatHostConfigure completed with rc=%Rrc\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:828:        Log(("vgdrvHeartbeatHostConfigure: VbglR0GRPerform vgdrvHeartbeatHostConfigure completed with rc=%Rrc\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:913:            Log(("VGDrvCommonReinitDevExtAfterHibernation: could not report guest driver status, rc=%Rrc\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:916:        Log(("VGDrvCommonReinitDevExtAfterHibernation: could not report guest information to host, rc=%Rrc\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:1029:            Log(("VGDrvCommonInitDevExt: VMMDevMemory: mapping=%p size=%#RX32 (%#RX32) version=%#RX32\n",
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:1169:    Log(("VGDrvCommonDeleteDevExt:\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:1170:    Log(("VBoxGuest: The additions driver is terminating.\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:1334:            Log(("VGDrvCommonCloseSession: disconnecting client id %#RX32\n", idClient));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:2099:        Log(("VBOXGUEST_IOCTL_VMMREQUEST: invalid header: size %#x, expected >= %#x (hdr); type=%#x; rc=%Rrc!!\n",
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:2107:        Log(("VBOXGUEST_IOCTL_VMMREQUEST: Operation not allowed! type=%#x rc=%Rrc\n", enmType, rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:2121:        Log(("VBOXGUEST_IOCTL_VMMREQUEST: failed to allocate %u (%#x) bytes to cache the request. rc=%Rrc!!\n",
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:2143:        Log(("VBOXGUEST_IOCTL_VMMREQUEST: VbglR0GRPerform - rc=%Rrc!\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:2146:        Log(("VBOXGUEST_IOCTL_VMMREQUEST: request execution failed; VMMDev rc=%Rrc!\n", pReqCopy->rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:2267:    Log(("VBOXGUEST_IOCTL_HGCM_CONNECT: %.128s\n",
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:2272:    Log(("VBOXGUEST_IOCTL_HGCM_CONNECT: idClient=%RX32 (rc=%Rrc)\n", idClient, rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:2329:    Log(("VBOXGUEST_IOCTL_HGCM_DISCONNECT: idClient=%RX32\n", idClient));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:2427:            Log(("VBOXGUEST_IOCTL_HGCM_CALL: %s Failed. rc=%Rrc (Hdr.rc=%Rrc).\n", f32bit ? "32" : "64", rc, pInfo->Hdr.rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:2545:        Log(("VBGL_IOCTL_CHANGE_BALLOON: Padding isn't all zero: %.*Rhxs\n", sizeof(pInfo->u.In.abPadding), pInfo->u.In.abPadding));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:2596:            Log(("VBOXGUEST_IOCTL_WRITE_CORE_DUMP: VbglR0GRPerform failed, rc=%Rrc!\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:2601:        Log(("VBOXGUEST_IOCTL_WRITE_CORE_DUMP: failed to allocate %u (%#x) bytes to cache the request. rc=%Rrc!!\n",
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:2625:        Log(("%.*s", cbData, pch));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:2879:        Log(("VBGL_IOCTL_CHANGE_FILTER_MASK: or=%#x not=%#x: Invalid masks!\n", pInfo->u.In.fOrMask, pInfo->u.In.fNotMask));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:3250:        Log(("vgdrvAcquireSessionCapabilities: pSession=%p fOrMask=%#x fNotMask=%#x fFlags=%#x: configured acquire caps: 0x%x\n",
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:3317:        Log(("vgdrvAcquireSessionCapabilities: Caps %#x were busy\n", fOtherConflictingCaps));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:3548:            Log(( #Name ": Invalid input/output sizes. cbIn=%ld expected %ld. cbOut=%ld expected %ld.\n", \
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:3562:            Log(( #Name ": Invalid input/output sizes. cbIn=%ld expected %ld.\n", \
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:3575:            Log(( #Name ": Invalid input/output sizes. cbOut=%ld (%ld) expected %ld.\n", \
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:3587:            Log(( #Name ": %s\n", #expr)); \
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:3598:            Log( fmt ); \
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:3621:        Log(("VGDrvCommonIoCtl: Bad ioctl request size; cbReq=%#lx\n", (long)cbReq));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:3636:        Log(("VGDrvCommonIoCtl: Bad ioctl request header; cbIn=%#lx cbOut=%#lx version=%#lx\n",
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:3645:        Log(("VGDrvCommonIoCtl: Invalid pSession value %p (ioctl=%#x)\n", pSession, iFunction));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:3811:        Log(("VGDrvCommonIoCtl: uType=%#x, expected default (ioctl=%#x)\n", pReqHdr->uType, iFunction));
VBox/Additions/common/VBoxGuest/VBoxGuest.cpp:3973:            Log(("VGDrvCommonISR: acknowledge events failed rc=%Rrc (events=%#x)!!\n",
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibInit.cpp:62:            Log(("vbglR0QueryHostVersion: %u.%u.%ur%u %#x\n",
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:97:/*    Log(("VBOXSF: VbglR0SfDisconnect: VbglR0HGCMDisconnect -> %#x\n", rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:120:/*    Log(("VBOXSF: in ifs difference %d\n", (char *)&data.flags.type - (char *)&data.callInfo.cParms)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:122:/*    Log(("VBOXSF: VbglR0SfQueryMappings: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.result)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:144:/*    Log(("VBOXSF: VbglR0SfQueryMapName: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:173:/*    Log(("VBOXSF: VbglR0SfMapFolder: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:193:/*    Log(("VBOXSF: VbglR0SfUnmapFolder: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:217:/*    Log(("VBOXSF: VbglR0SfCreate: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:235:/*    Log(("VBOXSF: VbglR0SfClose: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:258:/*    Log(("VBOXSF: VbglR0SfRemove: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:284:/*    Log(("VBOXSF: VbglR0SfRename: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:310:/*    Log(("VBOXSF: VbglR0SfRead: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:354:/*    Log(("VBOXSF: VbglR0SfReadPageList: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:387:/*    Log(("VBOXSF: VbglR0SfWrite: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:433:/*    Log(("VBOXSF: VbglR0SfWritePhysCont: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:480:/*    Log(("VBOXSF: VbglR0SfWritePageList: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:505:/*    Log(("VBOXSF: VbglR0SfFlush: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:548:/*    Log(("VBOXSF: VbglR0SfDirInfo: rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:576:/*    Log(("VBOXSF: VbglR0SfFsInfo: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:607:/*    Log(("VBOXSF: VbglR0SfLock: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:618:/*    Log(("VBOXSF: VbglR0SfSetUtf8: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:641:/*    Log(("VBOXSF: VbglR0SfReadLink: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:669:/*    Log(("VBOXSF: VbglR0SfSymlink: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibSharedFolders.c:680:/*    Log(("VBOXSF: VbglR0SfSetSymlinks: VbglR0HGCMCall rc = %#x, result = %#x\n", rc, data.callInfo.Hdr.rc)); */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibInternal.h:79:#ifdef RT_OS_WINDOWS /** @todo dprintf() -> Log() */
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibInternal.h:86:# define dprintf(a) Log(a)
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibIdc-os2.cpp:54:    Log(("vbglDriverOpen: failed\n"));
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibHGCMInternal.cpp:298:                            Log(("GstHGCMCall: id=%#x fn=%u parm=%u RTR0MemObjLockKernel(,%p,%#x) -> %Rrc\n",
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibHGCMInternal.cpp:307:                        Log(("GstHGCMCall: id=%#x fn=%u parm=%u pv=%p cb=%#x > %#x -> out of range\n",
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibHGCMInternal.cpp:318:                            Log(("GstHGCMCall: id=%#x fn=%u parm=%u RTR0MemObjLockUser(,%p,%#x,nil) -> %Rrc\n",
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibHGCMInternal.cpp:349:                                    Log(("GstHGCMCall: id=%#x fn=%u parm=%u RTR0MemUserCopyFrom(,%p,%#x) -> %Rrc\n",
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibHGCMInternal.cpp:359:                                Log(("GstHGCMCall: RTR0MemObjLockKernel failed for small buffer: rc=%Rrc pvSmallBuf=%p cb=%#x\n",
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibHGCMInternal.cpp:379:                                    Log(("GstHGCMCall: id=%#x fn=%u parm=%u RTR0MemUserCopyFrom(,%p,%#x) -> %Rrc\n",
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibHGCMInternal.cpp:633:    Log(("calling VbglR0GRPerform\n"));
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibHGCMInternal.cpp:635:    Log(("VbglR0GRPerform rc = %Rrc (header rc=%d)\n", rc, pHGCMCall->header.result));
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibHGCMInternal.cpp:655:        Log(("Processing HGCM call asynchronously\n"));
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibHGCMInternal.cpp:697:                Log(("vbglR0HGCMInternalDoCall: successfully cancelled\n"));
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibHGCMInternal.cpp:715:                    Log(("vbglR0HGCMInternalDoCall: Cancel race rc=%Rrc rc2=%Rrc\n", rc, rc2));
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibHGCMInternal.cpp:735:                Log(("vbglR0HGCMInternalDoCall: Cancel race ended with rc=%Rrc (rc2=%Rrc) after %llu ms\n", rc, rc2, cElapsed));
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibHGCMInternal.cpp:740:    Log(("GstHGCMCall: rc=%Rrc result=%Rrc fu32Flags=%#x fLeakIt=%d\n",
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibHGCMInternal.cpp:878:    Log(("GstHGCMCall: u32ClientID=%#x u32Function=%u cParms=%u cbCallInfo=%#x fFlags=%#x\n",
VBox/Additions/common/VBoxGuest/lib/VBoxGuestR0LibHGCMInternal.cpp:975:    Log(("VbglR0HGCMInternalCall32: cParms=%d, u32Function=%d, fFlags=%#x\n", cParms, pCallInfo->u32Function, fFlags));
VBox/Additions/common/VBoxGuest/VBoxGuest-freebsd.c:177:    Log(("vgdrvFreeBSDClone: pszName=%s ppDev=%p\n", pszName, ppDev));
VBox/Additions/common/VBoxGuest/VBoxGuest-freebsd.c:191:        Log(("vgdrvFreeBSDClone: iUnit=%d >= 256 - rejected\n", iUnit));
VBox/Additions/common/VBoxGuest/VBoxGuest-freebsd.c:195:    Log(("vgdrvFreeBSDClone: pszName=%s iUnit=%d\n", pszName, iUnit));
VBox/Additions/common/VBoxGuest/VBoxGuest-freebsd.c:198:    Log(("vgdrvFreeBSDClone: clone_create -> %d; iUnit=%d\n", rc, iUnit));
VBox/Additions/common/VBoxGuest/VBoxGuest-freebsd.c:211:            Log(("vgdrvFreeBSDClone: Created *ppDev=%p iUnit=%d si_drv1=%p si_drv2=%p\n",
VBox/Additions/common/VBoxGuest/VBoxGuest-freebsd.c:216:            Log(("vgdrvFreeBSDClone: make_dev iUnit=%d failed\n", iUnit));
VBox/Additions/common/VBoxGuest/VBoxGuest-freebsd.c:219:        Log(("vgdrvFreeBSDClone: Existing *ppDev=%p iUnit=%d si_drv1=%p si_drv2=%p\n",
VBox/Additions/common/VBoxGuest/VBoxGuest-freebsd.c:252:            Log(("vgdrvFreeBSDOpen: success - g_DevExt=%p pSession=%p rc=%d pid=%d\n", &g_DevExt, pSession, rc, (int)RTProcSelf()));
VBox/Additions/common/VBoxGuest/VBoxGuest-freebsd.c:271:    Log(("vgdrvFreeBSDClose: fFile=%#x pSession=%p\n", fFile, pSession));
VBox/Additions/common/VBoxGuest/VBoxGuest-freebsd.c:280:            Log(("vgdrvFreeBSDClose: si_drv1=%p expected %p!\n", pDev->si_drv1, pSession));
VBox/Additions/common/VBoxGuest/VBoxGuest-freebsd.c:286:        Log(("vgdrvFreeBSDClose: si_drv1=%p!\n", pSession));
VBox/Additions/common/VBoxGuest/VBoxGuest-freebsd.c:407:        Log(("vgdrvFreeBSDIOCtlSlow: huh? cbReq=%#x ulCmd=%#lx\n", cbReq, ulCmd));
VBox/Additions/common/VBoxGuest/VBoxGuest-freebsd.c:432:            Log(("vgdrvFreeBSDIOCtlSlow: returns %d / %d ulCmd=%lx\n", 0, pHdr->rc, ulCmd));
VBox/Additions/common/VBoxGuest/VBoxGuest-freebsd.c:446:        Log(("vgdrvFreeBSDIOCtlSlow: ulCmd=%lx pData=%p failed, rc=%d\n", ulCmd, pvData, rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-freebsd.c:506:        Log(("vgdrvFreeBSDPoll: no state data for %s\n", devtoname(pDev)));
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:248:        Log(("VBoxGuest: driver loaded\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:405:    Log(("vgdrvDarwinOpen: g_DevExt=%p pSession=%p rc=%d pid=%d\n", &g_DevExt, pSession, rc, proc_pid(pProcess)));
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:416:    Log(("vgdrvDarwinClose: pid=%d\n", (int)RTProcSelf()));
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:455:        Log(("VBoxDrvDarwinIOCtl: WHAT?!? pSession == NULL! This must be a mistake... pid=%d iCmd=%#lx\n", (int)Process, iCmd));
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:567:        Log(("vgdrvDarwinIOCtlSlow: huh? cbReq=%#x iCmd=%#lx\n", cbReq, iCmd));
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:613:        Log(("vgdrvDarwinIOCtlSlow: pid=%d iCmd=%lx pData=%p failed, rc=%d\n", proc_pid(pProcess), iCmd, (void *)pData, rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:744:            Log(("VBoxGuest: created new work loop\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:751:            Log(("VBoxGuest: failed to create new work loop!\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:768:            Log(("VBoxGuest: No work loop!\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:797:        Log(("VGDrvCommonISR error\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:966:    /* Do not use Log*() here (in IOService instance) because its instance
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:968:    Log(("org_virtualbox_VBoxGuest::stop([%p], %p)\n", this, pProvider));
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:1001:    /* Do not use Log*() here (in IOService instance) because its instance
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:1043:        Log(("org_virtualbox_VBoxGuestClient::initWithTask: Bad cookie %#x\n", u32Type));
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:1118:                    Log(("org_virtualbox_VBoxGuestClient::start: created session %p for pid %d\n", m_pSession, (int)RTProcSelf()));
VBox/Additions/common/VBoxGuest/VBoxGuest-darwin.cpp:1181:        Log(("VBoxGuestClient::sessionClose: pSession == NULL, pid=%d; freed already?\n", (int)Process));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-legacy.cpp:71:    Log(("vgdrvNt4CreateDevice: pDrvObj=%p, pRegPath=%p\n", pDrvObj, pRegPath));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-legacy.cpp:81:        Log(("vgdrvNt4CreateDevice: Device not found!\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-legacy.cpp:94:        Log(("vgdrvNt4CreateDevice: Device created\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-legacy.cpp:101:            Log(("vgdrvNt4CreateDevice: Symlink created\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-legacy.cpp:106:            Log(("vgdrvNt4CreateDevice: Setting up device extension ...\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-legacy.cpp:111:            Log(("vgdrvNt4CreateDevice: Device extension created\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-legacy.cpp:130:                    Log(("vgdrvNt4CreateDevice: Returning rc = 0x%x (succcess)\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-legacy.cpp:139:            Log(("vgdrvNt4CreateDevice: IoCreateSymbolicLink failed with rc = %#x\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-legacy.cpp:143:        Log(("vgdrvNt4CreateDevice: IoCreateDevice failed with rc = %#x\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-legacy.cpp:144:    Log(("vgdrvNt4CreateDevice: Returning rc = 0x%x\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-legacy.cpp:159:    Log(("vgdrvNt4FindPciDevice\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-legacy.cpp:196:                Log(("vgdrvNt4FindPciDevice: Device found!\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-linux.c:731:    Log((DEVICE_NAME ": pFilp=%p pid=%d/%d %s\n", pFilp, RTProcSelf(), current->pid, current->comm));
VBox/Additions/common/VBoxGuest/VBoxGuest-linux.c:745:    Log(("vgdrvLinuxOpen: g_DevExt=%p pSession=%p rc=%d/%d (pid=%d/%d %s)\n",
VBox/Additions/common/VBoxGuest/VBoxGuest-linux.c:759:    Log(("vgdrvLinuxRelease: pFilp=%p pSession=%p pid=%d/%d %s\n",
VBox/Additions/common/VBoxGuest/VBoxGuest-linux.c:831:        Log(("vgdrvLinuxIOCtlSlow: copy_from_user(,%#lx,) failed; uCmd=%#x\n", ulArg, uCmd));
VBox/Additions/common/VBoxGuest/VBoxGuest-linux.c:836:        Log(("vgdrvLinuxIOCtlSlow: bad header version %#x; uCmd=%#x\n", Hdr.uVersion, uCmd));
VBox/Additions/common/VBoxGuest/VBoxGuest-linux.c:847:        Log(("vgdrvLinuxIOCtlSlow: too big cbBuf=%#x; uCmd=%#x\n", cbBuf, uCmd));
VBox/Additions/common/VBoxGuest/VBoxGuest-linux.c:853:        Log(("vgdrvLinuxIOCtlSlow: bad ioctl cbBuf=%#x _IOC_SIZE=%#x; uCmd=%#x\n", cbBuf, _IOC_SIZE(uCmd), uCmd));
VBox/Additions/common/VBoxGuest/VBoxGuest-linux.c:864:        Log(("vgdrvLinuxIOCtlSlow: copy_from_user(,%#lx, %#x) failed; uCmd=%#x\n", ulArg, Hdr.cbIn, uCmd));
VBox/Additions/common/VBoxGuest/VBoxGuest-linux.c:896:        Log(("vgdrvLinuxIOCtlSlow: pFilp=%p uCmd=%#x ulArg=%p failed, rc=%d\n", pFilp, uCmd, (void *)ulArg, rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:104:    Log(("vgdrvNtSendIrpSynchronously: Returning 0x%x\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:148:    Log(("vgdrvNtPnP: MinorFunction: %s\n",
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:157:            Log(("vgdrvNtPnP: START_DEVICE\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:165:                Log(("vgdrvNtPnP: START_DEVICE: pStack->Parameters.StartDevice.AllocatedResources = %p\n",
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:172:                    Log(("vgdrvNtPnP: START_DEVICE: No resources, pDevExt = %p, nextLowerDriver = %p!\n",
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:180:                Log(("vgdrvNtPnP: START_DEVICE: Error: rc = 0x%x\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:192:            Log(("vgdrvNtPnP: CANCEL_REMOVE_DEVICE\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:209:            Log(("vgdrvNtPnP: IRP_MN_SURPRISE_REMOVAL\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:231:            Log(("vgdrvNtPnP: QUERY_REMOVE_DEVICE\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:234:            Log(("vgdrvNtPnP: QUERY_REMOVE_DEVICE: Device cannot be removed without a reboot.\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:248:                Log(("vgdrvNtPnP: QUERY_REMOVE_DEVICE: Next lower driver replied rc = 0x%x\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:262:            Log(("vgdrvNtPnP: REMOVE_DEVICE\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:270:            Log(("vgdrvNtPnP: REMOVE_DEVICE: vgdrvNtCleanup rc = 0x%08X\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:282:            Log(("vgdrvNtPnP: REMOVE_DEVICE: Next lower driver replied rc = 0x%x\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:286:            Log(("vgdrvNtPnP: REMOVE_DEVICE: Removing device ...\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:296:            Log(("vgdrvNtPnP: REMOVE_DEVICE: Deleting device ...\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:302:            Log(("vgdrvNtPnP: REMOVE_DEVICE: Device removed!\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:310:            Log(("vgdrvNtPnP: CANCEL_STOP_DEVICE\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:327:            Log(("vgdrvNtPnP: QUERY_STOP_DEVICE\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:330:            Log(("vgdrvNtPnP: QUERY_STOP_DEVICE: Device cannot be stopped without a reboot!\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:344:                Log(("vgdrvNtPnP: QUERY_STOP_DEVICE: Next lower driver replied rc = 0x%x\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:358:            Log(("vgdrvNtPnP: STOP_DEVICE\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:366:            Log(("vgdrvNtPnP: STOP_DEVICE: cleaning up, rc = 0x%x\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:374:            Log(("vgdrvNtPnP: STOP_DEVICE: Next lower driver replied rc = 0x%x\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:390:    Log(("vgdrvNtPnP: Returning with rc = 0x%x\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:459:    Log(("vgdrvNtPower:\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:465:            Log(("vgdrvNtPower: IRP_MN_SET_POWER, type= %d\n", enmPowerType));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:470:                    Log(("vgdrvNtPower: SystemPowerState, action = %d, state = %d/%d\n",
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:483:                                    Log(("vgdrvNtPower: Returning from hibernation!\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:487:                                        Log(("vgdrvNtPower: Cannot re-init VMMDev chain, rc = %d!\n", rc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:494:                            Log(("vgdrvNtPower: Power action reset!\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:509:                                    Log(("vgdrvNtPower: error communicating new power status to VMMDev. vrc = %Rrc\n", vrc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:523:                            Log(("vgdrvNtPower: Power action shutdown!\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:526:                                Log(("vgdrvNtPower: Telling the VMMDev to close the VM ...\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:538:                                    Log(("vgdrvNtPower: Error communicating new power status to VMMDev. vrc = %Rrc\n", vrc));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:548:                            Log(("vgdrvNtPower: Power action hibernate!\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:552:                            Log(("vgdrvNtPower: PowerActionWarmEject!\n"));
VBox/Additions/common/VBoxGuest/VBoxGuest-win-pnp.cpp:556:                            Log(("vgdrvNtPower: %d\n", enmPowerAction));
VBox/Additions/common/pam/pam_vbox.cpp:157:            /* Log to syslog */
VBox/Additions/os2/VBoxSF/VBoxSFInit.cpp:72:    Log(("VBoxSFR0Init: g_fpfnDevHlp=%lx u32Version=%RX32 u32Session=%RX32 pfnServiceEP=%p g_u32Info=%u (%#x)\n",
VBox/Additions/os2/VBoxSF/VBoxSFInit.cpp:103:                Log(("VBoxSFR0Init: completed successfully\n"));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:29:#define Log(_m) do { printf _m ; } while (0)
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:32:        case _t: { Log(("%s", #_t"")); break; }
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:34:        default: { Log(("0x%08x", (_dw))); break; }
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:44:                Log(("%s%s", _pSep ,#_t"")); \
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:47:                Log(("%s", #_t"")); \
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:58:                Log(("%s0x%08x", _pSep, (_fFlags))); \
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:61:                Log(("0x%08x", (_fFlags))); \
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:86:        if (pCaps1->_field != pCaps2->_field) { Log(("pCaps->" #_field " = " _format "; // " _format " \n", pCaps2->_field, pCaps1->_field)); } \
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:91:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:100:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:106:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:110:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:117:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:126:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:132:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:139:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:145:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:152:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:158:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:162:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:168:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:190:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:196:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:216:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:222:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:240:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:246:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:256:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:262:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:280:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:286:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:292:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:298:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:316:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:322:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:337:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:343:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:351:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:357:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:365:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:371:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:382:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:388:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:393:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:399:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:427:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:433:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:443:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:449:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:458:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:464:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:476:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:483:    Log(("%s", pszPrefix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:501:    Log(("%s", pszSuffix));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:509:        Log(("caps are identical!\n"));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:513:    Log(("caps differ, doing detailed diff..\n"));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:685:    Log(("WARNING: should NOT be here!\n"));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:718:        Log(("malloc failed!\n"));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:732:        Log(("malloc failed!\n"));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:747:        Log(("malloc failed!\n"));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:818:        Log(("+ %s\n", pszCopy)); \
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:824:        Log(("- %s\n", pszCopy)); \
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:874:        Log(("GL Exts identical!\n"));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:875:        Log(("%s\n", pcszExts1));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:879:    Log(("%s\n", pcszExts1));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:881:    Log(("Diffing GL Exts..\n"));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:961:                Log(("Direct3DCreate9Ex failed hr 0x%x\n", hr));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:973:                Log(("GetDeviceCaps failed hr 0x%x\n", hr));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:981:            Log(("Loading caps from file not implemented yet!"));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:988:            Log(("Unsupported type %d", enmCapsType));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:993:    Log(("Should not be here!"));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:1008:        Log(("%s", aBuf));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:1019:            Log(("%s", aBuf));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:1025:            Log(("%s", aBuf));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:1030:            Log(("%s", aBuf));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:1043:        Log(("incorrect caps 1 size (%d), expected(%d)\n", sizeof (g_aCaps1), sizeof (D3DCAPS9)));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:1049:        Log(("incorrect caps 2 size (%d), expected(%d)\n", sizeof (g_aCaps2), sizeof (D3DCAPS9)));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:1061:        Log(("Failed to select Caps1"));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/dbg/DumpD3DCaps9.cpp:1070:            Log(("Failed to select Caps2"));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/VBoxDispD3D.cpp:24:#include <VBox/Log.h>
VBox/Additions/WINNT/Graphics/Video/disp/wddm/VBoxDispDbg.h:136:            Log(_m); \
VBox/Additions/WINNT/Graphics/Video/disp/wddm/VBoxDispD3DCmn.h:27:#include <VBox/Log.h>
VBox/Additions/WINNT/Graphics/Video/disp/wddm/VBoxCrHgsmi.cpp:38:            Log(("CrHgsmi: WDDM mode supported\n"));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/VBoxCrHgsmi.cpp:43:    Log(("CrHgsmi: unsupported\n"));
VBox/Additions/WINNT/Graphics/Video/disp/wddm/VBoxCrHgsmi.cpp:64:        Log(("CrHgsmi: faled to create KmtEsc VBOXUHGSMI instance, hr (0x%x)\n", hr));
VBox/Additions/WINNT/Graphics/Video/common/VBoxVideoLog.h:26:# define VBOX_VIDEO_LOG_LOGGER Log
VBox/Additions/WINNT/Graphics/Video/mp/wddm/VBoxMPMisc.cpp:891:        Log(("vboxWddmDisplaySettingsQueryPos failed %#x", Status));
VBox/Additions/WINNT/SharedFolders/driver/net.c:23:    Log(("VBOXSF: MRxUpdateNetRootState\n"));
VBox/Additions/WINNT/SharedFolders/driver/net.c:29:    Log(("VBOXSF: vbsfUpdateNetRoot: NetRoot = 0x%x Type = 0x%x\n",
VBox/Additions/WINNT/SharedFolders/driver/net.c:71:    Log(("VBOXSF: vbsfUpdateNetRoot: leaving pNetRoot->DeviceType = 0x%x\n",
VBox/Additions/WINNT/SharedFolders/driver/net.c:89:    Log(("VBOXSF: MRxCreateVNetRoot: pNetRoot = %p, pNetRootExtension = %p, name = [%.*ls]\n",
VBox/Additions/WINNT/SharedFolders/driver/net.c:126:                    Log(("VBOXSF: MRxCreateVNetRoot: IPC$\n"));
VBox/Additions/WINNT/SharedFolders/driver/net.c:134:        Log(("VBOXSF: MRxCreateVNetRoot: Pipe open not supported!\n"));
VBox/Additions/WINNT/SharedFolders/driver/net.c:140:        Log(("VBOXSF: MRxCreateVNetRoot: Mailslot open not supported!\n"));
VBox/Additions/WINNT/SharedFolders/driver/net.c:151:        Log(("VBOXSF: MRxCreateVNetRoot: NULL netroot context\n"));
VBox/Additions/WINNT/SharedFolders/driver/net.c:171:        Log(("VBOXSF: MRxCreateVNetRoot: initialize NET_ROOT\n"));
VBox/Additions/WINNT/SharedFolders/driver/net.c:179:            Log(("VBOXSF: MRxCreateVNetRoot: Empty shared folder name!\n"));
VBox/Additions/WINNT/SharedFolders/driver/net.c:197:            Log(("VBOXSF: MRxCreateVNetRoot: Initialize netroot length = %d, name = %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/net.c:210:                Log(("VBOXSF: MRxCreateVNetRoot: VbglR0SfMapFolder failed with %d\n", vboxRC));
VBox/Additions/WINNT/SharedFolders/driver/net.c:221:        Log(("VBOXSF: MRxCreateVNetRoot: Creating V_NET_ROOT on existing NET_ROOT!\n"));
VBox/Additions/WINNT/SharedFolders/driver/net.c:228:        Log(("VBOXSF: MRxCreateVNetRoot: Returning 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/net.c:242:    Log(("VBOXSF: MRxCreateVNetRoot: Returned STATUS_PENDING\n"));
VBox/Additions/WINNT/SharedFolders/driver/net.c:249:    Log(("VBOXSF: MRxFinalizeVNetRoot: V_NET_ROOT %p, NET_ROOT %p\n", pVNetRoot, pVNetRoot->pNetRoot));
VBox/Additions/WINNT/SharedFolders/driver/net.c:259:    Log(("VBOXSF: MRxFinalizeNetRoot: NET_ROOT %p\n", pNetRoot));
VBox/Additions/WINNT/SharedFolders/driver/net.c:265:            Log(("VBOXSF: MRxFinalizeVNetRoot: VbglR0SfUnmapFolder failed with %d\n",
VBox/Additions/WINNT/SharedFolders/driver/net.c:289:    Log(("VBOXSF: MRxExtractNetRootName: [%.*ls], RestOfName %p\n",
VBox/Additions/WINNT/SharedFolders/driver/net.c:309:    Log(("VBOXSF: MRxExtractNetRootName: cChars %d, iNetRoot %d, iRest %d\n",
VBox/Additions/WINNT/SharedFolders/driver/net.c:316:    Log(("VBOXSF: MRxExtractNetRootName: Srv = %.*ls, Root = %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/net.c:326:        Log(("VBOXSF: MRxExtractNetRootName: Rest = %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/net.c:342:    Log(("VBOXSF: vbsfExecuteCreateSrvCall: Connection Name %.*ls Length: %d, pSrvCall = %p\n",
VBox/Additions/WINNT/SharedFolders/driver/net.c:347:        Log(("VBOXSF: vbsfExecuteCreateSrvCall: Principal name = %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/net.c:353:        Log(("VBOXSF: vbsfExecuteCreateSrvCall: Domain name = %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/net.c:385:        Log(("VBOXSF: vbsfExecuteCreateSrvCall: Verifier succeeded!\n"));
VBox/Additions/WINNT/SharedFolders/driver/net.c:390:        Log(("VBOXSF: vbsfExecuteCreateSrvCall: Verifier failed!\n"));
VBox/Additions/WINNT/SharedFolders/driver/net.c:403:    Log(("VBOXSF: MRxCreateSrvCall: %p.\n", pSrvCall));
VBox/Additions/WINNT/SharedFolders/driver/net.c:407:        Log(("VBOXSF: MRxCreateSrvCall: Called in context of RDBSS process\n"));
VBox/Additions/WINNT/SharedFolders/driver/net.c:415:        Log(("VBOXSF: MRxCreateSrvCall: Dispatching to worker thread\n"));
VBox/Additions/WINNT/SharedFolders/driver/net.c:422:            Log(("VBOXSF: MRxCreateSrvCall: queued\n"));
VBox/Additions/WINNT/SharedFolders/driver/net.c:437:    Log(("VBOXSF: MRxFinalizeSrvCall %p, ctx = %p.\n", pSrvCall, pSrvCall->Context));
VBox/Additions/WINNT/SharedFolders/driver/net.c:447:    Log(("VBOXSF: MRxSrvCallWinnerNotify: pSrvCall %p, pSrvCall->Ctx %p, winner %d, context %p\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsfhlp.c:233:        Log(("Unexpected vbox error %Rrc\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsfhlp.c:246:    Log(("vbsfAllocNonPagedMem: RefCnt after incrementing: %d\n", s_iAllocRefCount));
VBox/Additions/WINNT/SharedFolders/driver/vbsfhlp.c:256:        Log(("vbsfAllocNonPagedMem: Allocated %d bytes of memory at %p.\n", ulSize, pMemory));
VBox/Additions/WINNT/SharedFolders/driver/vbsfhlp.c:262:        Log(("vbsfAllocNonPagedMem: ERROR: Could not allocate %d bytes of memory!\n", ulSize));
VBox/Additions/WINNT/SharedFolders/driver/vbsfhlp.c:273:    Log(("vbsfFreeNonPagedMem: RefCnt after decrementing: %d\n", s_iAllocRefCount));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:48:    Log(("VBOXSF: MRxFsdDispatch: major %d, minor %d: %s\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:58:        Log(("VBOXSF: MRxFsdDispatch: Invalid device request detected %p %p\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:65:    Log(("VBOXSF: MRxFsdDispatch: Returned 0x%X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:74:    Log(("VBOXSF: MRxUnload\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:115:        Log(("VBOXSF: MRxUnload: IoDeleteSymbolicLink Status 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:119:    Log(("VBOXSF: MRxUnload: VBoxSF.sys driver object %p unloaded\n", DriverObject));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:124:    Log(("VBOXSF: vbsfInitMRxDispatch: Called.\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:189:    Log(("VBOXSF: vbsfInitMRxDispatch: Success.\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:246:    Log(("VBOXSF: MRXDeviceControl: pDevObj %p, pDeviceExtension %p, code %x\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:270:                Log(("VBOXSF: MRxDeviceControl: IOCTL_REDIR_QUERY_PATH(_EX): not kernel mode!!!\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:278:                Log(("VBOXSF: MRxDeviceControl: IOCTL_REDIR_QUERY_PATH: Called (pid %x).\n", IoGetCurrentProcess()));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:282:                    Log(("VBOXSF: MRxDeviceControl: IOCTL_REDIR_QUERY_PATH: short input buffer %d.\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:290:                Log(("VBOXSF: MRxDeviceControl: PathNameLength = %d.\n", pReq->PathNameLength));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:291:                Log(("VBOXSF: MRxDeviceControl: SecurityContext = %p.\n", pReq->SecurityContext));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:292:                Log(("VBOXSF: MRxDeviceControl: FilePathName = %.*ls.\n", pReq->PathNameLength / sizeof (WCHAR), pReq->FilePathName));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:299:                Log(("VBOXSF: MRxDeviceControl: IOCTL_REDIR_QUERY_PATH_EX: Called.\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:303:                    Log(("VBOXSF: MRxDeviceControl: IOCTL_REDIR_QUERY_PATH_EX: short input buffer %d.\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:311:                Log(("VBOXSF: MRxDeviceControl: pSecurityContext = %p.\n", pReqEx->pSecurityContext));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:312:                Log(("VBOXSF: MRxDeviceControl: EaLength = %d.\n", pReqEx->EaLength));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:313:                Log(("VBOXSF: MRxDeviceControl: pEaBuffer = %p.\n", pReqEx->pEaBuffer));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:314:                Log(("VBOXSF: MRxDeviceControl: PathNameLength = %d.\n", pReqEx->PathName.Length));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:315:                Log(("VBOXSF: MRxDeviceControl: FilePathName = %.*ls.\n", pReqEx->PathName.Length / sizeof (WCHAR), pReqEx->PathName.Buffer));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:324:            Log(("VBOXSF: MRxDeviceControl PrefixOK %d\n", PrefixOK));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:338:                Log(("VBOXSF: MRxDeviceControl: returned STATUS_BAD_NETWORK_NAME\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:342:            Log(("VBOXSF: MRxDeviceControl pResp %p verifying the path.\n", pResp));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:357:                Log(("VBOXSF: MRxDeviceControl: claiming the path.\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:369:            Log(("VBOXSF: MRxDeviceControl: returned STATUS_INVALID_PARAMETER\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:380:        Log(("VBOXSF: MRxDeviceControl calling RDBSS %p\n", pDeviceExtension->pfnRDBSSDeviceControl));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:382:        Log(("VBOXSF: MRxDeviceControl RDBSS status 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:394:        Log(("VBOXSF: MRxDeviceControl: returned STATUS_NOT_IMPLEMENTED\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:411:    Log(("VBOXSF: DriverEntry: Driver object %p\n", DriverObject));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:415:        Log(("VBOXSF: DriverEntry: driver object is NULL.\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:423:        Log(("VBOXSF: DriverEntry: ERROR while initializing VBox subsystem (%Rrc)!\n", vboxRC));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:432:        Log(("VBOXSF: DriverEntry: ERROR while connecting to host (%Rrc)!\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:449:        Log(("VBOXSF: DriverEntry: RxDriverEntry failed: 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:455:        Log(("VBOXSF: DriverEntry: RxRegisterMinirdr: calling VBoxMRxDeviceObject %p\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:472:        Log(("VBOXSF: DriverEntry: RxRegisterMinirdr: returned 0x%08X VBoxMRxDeviceObject %p\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:477:            Log(("VBOXSF: DriverEntry: RxRegisterMinirdr failed: 0x%08X\n", Status ));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:504:        Log(("VBOXSF: DriverEntry: Calling IoCreateSymbolicLink\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:508:            Log(("VBOXSF: DriverEntry: IoCreateSymbolicLink: 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:512:        Log(("VBOXSF: DriverEntry: Symbolic link created.\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:529:        Log(("VBOXSF: DriverEntry: VBoxSF.sys failed to start with Status = 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:540:    Log(("VBOXSF: DriverEntry: VBoxMRxDeviceObject = %p, rdbss %p, devext %p\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:547:    Log(("VBOXSF: DriverEntry: Init successful!\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:552:    Log(("VBOXSF: DriverEntry: Failure! Status = 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:572:    Log(("VBOXSF: MRxStart\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:578:        Log(("VBOXSF: MRxStart: Start in progress -> started\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:583:        Log(("VBOXSF: MRxStart: Already started\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:588:        Log(("VBOXSF: MRxStart: Bad state! VBoxMRxState = %d\n", VBoxMRxState));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:598:    Log(("VBOXSF: MRxStop\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:605:    Log(("VBOXSF: MRxIoCtl: IoControlCode = 0x%08X\n", RxContext->LowIoContext.ParamsFor.FsCtl.FsControlCode));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:620:    Log(("VBOXSF: MRxDevFcbXXXControlFile: MajorFunction = 0x%02X\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:627:            Log(("VBOXSF: MRxDevFcbXXXControlFile: IRP_MN_USER_FS_REQUEST: 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:635:            Log(("VBOXSF: MRxDevFcbXXXControlFile: IRP_MJ_DEVICE_CONTROL: InputBuffer %p/%d, OutputBuffer %p/%d\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:645:                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_ADDCONN\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:652:                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_DELCONN\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:664:                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_GETLIST\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:675:                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_GETLIST: Copying local connections\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:710:                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_GETGLOBALLIST\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:746:                        Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_GETGLOBALLIST failed: 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:766:                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_GETCONN\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:777:                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_GETCONN: Looking up connection name and connections\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:783:                        Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_GETCONN: ConnectName = %.*ls, Len = %d, Index = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:795:                                Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_GETCONN: LocalConnectionName = %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:805:                                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_GETCONN: Remote name = %.*ls, Len = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:817:                                Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_GETCONN: LocalConnectionName is NULL!\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:823:                            Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_GETCONN: Index is invalid!\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:851:                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_GETGLOBALCONN\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:869:                        Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_GETGLOBALCONN: Connection ID = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:879:                            Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_GETGLOBALCONN: Returned name = %.*ls, Len = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:900:                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_START: capFobx %p\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:903:                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_START: process: current 0x%X, RDBSS 0x%X\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:910:                            Log(("VBOXSF: MRxDevFcbXXXControlFile: MRX_VBOX_STARTABLE\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:923:                            Log(("VBOXSF: MRxDevFcbXXXControlFile: MRX_VBOX_START_IN_PROGRESS RxStartMiniRdr Status 0x%08X, post %d\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:956:                                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_START: MRX_VBOX_START_IN_PROGRESS: RtlCreateSecurityDescriptor failed with 0x%08X!\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:968:                                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_START: MRX_VBOX_START_IN_PROGRESS: ZwOpenFile %ls failed with 0x%08X!\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:977:                                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_START: MRX_VBOX_START_IN_PROGRESS: ZwSetSecurityObject failed with 0x%08X!\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:985:                                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_START: MRX_VBOX_START_IN_PROGRESS: ZwClose failed with 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:993:                            Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_START: MRX_VBOX_STARTED: Already started\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:998:                            Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_START: Invalid state (%d)!\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1004:                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_START: Returned 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1013:                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_STOP: capFobx %p\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1024:                        Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_STOP: Open handles = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1033:                    Log(("VBOXSF: MRxDevFcbXXXControlFile: IOCTL_MRX_VBOX_STOP: Returned 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1055:            Log(("VBOXSF: MRxDevFcbXXXControlFile: unimplemented major function 0x%02X\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1061:    Log(("VBOXSF: MRxDevFcbXXXControlFile: Status = 0x%08X, Info = 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1095:    Log(("VBOXSF: vbsfVerifyConnectionName: prefix %d remaining %d [%.*ls]\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1127:    Log(("VBOXSF: vbsfOpenConnectionHandle: ConnectionName = %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1157:        Log(("VBOXSF: vbsfOpenConnectionHandle: ZwCreateFile failed status 0x%08X or invalid handle!\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1181:    Log(("VBOXSF: vbsfCreateConnection\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1185:        Log(("VBOXSF: vbsfCreateConnection: post to file system process\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1200:        Log(("VBOXSF: vbsfCreateConnection: Connection name / length is invalid!\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1206:        Log(("VBOXSF: vbsfCreateConnection: Name = %.*ls, Len = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1241:                        Log(("VBOXSF: vbsfCreateConnection: Index 0x%x is invalid!\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1252:                            Log(("VBOXSF: vbsfCreateConnection: LocalConnectionName at index %d is NOT empty!\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1260:                            Log(("VBOXSF: vbsfCreateConnection: LocalConnectionName at index %d NOT allocated!\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1273:                            Log(("VBOXSF: vbsfCreateConnection: RemoteName %.*ls, Len = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1286:                Log(("VBOXSF: vbsfCreateConnection: bad format\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1292:            Log(("VBOXSF: vbsfCreateConnection: connection was not found\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1322:    Log(("VBOXSF: vbsfDeleteConnection\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1326:        Log(("VBOXSF: vbsfDeleteConnection: post to file system process\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1341:        Log(("VBOXSF: vbsfDeleteConnection: pwcConnectName = %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1354:            Log(("VBOXSF: vbsfDeleteConnection: ObReferenceObjectByHandle Status 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1360:                Log(("VBOXSF: vbsfDeleteConnection: Fobx %p\n", Fobx));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1370:                    Log(("VBOXSF: vbsfDeleteConnection: wrong FsContext2\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1405:                            Log(("VBOXSF: vbsfDeleteConnection: Index 0x%x is invalid!\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1426:                            Log(("VBOXSF: vbsfDeleteConnection: deleted index 0x%x\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1433:                    Log(("VBOXSF: vbsfCreateConnection: bad format\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1450:    Log(("VBOXSF: vbsfDeleteConnection: Status 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1457:    Log(("VBOXSF: MRxQueryEaInfo: Ea buffer len remaining is %d\n", RxContext->Info.LengthRemaining));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1464:    Log(("VBOXSF: MRxSetEaInfo\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1471:    Log(("VBOXSF: MRxFsCtl\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1478:    Log(("VBOXSF: MRxNotifyChangeDirectory\n"));
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1555:    Log(("VBOXSF: MRxQuerySdInfo: Buffer %p, Length %d, SecurityInformation 0x%x\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1568:    Log(("VBOXSF: MRxQuerySdInfo: Status 0x%08X, InformationToReturn %d\n",
VBox/Additions/WINNT/SharedFolders/driver/vbsf.c:1576:    Log(("VBOXSF: MRxSetSdInfo\n"));
VBox/Additions/WINNT/SharedFolders/driver/Win2kWorkarounds.c:49:        Log(("Fake_FsRtlTeardownPerStreamContexts: %p\n", pCtx));
VBox/Additions/WINNT/SharedFolders/driver/Win2kWorkarounds.c:64:    Log(("Resolve_FsRtlTeardownPerStreamContexts: %p\n", pAdvancedHeader));
VBox/Additions/WINNT/SharedFolders/driver/Win2kWorkarounds.c:79:    Log(("FsRtlTeardownPerStreamContexts: %p\n", pAdvancedHeader));
VBox/Additions/WINNT/SharedFolders/driver/Win2kWorkarounds.c:81:    Log(("FsRtlTeardownPerStreamContexts: returns\n"));
VBox/Additions/WINNT/SharedFolders/driver/Win2kWorkarounds.c:96:    Log(("Fake_RtlGetVersion: %p\n", pVerInfo));
VBox/Additions/WINNT/SharedFolders/driver/Win2kWorkarounds.c:99:        Log(("Fake_RtlGetVersion: -> STATUS_INVALID_PARAMETER (size = %#x)\n", pVerInfo->dwOSVersionInfoSize));
VBox/Additions/WINNT/SharedFolders/driver/Win2kWorkarounds.c:128:    Log(("Resolve_RtlGetVersion: %p\n", pVerInfo));
VBox/Additions/WINNT/SharedFolders/driver/Win2kWorkarounds.c:160:    Log(("Fake_PsGetProcessImageFileName: %p\n", pProcess));
VBox/Additions/WINNT/SharedFolders/driver/Win2kWorkarounds.c:169:    Log(("Resolve_PsGetProcessImageFileName: %p\n", pProcess));
VBox/Additions/WINNT/SharedFolders/driver/info.c:59:    Log(("VBOXSF: MrxQueryDirectory: FileInformationClass %d, pVBoxFobx %p, hFile %RX64, pInfoBuffer %p\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:64:        Log(("VBOXSF: MrxQueryDirectory: pVBoxFobx is invalid!\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:72:        Log(("VBOXSF: MrxQueryDirectory: DirectoryName = \\ (null string)\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:74:        Log(("VBOXSF: MrxQueryDirectory: DirectoryName = %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:81:        Log(("VBOXSF: MrxQueryDirectory: Template = \\ (null string)\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:83:        Log(("VBOXSF: MrxQueryDirectory: Template = %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:88:    Log(("VBOXSF: MrxQueryDirectory: Allocating cbHGCMBuffer = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:102:        Log(("VBOXSF: MrxQueryDirectory: Index specified %d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:110:        Log(("VBOXSF: MrxQueryDirectory: Query single entry\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:122:        Log(("VBOXSF: MrxQueryDirectory: ParsedPathSize = %d\n", ParsedPathSize));
VBox/Additions/WINNT/SharedFolders/driver/info.c:161:        Log(("VBOXSF: MrxQueryDirectory: ParsedPath = %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:170:    Log(("VBOXSF: MrxQueryDirectory: CallDirInfo: File = 0x%08x, Flags = 0x%08x, Index = %d, u32BufSize = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:174:    Log(("VBOXSF: MrxQueryDirectory: u32BufSize after CallDirInfo = %d, rc = %Rrc\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:184:            Log(("VBOXSF: MrxQueryDirectory: Host could not translate entry!\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:192:                Log(("VBOXSF: MrxQueryDirectory: Host reported no more files!\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:212:            Log(("VBOXSF: MrxQueryDirectory: no such file!\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:217:            Log(("VBOXSF: MrxQueryDirectory: Error %Rrc from CallDirInfo (cFiles=%d)!\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:228:        Log(("VBOXSF: MrxQueryDirectory: returned buffer size (%u) is invalid!!!\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:240:    Log(("VBOXSF: MrxQueryDirectory: cFiles=%d, Length=%d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:249:            Log(("VBOXSF: MrxQueryDirectory: Entry size (%d) exceeds the buffer size (%d)!!!\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:260:                Log(("VBOXSF: MrxQueryDirectory: FileDirectoryInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:297:                Log(("VBOXSF: MrxQueryDirectory: FileFullDirectoryInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:335:                Log(("VBOXSF: MrxQueryDirectory: FileBothDirectoryInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:358:                    Log(("VBOXSF: MrxQueryDirectory: FileBothDirectoryInformation cbAlloc = %x cbObject = %x\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:360:                    Log(("VBOXSF: MrxQueryDirectory: FileBothDirectoryInformation cbToCopy = %d, name size=%d name len=%d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:362:                    Log(("VBOXSF: MrxQueryDirectory: FileBothDirectoryInformation File name %.*ls (DirInfo)\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:364:                    Log(("VBOXSF: MrxQueryDirectory: FileBothDirectoryInformation File name %.*ls (DirEntry)\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:383:                Log(("VBOXSF: MrxQueryDirectory: FileIdBothDirectoryInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:407:                    Log(("VBOXSF: MrxQueryDirectory: FileIdBothDirectoryInformation cbAlloc = 0x%RX64 cbObject = 0x%RX64\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:409:                    Log(("VBOXSF: MrxQueryDirectory: FileIdBothDirectoryInformation cbToCopy = %d, name size=%d name len=%d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:411:                    Log(("VBOXSF: MrxQueryDirectory: FileIdBothDirectoryInformation File name %.*ls (DirInfo)\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:413:                    Log(("VBOXSF: MrxQueryDirectory: FileIdBothDirectoryInformation File name %.*ls (DirEntry)\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:432:                Log(("VBOXSF: MrxQueryDirectory: FileNamesInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:446:                    Log(("VBOXSF: MrxQueryDirectory: FileNamesInformation: File name [%.*ls]\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:463:                Log(("VBOXSF: MrxQueryDirectory: Not supported FileInformationClass %d!\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:472:        Log(("VBOXSF: MrxQueryDirectory: %d bytes left in HGCM buffer\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:505:    Log(("VBOXSF: MrxQueryDirectory: Returned 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:527:    Log(("VBOXSF: MrxQueryVolumeInfo: pInfoBuffer = %p, cbInfoBuffer = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:529:    Log(("VBOXSF: MrxQueryVolumeInfo: vboxFobx = %p, Handle = 0x%RX64\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:551:            Log(("VBOXSF: MrxQueryVolumeInfo: FileFsVolumeInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:555:                Log(("VBOXSF: MrxQueryVolumeInfo: pVBoxFobx is NULL!\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:565:            Log(("VBOXSF: MrxQueryVolumeInfo: FileFsVolumeInformation: Root name = %.*ls, %d bytes\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:574:            Log(("VBOXSF: MrxQueryVolumeInfo: FileFsVolumeInformation: cbToCopy %d, cbString %d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:640:            Log(("VBOXSF: MrxQueryVolumeInfo: FileFsVolumeInformation: VolumeLabelLength %d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:657:            Log(("VBOXSF: MrxQueryVolumeInfo: FileFsLabelInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:664:            Log(("VBOXSF: MrxQueryVolumeInfo: FileFsLabelInformation: Root name = %.*ls, %d bytes\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:710:            Log(("VBOXSF: MrxQueryVolumeInfo: FileFsLabelInformation: VolumeLabelLength %d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:735:                Log(("VBOXSF: MrxQueryVolumeInfo: FileFsFullSizeInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:740:                Log(("VBOXSF: MrxQueryVolumeInfo: FileFsSizeInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:746:                Log(("VBOXSF: MrxQueryVolumeInfo: pVBoxFobx is NULL!\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:784:            Log(("VBOXSF: MrxQueryVolumeInfo: TotalAllocationUnits     0x%RX64\n", TotalAllocationUnits.QuadPart));
VBox/Additions/WINNT/SharedFolders/driver/info.c:785:            Log(("VBOXSF: MrxQueryVolumeInfo: AvailableAllocationUnits 0x%RX64\n", AvailableAllocationUnits.QuadPart));
VBox/Additions/WINNT/SharedFolders/driver/info.c:786:            Log(("VBOXSF: MrxQueryVolumeInfo: SectorsPerAllocationUnit 0x%X\n", SectorsPerAllocationUnit));
VBox/Additions/WINNT/SharedFolders/driver/info.c:787:            Log(("VBOXSF: MrxQueryVolumeInfo: BytesPerSector           0x%X\n", BytesPerSector));
VBox/Additions/WINNT/SharedFolders/driver/info.c:816:            Log(("VBOXSF: MrxQueryVolumeInfo: FileFsDeviceInformation: Type = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:838:            Log(("VBOXSF: MrxQueryVolumeInfo: FileFsAttributeInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:872:            Log(("VBOXSF: MrxQueryVolumeInfo: FileFsAttributeInformation: FileSystemNameLength %d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:880:            Log(("VBOXSF: MrxQueryVolumeInfo: FileFsControlInformation: not supported\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:885:            Log(("VBOXSF: MrxQueryVolumeInfo: FileFsObjectIdInformation: not supported\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:890:            Log(("VBOXSF: MrxQueryVolumeInfo: FileFsMaximumInformation: not supported\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:895:            Log(("VBOXSF: MrxQueryVolumeInfo: Not supported FsInformationClass %d!\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:905:        Log(("VBOXSF: MrxQueryVolumeInfo: Insufficient buffer size %d, required %d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:910:    Log(("VBOXSF: MrxQueryVolumeInfo: cbToCopy = %d, LengthRemaining = %d, Status = 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:942:        Log(("VBOXSF: MrxQueryFileInfo: length pointer is NULL!\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:946:    Log(("VBOXSF: MrxQueryFileInfo: InfoBuffer = %p, Size = %d bytes, LenRemain = %d bytes\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:951:        Log(("VBOXSF: MrxQueryFileInfo: pVBoxFobx is NULL!\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:957:        Log(("VBOXSF: MrxQueryFileInfo: pInfoBuffer is NULL!\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:963:        Log(("VBOXSF: MrxQueryFileInfo: Directory -> Copy info retrieved during the create call\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:971:                Log(("VBOXSF: MrxQueryFileInfo: FileBasicInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:978:                    Log(("VBOXSF: MrxQueryFileInfo: FileBasicInformation: File attributes: 0x%x\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:991:                Log(("VBOXSF: MrxQueryFileInfo: FileStandardInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1005:                Log(("VBOXSF: MrxQueryFileInfo: FileNamesInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1028:                Log(("VBOXSF: MrxQueryFileInfo: FileInternalInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1044:                Log(("VBOXSF: MrxQueryFileInfo: FileEaInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1060:                Log(("VBOXSF: MrxQueryFileInfo: FileNetworkOpenInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1080:                Log(("VBOXSF: MrxQueryFileInfo: FileStreamInformation: not supported\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1085:                Log(("VBOXSF: MrxQueryFileInfo: Not supported FunctionalityRequested %d!\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:1117:                Log(("VBOXSF: MrxQueryFileInfo: FileBasicInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1129:                    Log(("VBOXSF: MrxQueryFileInfo: FileBasicInformation: File attributes = 0x%x\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:1140:                Log(("VBOXSF: MrxQueryFileInfo: FileStandardInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1164:                Log(("VBOXSF: MrxQueryFileInfo: FileNamesInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1187:                Log(("VBOXSF: MrxQueryFileInfo: FileInternalInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1204:                Log(("VBOXSF: MrxQueryFileInfo: FileEaInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1218:                Log(("VBOXSF: MrxQueryFileInfo: FileAttributeTagInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1235:                Log(("VBOXSF: MrxQueryFileInfo: FileEndOfFileInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1249:                Log(("VBOXSF: MrxQueryFileInfo: FileAllocationInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1263:                Log(("VBOXSF: MrxQueryFileInfo: FileNetworkOpenInformation\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1283:                Log(("VBOXSF: MrxQueryFileInfo: FileStreamInformation: not supported\n"));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1288:                Log(("VBOXSF: MrxQueryFileInfo: Not supported FunctionalityRequested %d!\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:1314:        Log(("VBOXSF: MrxQueryFileInfo: Buffer too small %d, required %d!\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:1324:        Log(("VBOXSF: MrxQueryFileInfo: Remaining length = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:1328:    Log(("VBOXSF: MrxQueryFileInfo: Returned 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1351:    Log(("VBOXSF: MrxSetFileInfo: pInfoBuffer %p\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:1361:            Log(("VBOXSF: MRxSetFileInfo: FileBasicInformation: CreationTime   %RX64\n", pInfo->CreationTime.QuadPart));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1362:            Log(("VBOXSF: MRxSetFileInfo: FileBasicInformation: LastAccessTime %RX64\n", pInfo->LastAccessTime.QuadPart));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1363:            Log(("VBOXSF: MRxSetFileInfo: FileBasicInformation: LastWriteTime  %RX64\n", pInfo->LastWriteTime.QuadPart));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1364:            Log(("VBOXSF: MRxSetFileInfo: FileBasicInformation: ChangeTime     %RX64\n", pInfo->ChangeTime.QuadPart));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1365:            Log(("VBOXSF: MRxSetFileInfo: FileBasicInformation: FileAttributes %RX32\n", pInfo->FileAttributes));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1401:            Log(("VBOXSF: MrxSetFileInfo: FileBasicInformation: keeps %d %d %d %d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:1461:            Log(("VBOXSF: MrxSetFileInfo: FileDispositionInformation: Delete = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:1475:            Log(("VBOXSF: MrxSetFileInfo: FilePositionInformation: CurrentByteOffset = 0x%RX64. Unsupported!\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:1487:            Log(("VBOXSF: MrxSetFileInfo: FileAllocationInformation: new AllocSize = 0x%RX64, FileSize = 0x%RX64\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:1513:            Log(("VBOXSF: MrxSetFileInfo: FileEndOfFileInformation: new EndOfFile 0x%RX64, FileSize = 0x%RX64\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:1518:            Log(("VBOXSF: MrxSetFileInfo: FileEndOfFileInformation: AllocSize = 0x%RX64, Status 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:1528:            Log(("VBOXSF: MrxSetFileInfo: FileLinkInformation: ReplaceIfExists = %d, RootDirectory = 0x%x = [%.*ls]. Not implemented!\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:1540:            Log(("VBOXSF: MrxSetFileInfo: FileRenameInformation: ReplaceIfExists = %d, RootDirectory = 0x%x = [%.*ls]\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:1549:            Log(("VBOXSF: MrxSetFileInfo: Not supported FunctionalityRequested %d!\n",
VBox/Additions/WINNT/SharedFolders/driver/info.c:1559:    Log(("VBOXSF: MrxSetFileInfo: Returned 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/info.c:1566:    Log(("VBOXSF: MRxSetFileInfoAtCleanup\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:65:        Log(("VBOXSF: vbsfProcessCreate: Unsupported: extended attributes!\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:72:        Log(("VBOXSF: vbsfProcessCreate: Unsupported: paging file!\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:77:    Log(("VBOXSF: vbsfProcessCreate: FileAttributes = 0x%08x\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:79:    Log(("VBOXSF: vbsfProcessCreate: CreateOptions = 0x%08x\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:92:        Log(("VBOXSF: vbsfProcessCreate: Unsupported: file open by id!\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:104:        Log(("VBOXSF: vbsfProcessCreate: Delete on close!\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:115:    Log(("VBOXSF: vbsfProcessCreate: bf.TemporaryFile %d, bf.CreateDirectory %d, bf.DirectoryFile = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:121:        Log(("VBOXSF: vbsfProcessCreate: Not allowed: Temporary directories!\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:128:        Log(("VBOXSF: vbsfProcessCreate: Unsupported combination: dir && !dir\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:150:            Log(("VBOXSF: vbsfProcessCreate: Invalid disposition 0x%08X for directory!\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:159:    Log(("VBOXSF: vbsfProcessCreate: CreateDisposition = 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:166:            Log(("VBOXSF: vbsfProcessCreate: CreateFlags |= SHFL_CF_ACT_REPLACE_IF_EXISTS | SHFL_CF_ACT_CREATE_IF_NEW\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:171:            Log(("VBOXSF: vbsfProcessCreate: CreateFlags |= SHFL_CF_ACT_OPEN_IF_EXISTS | SHFL_CF_ACT_FAIL_IF_NEW\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:176:            Log(("VBOXSF: vbsfProcessCreate: CreateFlags |= SHFL_CF_ACT_FAIL_IF_EXISTS | SHFL_CF_ACT_CREATE_IF_NEW\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:181:            Log(("VBOXSF: vbsfProcessCreate: CreateFlags |= SHFL_CF_ACT_OPEN_IF_EXISTS | SHFL_CF_ACT_CREATE_IF_NEW\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:186:            Log(("VBOXSF: vbsfProcessCreate: CreateFlags |= SHFL_CF_ACT_OVERWRITE_IF_EXISTS | SHFL_CF_ACT_FAIL_IF_NEW\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:191:            Log(("VBOXSF: vbsfProcessCreate: CreateFlags |= SHFL_CF_ACT_OVERWRITE_IF_EXISTS | SHFL_CF_ACT_CREATE_IF_NEW\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:195:            Log(("VBOXSF: vbsfProcessCreate: Unexpected create disposition: 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:201:    Log(("VBOXSF: vbsfProcessCreate: DesiredAccess = 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:203:    Log(("VBOXSF: vbsfProcessCreate: ShareAccess   = 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:208:        Log(("VBOXSF: vbsfProcessCreate: FILE_READ_DATA\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:214:        Log(("VBOXSF: vbsfProcessCreate: FILE_WRITE_DATA\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:221:        Log(("VBOXSF: vbsfProcessCreate: FILE_APPEND_DATA\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:253:        Log(("VBOXSF: vbsfProcessCreate: RemainingName->Length = %d\n", RemainingName->Length));
VBox/Additions/WINNT/SharedFolders/driver/path.c:261:        Log(("VBOXSF: ParsedPath: %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:265:        Log(("VBOXSF: vbsfProcessCreate: VbglR0SfCreate called.\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:271:    Log(("VBOXSF: vbsfProcessCreate: VbglR0SfCreate returns vboxRC = %Rrc, Result = 0x%x\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:311:            Log(("VBOXSF: vbsfProcessCreate: Path not found\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:319:            Log(("VBOXSF: vbsfProcessCreate: File not found\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:327:            Log(("VBOXSF: vbsfProcessCreate: File not found but have a handle!\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:336:            Log(("VBOXSF: vbsfProcessCreate: File exists, Handle = 0x%RX64\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:349:                Log(("VBOXSF: vbsfProcessCreate: Existing file was not opened!\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:386:            Log(("VBOXSF: vbsfProcessCreate: Invalid CreateResult from host (0x%08X)\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:398:        Log(("VBOXSF: vbsfProcessCreate: File is a directory!\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:406:        Log(("VBOXSF: vbsfProcessCreate: File is not a directory!\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:428:        Log(("VBOXSF: vbsfProcessCreate: AllocationSize = 0x%RX64, EndOfFile = 0x%RX64\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:446:    Log(("VBOXSF: vbsfProcessCreate: Returned with status = 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:481:    Log(("VBOXSF: MRxCreate: name ptr %p length=%d, SrvOpen->Flags 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:493:        Log(("VBOXSF: MRxCreate: Attempt to open %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:500:            Log(("VBOXSF: MRxCreate: Empty name -> Only backslash used\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:508:        Log(("VBOXSF: MRxCreate: netroot type %d not supported\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:527:        Log(("VBOXSF: MRxCreate: vbsfProcessCreate failed 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:532:    Log(("VBOXSF: MRxCreate: EOF is 0x%RX64 AllocSize is 0x%RX64\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:538:        Log(("VBOXSF: MRxCreate: RxCreateNetFobx failed\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:543:    Log(("VBOXSF: MRxCreate: CreateAction = 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:570:    Log(("VBOXSF: MRxCreate: VBoxFobx = %p\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:575:        Log(("VBOXSF: MRxCreate: no VBoxFobx!\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:581:    Log(("VBOXSF: MRxCreate: FileBasicInformation: CreationTime   %RX64\n", FileBasicInfo.CreationTime.QuadPart));
VBox/Additions/WINNT/SharedFolders/driver/path.c:582:    Log(("VBOXSF: MRxCreate: FileBasicInformation: LastAccessTime %RX64\n", FileBasicInfo.LastAccessTime.QuadPart));
VBox/Additions/WINNT/SharedFolders/driver/path.c:583:    Log(("VBOXSF: MRxCreate: FileBasicInformation: LastWriteTime  %RX64\n", FileBasicInfo.LastWriteTime.QuadPart));
VBox/Additions/WINNT/SharedFolders/driver/path.c:584:    Log(("VBOXSF: MRxCreate: FileBasicInformation: ChangeTime     %RX64\n", FileBasicInfo.ChangeTime.QuadPart));
VBox/Additions/WINNT/SharedFolders/driver/path.c:585:    Log(("VBOXSF: MRxCreate: FileBasicInformation: FileAttributes %RX32\n", FileBasicInfo.FileAttributes));
VBox/Additions/WINNT/SharedFolders/driver/path.c:602:    Log(("VBOXSF: MRxCreate: NetRoot is %p, Fcb is %p, SrvOpen is %p, Fobx is %p\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:604:    Log(("VBOXSF: MRxCreate: return 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:614:    Log(("VBOXSF: MRxComputeNewBufferingState\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:621:    Log(("VBOXSF: MRxDeallocateForFcb\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:628:    Log(("VBOXSF: MRxDeallocateForFobx\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:635:    Log(("VBOXSF: MRxTruncate\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:643:    Log(("VBOXSF: MRxCleanupFobx: pVBoxFobx = %p, Handle = 0x%RX64\n", pVBoxFobx, pVBoxFobx? pVBoxFobx->hFile: 0));
VBox/Additions/WINNT/SharedFolders/driver/path.c:654:    Log(("VBOXSF: MRxForceClosed\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:672:    Log(("VBOXSF: vbsfSetFileInfo: SetAttrFlags 0x%02X\n", SetAttrFlags));
VBox/Additions/WINNT/SharedFolders/driver/path.c:673:    Log(("VBOXSF: vbsfSetFileInfo: FileBasicInformation: CreationTime   %RX64\n", pInfo->CreationTime.QuadPart));
VBox/Additions/WINNT/SharedFolders/driver/path.c:674:    Log(("VBOXSF: vbsfSetFileInfo: FileBasicInformation: LastAccessTime %RX64\n", pInfo->LastAccessTime.QuadPart));
VBox/Additions/WINNT/SharedFolders/driver/path.c:675:    Log(("VBOXSF: vbsfSetFileInfo: FileBasicInformation: LastWriteTime  %RX64\n", pInfo->LastWriteTime.QuadPart));
VBox/Additions/WINNT/SharedFolders/driver/path.c:676:    Log(("VBOXSF: vbsfSetFileInfo: FileBasicInformation: ChangeTime     %RX64\n", pInfo->ChangeTime.QuadPart));
VBox/Additions/WINNT/SharedFolders/driver/path.c:677:    Log(("VBOXSF: vbsfSetFileInfo: FileBasicInformation: FileAttributes %RX32\n", pInfo->FileAttributes));
VBox/Additions/WINNT/SharedFolders/driver/path.c:681:        Log(("VBOXSF: vbsfSetFileInfo: nothing to set\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:716:    Log(("VBOXSF: vbsfSetFileInfo: Returned 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/path.c:734:        Log(("VBOXSF: vbsfCloseFileHandle: SHFL_HANDLE_NIL\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:738:    Log(("VBOXSF: vbsfCloseFileHandle: 0x%RX64, on close info 0x%02X\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:762:    Log(("VBOXSF: vbsfCloseFileHandle: Returned 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/path.c:780:    Log(("VBOXSF: MRxCloseSrvOpen: capFcb = %p, capFobx = %p, pVBoxFobx = %p, pSrvOpen = %p\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:785:    Log(("VBOXSF: MRxCloseSrvOpen: Remaining name = %.*ls, Len = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:795:        Log(("VBOXSF: MRxCloseSrvOpen: File was renamed, handle 0x%RX64 ignore close.\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:806:        Log(("VBOXSF: MRxCloseSrvOpen: Delete on close. Open count = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:833:    Log(("VBOXSF: vbsfRemove: Delete %.*ls. open count = %d\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:840:    Log(("VBOXSF: vbsfRemove: RemainingName->Length %d\n", RemainingName->Length));
VBox/Additions/WINNT/SharedFolders/driver/path.c:858:        Log(("VBOXSF: vbsfRemove: VbglR0SfRemove failed with %Rrc\n", vboxRC));
VBox/Additions/WINNT/SharedFolders/driver/path.c:860:    Log(("VBOXSF: vbsfRemove: Returned 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/path.c:890:    Log(("VBOXSF: vbsfRename: FileName = %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:900:    Log(("VBOXSF: vbsfRename: RenameInformation->FileNameLength = %d\n", RenameInformation->FileNameLength));
VBox/Additions/WINNT/SharedFolders/driver/path.c:905:    Log(("VBOXSF: vbsfRename: Destination path = %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:908:    Log(("VBOXSF: vbsfRename: RemainingName->Length = %d\n", RemainingName->Length));
VBox/Additions/WINNT/SharedFolders/driver/path.c:916:    Log(("VBOXSF: vbsfRename: Source path = %.*ls\n",
VBox/Additions/WINNT/SharedFolders/driver/path.c:924:    Log(("VBOXSF: vbsfRename: Calling VbglR0SfRename\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:932:        Log(("VBOXSF: vbsfRename: VbglR0SfRename failed with %Rrc\n", vboxRC));
VBox/Additions/WINNT/SharedFolders/driver/path.c:934:    Log(("VBOXSF: vbsfRename: Returned 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/path.c:941:    Log(("VBOXSF: MRxShouldTryToCollapseThisOpen\n"));
VBox/Additions/WINNT/SharedFolders/driver/path.c:948:    Log(("VBOXSF: MRxCollapseOpen\n"));
VBox/Additions/WINNT/SharedFolders/driver/file.c:104:        Log(("VBOXSF: vbsfTransferCommon: using page list: %d pages, offset 0x%03X\n", cPages, offFirstPage));
VBox/Additions/WINNT/SharedFolders/driver/file.c:128:                Log(("VBOXSF: vbsfTransferCommon: transferring %d pages at %d; %d bytes at %d\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:139:                    Log(("VBOXSF: vbsfTransferCommon: pfnTransferPages %Rrc, cbTransferred %d\n", rc, cbTransferred));
VBox/Additions/WINNT/SharedFolders/driver/file.c:177:        Log(("VBOXSF: vbsfTransferCommon: using linear address\n"));
VBox/Additions/WINNT/SharedFolders/driver/file.c:183:            Log(("VBOXSF: vbsfTransferCommon: transferring %d bytes at %d\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:192:                Log(("VBOXSF: vbsfTransferCommon: pfnTransferBuffer %Rrc, cbTransferred %d\n", rc, cbTransferred));
VBox/Additions/WINNT/SharedFolders/driver/file.c:249:    Log(("VBOXSF: vbsfReadInternal: AsyncIo = %d, Fcb->FileSize = 0x%RX64\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:251:    Log(("VBOXSF: vbsfReadInternal: UserBuffer %p, BufferMdl %p\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:253:    Log(("VBOXSF: vbsfReadInternal: ByteCount 0x%X, ByteOffset 0x%RX64, FileSize 0x%RX64\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:265:            Log(("VBOXSF: vbsfReadInternal: EOF\n"));
VBox/Additions/WINNT/SharedFolders/driver/file.c:306:    Log(("VBOXSF: vbsfReadInternal: Status = 0x%08X, ByteCount = 0x%X\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:317:    Log(("VBOXSF: vbsfReadWorker: calling the worker\n"));
VBox/Additions/WINNT/SharedFolders/driver/file.c:321:    Log(("VBOXSF: vbsfReadWorker: Status 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:334:    Log(("VBOXSF: MRxRead: RxDispatchToWorkerThread: Status 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/file.c:371:    Log(("VBOXSF: vbsfWriteInternal: AsyncIo = %d, Fcb->FileSize = 0x%RX64\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:373:    Log(("VBOXSF: vbsfWriteInternal: UserBuffer %p, BufferMdl %p\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:375:    Log(("VBOXSF: vbsfWriteInternal: ByteCount is 0x%X, ByteOffset is 0x%RX64, FileSize 0x%RX64\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:411:    Log(("VBOXSF: vbsfWriteInternal: Status = 0x%08X, ByteCount = 0x%X\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:421:    Log(("VBOXSF: vbsfWriteWorker: calling the worker\n"));
VBox/Additions/WINNT/SharedFolders/driver/file.c:425:    Log(("VBOXSF: vbsfWriteWorker: Status 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:438:    Log(("VBOXSF: MRxWrite: RxDispatchToWorkerThread: Status 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:463:    Log(("VBOXSF: MRxLocks: Operation %d\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:475:            Log(("VBOXSF: MRxLocks: Unsupported LOWIO_OP_UNLOCK_MULTIPLE!\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:502:    Log(("VBOXSF: MRxLocks: Returned 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/file.c:510:    Log(("VBOXSF: MRxCompleteBufferingStateChangeRequest: not implemented\n"));
VBox/Additions/WINNT/SharedFolders/driver/file.c:527:    Log(("VBOXSF: MRxFlush\n"));
VBox/Additions/WINNT/SharedFolders/driver/file.c:534:    Log(("VBOXSF: MRxFlush: Returned 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/file.c:555:    Log(("VBOXSF: vbsfSetEndOfFile: New size = %RX64 (%p), pNewAllocationSize = %p\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:574:    Log(("VBOXSF: vbsfSetEndOfFile: VbglR0SfFsInfo returned %Rrc\n", vboxRC));
VBox/Additions/WINNT/SharedFolders/driver/file.c:579:        Log(("VBOXSF: vbsfSetEndOfFile: VbglR0SfFsInfo new allocation size = %RX64\n",
VBox/Additions/WINNT/SharedFolders/driver/file.c:589:    Log(("VBOXSF: vbsfSetEndOfFile: Returned 0x%08X\n", Status));
VBox/Additions/WINNT/SharedFolders/driver/file.c:608:    Log(("VBOXSF: MRxExtendStub: new size = %RX64\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:37:#include <VBox/Log.h>
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:92:            Log(("VBOXNP: vbsfIOCTL: DeviceIoctl last error = %d\n", dwStatus));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:117:    Log(("VBOXNP: GetNetCaps: Index = 0x%x\n", nIndex));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:187:    Log(("VBOXNP: NPLogonNotify\n"));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:202:    Log(("VBOXNP: NPPasswordChangeNotify\n"));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:212:    Log(("VBOXNP: NPAddConnection\n"));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:228:    Log(("VBOXNP: NPAddConnection3: dwFlags = 0x%x\n", dwFlags));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:229:    Log(("VBOXNP: NPAddConnection3: Local Name:  %ls\n", pNetResource->lpLocalName ));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:230:    Log(("VBOXNP: NPAddConnection3: Remote Name: %ls\n", pNetResource->lpRemoteName ));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:235:        Log(("VBOXNP: NPAddConnection3: Incorrect net resource type %d\n", pNetResource->dwType));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:290:    Log(("VBOXNP: NPAddConnection3: ConnectionName: [%ls], len %d, dwStatus 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:302:            Log(("VBOXNP: NPAddConnection3: Connection [%ls] already connected.\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:339:    Log(("VBOXNP: NPAddConnection3: Returned 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:350:    Log(("VBOXNP: NPCancelConnection: Name = %ls\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:462:    Log(("VBOXNP: NPCancelConnection: Returned 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:476:    Log(("VBOXNP: NPGetConnection: pLocalName = %ls\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:519:        Log(("VBOXNP: NPGetConnection: RemoteName: %ls, cb %d\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:529:            Log(("VBOXNP: NPGetConnection: returning pRemoteName: %ls\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:536:                /* Log only real errors. Do not log a 0 bytes try. */
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:537:                Log(("VBOXNP: NPGetConnection: Buffer overflow: *pBufferSize = %d, len = %d\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:550:        Log(("VBOXNP: NPGetConnection: Returned error 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:622:    Log(("VBOXNP: NPOpenEnum: dwScope 0x%08X, dwType 0x%08X, dwUsage 0x%08X, pNetResource %p\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:644:            Log(("VBOXNP: NPOpenEnum: pRemoteName %ls\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:732:                Log(("VBOXNP: NPOpenEnum: unsupported scope 0x%lx\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:741:        Log(("VBOXNP: NPOpenEnum: Returned error 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:750:        Log(("VBOXNP: NPOpenEnum: pCtx %p\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:774:    Log(("VBOXNP: NPEnumResource: hEnum %p, lpcCount %p, pBuffer %p, pBufferSize %p.\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:779:        Log(("VBOXNP: NPEnumResource: WN_BAD_HANDLE\n"));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:785:        Log(("VBOXNP: NPEnumResource: WN_BAD_VALUE\n"));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:789:    Log(("VBOXNP: NPEnumResource: *lpcCount 0x%x, *pBufferSize 0x%x, pCtx->index %d\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:800:        Log(("VBOXNP: NPEnumResource: RESOURCE_CONNECTED\n"));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:874:                    Log(("VBOXNP: NPEnumResource: pRemoteName: %ls\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:891:        Log(("VBOXNP: NPEnumResource: RESOURCE_GLOBALNET: root %d\n", pCtx->fRoot));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1019:                        Log(("VBOXNP: NPEnumResource: pRemoteName: %ls\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1037:        Log(("VBOXNP: NPEnumResource: dwScope 6\n"));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1042:        Log(("VBOXNP: NPEnumResource: invalid dwScope 0x%x\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1057:            Log(("VBOXNP: NPEnumResource: More Data Needed - %d\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1064:    Log(("VBOXNP: NPEnumResource: Entries returned %d, dwStatus 0x%08X\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1073:    Log(("VBOXNP: NPCloseEnum: hEnum %p\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1081:    Log(("VBOXNP: NPCloseEnum: returns\n"));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1089:    Log(("VBOXNP: NPGetResourceParent: pNetResource %p, pBuffer %p, pBufferSize %p\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1104:        Log(("VBOXNP: NPGetResourceParent: WN_BAD_NETNAME\n"));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1155:            Log(("VBOXNP: NPGetResourceParent: WN_MORE_DATA 0x%x\n", cbEntry));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1178:            Log(("VBOXNP: NPGetResourceParent: no parent, strings %p/%p\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1204:    Log(("VBOXNP: NPGetResourceInformation: pNetResource %p, pBuffer %p, pBufferSize %p, lplpSystem %p\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1211:        Log(("VBOXNP: NPGetResourceInformation: WN_BAD_VALUE\n"));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1215:    Log(("VBOXNP: NPGetResourceInformation: pRemoteName %ls, *pBufferSize 0x%x\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1222:        Log(("VBOXNP: NPGetResourceInformation: WN_BAD_NETNAME\n"));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1257:            Log(("VBOXNP: NPGetResourceInformation: WN_MORE_DATA 0x%x\n", cbEntry));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1280:        Log(("VBOXNP: NPGetResourceInformation: pRemoteName: %ls, strings %p/%p\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1310:            Log(("VBOXNP: NPGetResourceInformation: WN_MORE_DATA 0x%x\n", cbEntry));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1335:        Log(("VBOXNP: NPGetResourceInformation: pRemoteName: %ls, strings %p/%p\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1355:        Log(("VBOXNP: NPGetResourceInformation: WN_MORE_DATA 0x%x\n", cbEntry));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1390:    Log(("VBOXNP: NPGetResourceInformation: pRemoteName: %ls, strings %p/%p\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1392:    Log(("VBOXNP: NPGetResourceInformation: *lplpSystem: %ls\n", *lplpSystem));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1413:    Log(("VBOXNP: NPGetUniversalName: pLocalPath = %ls, InfoLevel = %d, *pBufferSize = %d\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1420:        Log(("VBOXNP: NPGetUniversalName: Bad dwInfoLevel value: %d\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1430:        Log(("VBOXNP: NPGetUniversalName: Bad pLocalPath.\n"));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1472:                Log(("VBOXNP: NPGetUniversalName: NPGetConnection returned error 0x%lx\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1480:            Log(("VBOXNP: NPGetUniversalName: Remote name is empty.\n"));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1492:            Log(("VBOXNP: NPGetUniversalName: WN_MORE_DATA BufferRequired: %d\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1534:                Log(("VBOXNP: NPGetUniversalName: NPGetConnection returned error 0x%lx\n", dwStatus));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1541:            Log(("VBOXNP: NPGetUniversalName: Remote name is empty.\n"));
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1559:            Log(("VBOXNP: NPGetUniversalName: WN_MORE_DATA BufferRequired: %d\n",
VBox/Additions/WINNT/SharedFolders/np/vboxmrxnp.cpp:1592:    Log(("VBOXNP: NPGetUniversalName: WN_SUCCESS\n"));
VBox/Additions/WINNT/VBoxGINA/VBoxGINA.cpp:432:    return TRUE; /* Log off is OK. */
VBox/Additions/WINNT/Installer/VBoxDrvInst.cpp:116: * Log callback for DIFxAPI calls.
VBox/Additions/WINNT/Installer/VBoxGuestAdditionsW2KXP.nsh:584:  ; Log file
Binary file VBox/Additions/WINNT/Installer/Languages/German.nsh matches
VBox/Additions/WINNT/Installer/dumplog.nsh:38:    MessageBox MB_OK "Could not create Log-File!" /SD IDOK
VBox/Additions/WINNT/Mouse/NT4/VBoxPS2NT.cpp:1479:                            Log(("VBoxMouseNT: ERROR querying mouse capabilities from VMMDev. rc = %Rrc\n", rc));
VBox/Additions/WINNT/Mouse/NT4/VBoxPS2NT.cpp:1521:                        Log(("VBoxMouseNT: ERROR querying mouse capabilities from VMMDev. rc = %Rrc\n", rc));
VBox/Additions/WINNT/Mouse/NT4/VBoxPS2NT.cpp:2137:        Log(("VBoxMouseNT::DriverEntry: could not initialize guest library, rc = %Rrc\n", rcVBox));
VBox/Additions/WINNT/Mouse/NT4/VBoxPS2NT.cpp:2153:                Log(("VBoxMouseNT::DriverEntry: ERROR communicating new mouse capabilities to VMMDev. rc = %Rrc\n", rcVBox));
VBox/Additions/WINNT/Mouse/NT4/VBoxPS2NT.cpp:2164:            Log(("VBoxMouseNT::DriverEntry: could not allocate request buffer, rc = %Rrc\n", rcVBox));
VBox/Additions/WINNT/Mouse/common/VBoxMouseLog.h:57:        Log((VBOX_MOUSE_LOG_PREFIX_FMT"WARNING! ", VBOX_MOUSE_LOG_PREFIX_PARMS)); \
VBox/Additions/WINNT/Mouse/common/VBoxMouseLog.h:58:        Log(_a);                                                                  \
VBox/Additions/WINNT/Mouse/common/VBoxMouseLog.h:59:        Log((VBOX_MOUSE_LOG_SUFFIX_FMT VBOX_MOUSE_LOG_SUFFIX_PARMS));             \
VBox/Additions/WINNT/Mouse/common/VBoxMouseLog.h:63:#define LOG(_a) _LOGMSG(Log, _a)
VBox/Additions/WINNT/VBoxTray/VBoxHelpers.h:24:#   define DDCLOG(a) Log(a)
VBox/Additions/WINNT/VBoxTray/VBoxHelpers.cpp:22:#include <VBox/Log.h>
VBox/Additions/WINNT/VBoxTray/VBoxHelpers.cpp:35:        Log(("VBoxTray: Could not report VBoxTray status \"%ld\", rc=%Rrc\n", statusCurrent, rc));
VBox/Additions/WINNT/VBoxTray/VBoxClipboard.cpp:94:        Log(("New Clipboard API is enabled\n"));
VBox/Additions/WINNT/VBoxTray/VBoxClipboard.cpp:100:        Log(("New Clipboard API is not available. rc = %Rrc\n", rc));
VBox/Additions/WINNT/VBoxTray/VBoxClipboard.cpp:263:            Log(("WM_CLIPBOARDUPDATE\n"));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:33:            Log(_m); \
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:41:            Log(_m); \
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:401:        Log(("VBoxTray:(WDDM) pfnSetDisplayConfig Failed for Flags 0x%x\n", fFlags));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:736:            Log(("display data no match display(%d): i(%d), flags(%d)", iDisplay, i, pDev->StateFlags));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:907:            Log(("malloc failed!"));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:918:            Log(("malloc failed!"));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:963:            Log(("VBoxTray: WM_DISPLAYCHANGE\n"));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:971:                Log(("VBoxTray: VBOXRR_TIMER_ID\n"));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:1123:            Log(("VBoxTray: GetMessage returned FALSE\n"));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:1133:                Log(("VBoxTray: closing Rr %d\n", Msg.message));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:1191:                Log(("WaitForSingleObject failed!"));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:1309:            Log(("VBoxTray: (WDDM) pfnD3DKMTPollDisplayChildren failed, Status (0x%x)\n", Status));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:1409:    Log(("VBoxTray: cancelling pending resize\n"));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:1425:        Log(("VBoxTray: ResizeDisplayDevice: EnumDisplaySettings last error %d\n", GetLastError ()));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:1462:    Log(("VBoxTray: vboxDispIfResizeModesWDDM iChanged %d cDevModes %d fEnable %d fExtDispSup %d\n", iChangedMode, cDevModes, fEnable, fExtDispSup));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:1590:        Log(("VBoxTray: (WDDM) vboxDispIfWddmEnableDisplay: settings are up to date\n"));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:1658:            Log(("VBoxTray: (WDDM) vboxDispIfWddmDcSet topology validation failed winEr %d\n", winEr));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:1684:            Log(("VBoxTray: (WDDM) Failed vboxDispIfWddmEnableDisplay mode winEr %d\n", winEr));
VBox/Additions/WINNT/VBoxTray/VBoxDispIf.cpp:1893:        Log(("VBoxTray: all targets already connected, nothing to do\n"));
VBox/Additions/WINNT/VBoxTray/VBoxSeamless.cpp:81:        Log(("VBoxTray: VBoxSeamlessInit: Windows NT 4.0 or older not supported!\n"));
VBox/Additions/WINNT/VBoxTray/VBoxSeamless.cpp:250:        Log(("VBoxTray: Filter out shadow window style=%x exstyle=%x\n", dwStyle, dwExStyle));
VBox/Additions/WINNT/VBoxTray/VBoxSeamless.cpp:251:        Log(("VBoxTray: Enum hwnd=%x rect (%d,%d) (%d,%d) (filtered)\n", hwnd, rectWindow.left, rectWindow.top, rectWindow.right, rectWindow.bottom));
VBox/Additions/WINNT/VBoxTray/VBoxSeamless.cpp:252:        Log(("VBoxTray: title=%s style=%x exStyle=%x\n", szWindowText, dwStyle, dwExStyle));
VBox/Additions/WINNT/VBoxTray/VBoxSeamless.cpp:259:        Log(("VBoxTray: Enum hwnd=%x rect (%d,%d)-(%d,%d) [%d x %d](applying)\n", hwnd,
VBox/Additions/WINNT/VBoxTray/VBoxSeamless.cpp:262:        Log(("VBoxTray: title=%s style=%x exStyle=%x\n", szWindowText, dwStyle, dwExStyle));
VBox/Additions/WINNT/VBoxTray/VBoxSeamless.cpp:270:            Log(("VBoxTray: GetWindowRgn failed with rc=%d, adding antire rect\n", GetLastError()));
VBox/Additions/WINNT/VBoxTray/VBoxSeamless.cpp:290:        Log(("VBoxTray: Enum hwnd=%x rect (%d,%d)-(%d,%d) [%d x %d](ignored)\n", hwnd,
VBox/Additions/WINNT/VBoxTray/VBoxSeamless.cpp:293:        Log(("VBoxTray: title=%s style=%x exStyle=%x\n", szWindowText, dwStyle, dwExStyle));
VBox/Additions/WINNT/VBoxTray/VBoxSeamless.cpp:334:                    Log(("VBoxTray: New visible region: \n"));
VBox/Additions/WINNT/VBoxTray/VBoxSeamless.cpp:336:                        Log(("VBoxTray: visible rect (%d,%d)(%d,%d)\n",
VBox/Additions/WINNT/VBoxTray/VBoxSeamless.cpp:355:                        Log(("VBoxTray: Visible rectangles haven't changed; ignore\n"));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:443:            Log(("Registering global message \"%s\" failed, error = %08X\n", dwErr));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:496:                   "Log opened %s\n",
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:530:            pfnLog(pLoggerRelease, "Log rotated - Log started %s\n", szTmp);
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:534:            pfnLog(pLoggerRelease, "Log continuation - Log started %s\n", szTmp);
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:538:            pfnLog(pLoggerRelease, "End of log file - Log started %s\n", szTmp);
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:599:        Log(("Destroying tool window ...\n"));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:625:        Log(("Registering invisible tool window failed, error = %08X\n", dwErr));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:643:            Log(("Creating invisible tool window failed, error = %08X\n", dwErr));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:650:            Log(("Invisible tool window handle = %p\n", g_hwndToolWindow));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:666:        Log(("Windows version %ld.%ld\n", info.dwMajorVersion, info.dwMinorVersion));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:684:        Log(("SetSecurityDescriptorDacl failed with last error = %08X\n", dwErr));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:694:            Log(("pfnConvertStringSecurityDescriptorToSecurityDescriptorA = %x\n", pfnConvertStringSecurityDescriptorToSecurityDescriptorA));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:707:                    Log(("ConvertStringSecurityDescriptorToSecurityDescriptorA failed with last error = %08X\n", dwErr));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:715:                        Log(("GetSecurityDescriptorSacl failed with last error = %08X\n", dwErr));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:723:                            Log(("SetSecurityDescriptorSacl failed with last error = %08X\n", dwErr));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:737:                Log(("CreateEvent for Seamless failed, last error = %08X\n", dwErr));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:744:                Log(("CreateEvent for Seamless failed, last error = %08X\n", dwErr));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:875:                    //Log(("Wait result  = %ld\n", waitResult));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:1593:    Log(("VBoxAcquireGuestCaps or(0x%x), not(0x%x), cfx(%d)\n", fOr, fNot, fCfg));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:1639:        Log(("vboxCapsOnEnableSeamless: ENABLED\n"));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:1646:        Log(("vboxCapsOnEnableSeamless: DISABLED\n"));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:1656:    Log(("vboxCapsEntryAcStateSet: new state enmAcState(%d); pCap: fCap(%d), iCap(%d), enmFuncState(%d), enmAcState(%d)\n",
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:1684:    Log(("vboxCapsEntryFuncStateSet: new state enmAcState(%d); pCap: fCap(%d), iCap(%d), enmFuncState(%d), enmAcState(%d)\n",
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:1732:    Log(("VBoxCapsReleaseAll\n"));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:1742:        Log(("killing console timer\n"));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:1839:    Log(("VBoxCapsEntryAcquire %d\n", iCap));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:1881:    Log(("VBoxCapsAcquireAllSupported\n"));
VBox/Additions/WINNT/VBoxTray/VBoxTray.cpp:1886:            Log(("VBoxCapsAcquireAllSupported acquiring cap %d, state %d\n", i, pConsole->aCaps[i].enmFuncState));
VBox/Additions/darwin/VBoxClient/VBoxClient.cpp:77:                       szLogFileName                    /* Log filename format string */
VBox/Debugger/DBGPlugInLinux.cpp:684:            Log(("dbgDiggerLinuxIDmsg_QueryKernelLog: Reading '%s' at %RGv: %Rrc\n", aSymbols[i].pszSymbol, Addr.FlatPtr, rc));
VBox/Debugger/DBGPlugInLinux.cpp:687:            Log(("dbgDiggerLinuxIDmsg_QueryKernelLog: Error looking up '%s': %Rrc\n", aSymbols[i].pszSymbol, rc));
VBox/Debugger/DBGPlugInLinux.cpp:710:        Log(("dbgDiggerLinuxIDmsg_QueryKernelLog: 'log_buf' value %RGv is not valid.\n", GCPtrLogBuf));
VBox/Debugger/DBGPlugInLinux.cpp:717:        Log(("dbgDiggerLinuxIDmsg_QueryKernelLog: 'log_buf_len' value %#x is not valid.\n", cbLogBuf));
VBox/Debugger/DBGPlugInLinux.cpp:727:        Log(("dbgDiggerLinuxIDmsg_QueryKernelLog: Failed to allocate %#x bytes for log buffer\n", cbLogBuf));
VBox/Debugger/DBGPlugInLinux.cpp:734:        Log(("dbgDiggerLinuxIDmsg_QueryKernelLog: Error reading %#x bytes of log buffer at %RGv: %Rrc\n",
VBox/Debugger/DBGPlugInLinux.cpp:802:            Log(("dbgDiggerLinuxIDmsg_QueryKernelLog: Reading '%s' at %RGv: %Rrc\n", aSymbols[i].pszSymbol, Addr.FlatPtr, rc));
VBox/Debugger/DBGPlugInLinux.cpp:805:            Log(("dbgDiggerLinuxIDmsg_QueryKernelLog: Error looking up '%s': %Rrc\n", aSymbols[i].pszSymbol, rc));
VBox/Debugger/DBGPlugInLinux.cpp:830:        Log(("dbgDiggerLinuxIDmsg_QueryKernelLog: 'log_buf' value %RGv is not valid.\n", GCPtrLogBuf));
VBox/Debugger/DBGPlugInLinux.cpp:837:        Log(("dbgDiggerLinuxIDmsg_QueryKernelLog: 'log_buf_len' value %#x is not valid.\n", cbLogBuf));
VBox/Debugger/DBGPlugInLinux.cpp:844:        Log(("dbgDiggerLinuxIDmsg_QueryKernelLog: 'log_first_idx' value %#x is not valid.\n", idxFirst));
VBox/Debugger/DBGPlugInLinux.cpp:850:        Log(("dbgDiggerLinuxIDmsg_QueryKernelLog: 'log_next_idx' value %#x is not valid.\n", idxNext));
VBox/Debugger/DBGPlugInLinux.cpp:860:        Log(("dbgDiggerLinuxIDmsg_QueryKernelLog: Failed to allocate %#x bytes for log buffer\n", cbLogBuf));
VBox/Debugger/DBGPlugInLinux.cpp:867:        Log(("dbgDiggerLinuxIDmsg_QueryKernelLog: Error reading %#x bytes of log buffer at %RGv: %Rrc\n",
VBox/Debugger/DBGPlugInLinux.cpp:898:            Log(("dbgDiggerLinuxIDmsg_QueryKernelLog: Invalid printk_log record at %#x: cbTotal=%#x cbText=%#x cbDict=%#x cbLogBuf=%#x cbLeft=%#x\n",
VBox/Debugger/DBGPlugInLinux.cpp:1190:    Log(("dbgDiggerLinuxFoundStartOfNames: AddrKernelAddresses=%RGv\n"
VBox/Debugger/DBGPlugInLinux.cpp:1308:                                Log(("dbgDiggerLinuxFindStartOfNamesAndSymbolCount: relative base %RGv (at %RGv)\n",
VBox/Debugger/DBGPlugInLinux.cpp:1345:                                Log(("dbgDiggerLinuxFindStartOfNamesAndSymbolCount: relative base %RGv (at %RGv)\n",
VBox/Debugger/DBGPlugInLinux.cpp:1370:            Log(("dbgDiggerLinuxFindStartOfNamesAndSymbolCount: failed (pHitAddr=%RGv)\n", pHitAddr->FlatPtr));
VBox/Debugger/DBGPlugInLinux.cpp:1396:    Log(("dbgDiggerLinuxFoundMarkers: AddrKernelNames=%RGv cbKernelNames=%#x\n"
VBox/Debugger/DBGPlugInLinux.cpp:1509:            Log(("dbgDiggerLinuxFindEndOfNamesAndMore: failed (pHitAddr=%RGv)\n", pHitAddr->FlatPtr));
VBox/Debugger/DBGPlugInLinux.cpp:1582:    Log(("dbgDiggerLinuxFindTokenIndex: Failed (%RGv..%RGv)\n", CurAddr.FlatPtr, CurAddr.FlatPtr + (RTGCUINTPTR)sizeof(uBuf)));
VBox/Debugger/DBGPlugInLinux.cpp:1679:                                            Log(("dbgDiggerLinuxLoadKernelSymbols: RTDbgModSymbolAdd(,%s,) failed %Rrc\n", szSymbol, rc));
VBox/Debugger/DBGPlugInLinux.cpp:1686:                                Log(("dbgDiggerLinuxLoadKernelSymbols: offName=%#x cLeft=%#x cbName=%#x cbKernelNames=%#x\n",
VBox/Debugger/DBGPlugInLinux.cpp:1693:                            Log(("dbgDiggerLinuxLoadKernelSymbols: offName=%#x cLeft=%#x cbKernelNames=%#x\n",
VBox/Debugger/DBGPlugInLinux.cpp:1711:                        Log(("dbgDiggerLinuxLoadKernelSymbols: Failed: %Rrc\n", rc));
VBox/Debugger/DBGPlugInLinux.cpp:1715:                    Log(("dbgDiggerLinuxLoadKernelSymbols: RTDbgModCreate failed: %Rrc\n", rc));
VBox/Debugger/DBGPlugInLinux.cpp:1718:                Log(("dbgDiggerLinuxLoadKernelSymbols: Reading token index at %RGv failed: %Rrc\n",
VBox/Debugger/DBGPlugInLinux.cpp:1723:            Log(("dbgDiggerLinuxLoadKernelSymbols: Reading token table at %RGv failed: %Rrc\n",
VBox/Debugger/DBGPlugInLinux.cpp:1728:        Log(("dbgDiggerLinuxLoadKernelSymbols: Reading encoded names at %RGv failed: %Rrc\n",
VBox/Debugger/DBGPlugInLinux.cpp:1799:        Log(("dbgDiggerLinuxLoadKernelSymbolsAbsolute: uKernelStart=%RGv cbKernel=%#x\n", uKernelStart, cbKernel));
VBox/Debugger/DBGPlugInLinux.cpp:1803:            Log(("dbgDiggerLinuxLoadKernelSymbolsAbsolute: Loading symbols from given offset table failed: %Rrc\n", rc));
VBox/Debugger/DBGPlugInLinux.cpp:1807:        Log(("dbgDiggerLinuxLoadKernelSymbolsAbsolute: Reading symbol addresses at %RGv failed: %Rrc\n",
VBox/Debugger/DBGPlugInLinux.cpp:1865:        Log(("dbgDiggerLinuxLoadKernelSymbolsRelative: uKernelStart=%RGv cbKernel=%#x\n", uKernelStart, cbKernel));
VBox/Debugger/DBGPlugInLinux.cpp:1869:            Log(("dbgDiggerLinuxLoadKernelSymbolsRelative: Loading symbols from given offset table failed: %Rrc\n", rc));
VBox/Debugger/DBGPlugInLinux.cpp:1873:        Log(("dbgDiggerLinuxLoadKernelSymbolsRelative: Reading symbol addresses at %RGv failed: %Rrc\n",
VBox/Debugger/DBGPlugInLinux.cpp:1942:            Log(("dbgDiggerLinuxIsLikelyNameFragment: failed at %RGv: bLead=%#x bTail=%#x (offTail=%#x)\n",
VBox/Debugger/DBGPlugInLinux.cpp:1946:            Log(("dbgDiggerLinuxIsLikelyNameFragment: failed at %RGv: Needle changed!\n", pHitAddr->FlatPtr));
VBox/Debugger/DBGPlugInLinux.cpp:1949:        Log(("dbgDiggerLinuxIsLikelyNameFragment: failed at %RGv: %Rrc\n", pHitAddr->FlatPtr, rc));
VBox/Debugger/DBGPlugInLinux.cpp:2012:            Log(("dbgDiggerLinuxInit: Failed to find kallsyms\n"));
VBox/Debugger/DBGCCommands.cpp:1754:    Log(("dbgcCmdHarakiri\n"));
VBox/Debugger/DBGCCommands.cpp:1766:    Log(("dbgcCmdWriteCore\n"));
VBox/Debugger/DBGPlugInDarwin.cpp:165:            Log(("dbgDiggerDarwinIDmsg_QueryKernelLog: failed to read _msgbufp at %RGv: %Rrc\n", Addr.FlatPtr, rc));
VBox/Debugger/DBGPlugInDarwin.cpp:170:            Log(("dbgDiggerDarwinIDmsg_QueryKernelLog: Invalid address for _msgbufp: %RGv\n", GCPtrMsgBufP));
VBox/Debugger/DBGPlugInDarwin.cpp:179:            Log(("dbgDiggerDarwinIDmsg_QueryKernelLog: failed to find _msgbufp and _msgbuf: %Rrc\n", rc));
VBox/Debugger/DBGPlugInDarwin.cpp:185:            Log(("dbgDiggerDarwinIDmsg_QueryKernelLog: Invalid address for _msgbuf: %RGv\n", GCPtrMsgBufP));
VBox/Debugger/DBGPlugInDarwin.cpp:205:        Log(("dbgDiggerDarwinIDmsg_QueryKernelLog: failed to read msgbuf struct at %RGv: %Rrc\n", Addr.FlatPtr, rc));
VBox/Debugger/DBGPlugInDarwin.cpp:221:        Log(("dbgDiggerDarwinIDmsg_QueryKernelLog: Invalid MsgBuf data: magic=%#x size=%#x bufx=%#x bufr=%#x bufc=%RGv\n",
VBox/Debugger/DBGPlugInDarwin.cpp:232:        Log(("dbgDiggerDarwinIDmsg_QueryKernelLog: Failed to allocate %#x bytes of memory for the log buffer\n",
VBox/Debugger/DBGPlugInDarwin.cpp:299:        Log(("dbgDiggerDarwinIDmsg_QueryKernelLog: Error reading %#x bytes at %RGv: %Rrc\n", MsgBuf.msg_size, MsgBuf.msg_bufc, rc));
VBox/Debugger/DBGPlugInDarwin.cpp:722:                        Log(("OSXDig: Invalid kmod_info pointer: %RGv\n", AddrModInfo.FlatPtr));
VBox/Debugger/DBGPlugInDarwin.cpp:727:                        Log(("OSXDig: kmod_info list looped back to the start.\n"));
VBox/Debugger/DBGPlugInDarwin.cpp:732:                        Log(("OSXDig: Too many mod_info loops (%u)\n", cIterations));
VBox/Debugger/DBGPlugInDarwin.cpp:749:                        Log(("OSXDig: Error reading kmod_info structure at %RGv: %Rrc\n", AddrModInfo.FlatPtr, rc));
VBox/Debugger/DBGPlugInDarwin.cpp:759:                        Log(("OSXDig: kmod_info @%RGv: Bad info_version %d\n", AddrModInfo.FlatPtr, iInfoVer));
VBox/Debugger/DBGPlugInDarwin.cpp:768:                        Log(("OSXDig: kmod_info @%RGv: Bad name '%.*s'\n", AddrModInfo.FlatPtr,
VBox/Debugger/DBGPlugInDarwin.cpp:777:                        Log(("OSXDig: kmod_info @%RGv: Bad version '%.*s'\n", AddrModInfo.FlatPtr,
VBox/Debugger/DBGPlugInDarwin.cpp:785:                        Log(("OSXDig: kmod_info @%RGv: Bad reference_count %d\n", AddrModInfo.FlatPtr, cRefs));
VBox/Debugger/DBGPlugInDarwin.cpp:792:                        Log(("OSXDig: kmod_info @%RGv: Bad address %#llx\n", AddrModInfo.FlatPtr, uImageAddr));
VBox/Debugger/DBGPlugInDarwin.cpp:799:                        Log(("OSXDig: kmod_info @%RGv: Bad size %#llx\n", AddrModInfo.FlatPtr, cbImage));
VBox/Debugger/DBGPlugInDarwin.cpp:806:                        Log(("OSXDig: kmod_info @%RGv: Bad hdr_size %#llx\n", AddrModInfo.FlatPtr, cbHdr));
VBox/Debugger/DBGPlugInDarwin.cpp:813:                        Log(("OSXDig: kmod_info @%RGv: Bad start function %#llx\n", AddrModInfo.FlatPtr, uStartAddr));
VBox/Debugger/DBGPlugInDarwin.cpp:820:                        Log(("OSXDig: kmod_info @%RGv: Bad stop function %#llx\n", AddrModInfo.FlatPtr, uStopAddr));
VBox/Debugger/DBGPlugInDarwin.cpp:827:                    Log(("OSXDig: kmod_info @%RGv: '%s' ver '%s', image @%#llx LB %#llx cbHdr=%#llx\n", AddrModInfo.FlatPtr,
VBox/Debugger/DBGPlugInDarwin.cpp:839:                Log(("OSXDig: Error reading the 'kmod' variable: %Rrc\n", rc));
VBox/Debugger/DBGPlugInDarwin.cpp:842:            Log(("OSXDig: Failed to locate the 'kmod' variable in mach_kernel.\n"));
VBox/Debugger/VBoxDbgStatsQt.cpp:1480:    Log(("updateCallbackHandleOutOfOrder: pszName='%s' m_szUpdateParent='%s' m_cchUpdateParent=%u pNode='%s'\n",
VBox/Debugger/VBoxDbgStatsQt.cpp:2073:        Log(("index: iRow=%d >= cChildren=%u (iColumn=%d)\n", iRow, (unsigned)pParent->cChildren, iColumn));
VBox/Debugger/VBoxDbgStatsQt.cpp:2078:        Log(("index: iColumn=%d (iRow=%d)\n", iColumn, iRow));
VBox/Debugger/VBoxDbgStatsQt.cpp:2092:        Log(("parent: invalid child\n"));
VBox/Debugger/VBoxDbgStatsQt.cpp:2753:    m_pToLogAct    = new QAction("To &Log", this);
VBox/Debugger/VBoxDbgStatsQt.cpp:2754:    m_pToRelLogAct = new QAction("T&o Release Log", this);
VBox/Debugger/DBGPlugInSolaris.cpp:848:                        Log(("sol64 mod_name=%.*s v11\n", sizeof(szUnix), szUnix));
VBox/Debugger/DBGPlugInSolaris.cpp:888:                        Log(("sol32 mod_name=%.*s v11\n", sizeof(szUnix), szUnix));
VBox/Debugger/DBGPlugInSolaris.cpp:928:                        Log(("sol64 mod_name=%.*s v9\n", sizeof(szUnix), szUnix));
VBox/Debugger/DBGPlugInSolaris.cpp:966:                        Log(("sol32 mod_name=%.*s v9\n", sizeof(szUnix), szUnix));
VBox/Debugger/DBGPlugInFreeBsd.cpp:268:                                Log(("dbgDiggerFreeBsdLoadSymbols: RTDbgModSymbolAdd(,%s,) failed %Rrc\n",
VBox/Debugger/DBGPlugInFreeBsd.cpp:287:                    Log(("dbgDiggerFreeBsdLoadSymbols: Failed: %Rrc\n", rc));
VBox/Debugger/DBGPlugInFreeBsd.cpp:291:                Log(("dbgDiggerFreeBsdLoadSymbols: RTDbgModCreate failed: %Rrc\n", rc));
VBox/Debugger/DBGPlugInFreeBsd.cpp:294:            Log(("dbgDiggerFreeBsdLoadSymbols: Reading symbol table at %RGv failed: %Rrc\n",
VBox/Debugger/DBGPlugInFreeBsd.cpp:299:        Log(("dbgDiggerFreeBsdLoadSymbols: Reading symbol string table at %RGv failed: %Rrc\n",
VBox/Debugger/DBGPlugInFreeBsd.cpp:467:            Log(("dbgDiggerFreeBsdIDmsg_QueryKernelLog: failed to read msgbufp at %RGv: %Rrc\n", AddrMsgBuf.FlatPtr, rc));
VBox/Debugger/DBGPlugInFreeBsd.cpp:472:            Log(("dbgDiggerFreeBsdIDmsg_QueryKernelLog: Invalid address for msgbufp: %RGv\n", GCPtrMsgBufP));
VBox/Debugger/DBGPlugInFreeBsd.cpp:497:                Log(("dbgDiggerFreeBsdIDmsg_QueryKernelLog: Invalid MsgBuf data: msg_magic=%#x msg_size=%#x msg_rseq=%#x msg_wseq=%#x msg_ptr=%RGv\n",
VBox/Debugger/DBGPlugInFreeBsd.cpp:508:                Log(("dbgDiggerFreeBsdIDmsg_QueryKernelLog: Failed to allocate %#x bytes of memory for the log buffer\n",
VBox/Debugger/DBGPlugInFreeBsd.cpp:575:                Log(("dbgDiggerFreeBsdIDmsg_QueryKernelLog: Error reading %#x bytes at %RGv: %Rrc\n", cbBuf, AddrBuf, rc));
VBox/Debugger/DBGCInternal.h:135:    /** Log indicator. (If set we're writing the log to the console.) */
VBox/Debugger/VBoxDbgConsole.cpp:593:    Log(("VBoxDbgConsole::commandSubmitted: %s (input-enabled=%RTbool)\n", psz, m_pInput->isEnabled()));
VBox/Debugger/VBoxDbgConsole.cpp:830:                Log(("VBoxDbgConsole: kInputEnable (input-enabled=%RTbool)\n", m_pInput->isEnabled()));
VBox/Debugger/VBoxDbgConsole.cpp:840:                Log(("VBoxDbgConsole: kTerminatedUser (input-enabled=%RTbool)\n", m_pInput->isEnabled()));
VBox/Debugger/VBoxDbgConsole.cpp:847:                Log(("VBoxDbgConsole: kTerminatedOther (input-enabled=%RTbool)\n", m_pInput->isEnabled()));
VBox/Debugger/DBGPlugInWinNt.cpp:416:            Log(("DigWinNt: Section header #%u has no name\n", i));
VBox/Debugger/DBGPlugInWinNt.cpp:429:            Log(("DigWinNt: Section header #%u has a VirtualSize=%#x and SizeOfRawData=%#x, that's too much data!\n",
VBox/Debugger/DBGPlugInWinNt.cpp:436:            Log(("DigWinNt: Section header #%u has a VirtualSize=%#x and VirtualAddr=%#x, %#x in total, that's too much!\n",
VBox/Debugger/DBGPlugInWinNt.cpp:449:            Log(("DigWinNt: Section header #%u has a virtual address range beyond the image: %#x TO %#x cbImage=%#x\n",
VBox/Debugger/DBGPlugInWinNt.cpp:555:        Log(("DigWinNT: The image is really %#x bytes long, not %#x as mapped by NT!\n", pRdr->cbCorrectImageSize, cbImage));
VBox/Debugger/DBGPlugInWinNt.cpp:603:        Log(("DigWinNt: %s: Bad image size: %#x\n", pszName, cbImage));
VBox/Debugger/DBGPlugInWinNt.cpp:620:        Log(("DigWinNt: %s: PE header to far into image: %#x  cbImage=%#x\n", pszName, pMzHdr->e_lfanew, cbImage));
VBox/Debugger/DBGPlugInWinNt.cpp:631:        Log(("DigWinNt: %s: PE header to far into image (lazy bird): %#x\n", pszName, pMzHdr->e_lfanew));
VBox/Debugger/DBGPlugInWinNt.cpp:636:        Log(("DigWinNt: %s: Bad PE signature: %#x\n", pszName, pHdrs->vX_32.Signature));
VBox/Debugger/DBGPlugInWinNt.cpp:643:        Log(("DigWinNt: %s: Invalid FH.Machine: %#x\n", pszName, pHdrs->vX_32.FileHeader.Machine));
VBox/Debugger/DBGPlugInWinNt.cpp:648:        Log(("DigWinNt: %s: Invalid FH.SizeOfOptionalHeader: %#x\n", pszName, pHdrs->vX_32.FileHeader.SizeOfOptionalHeader));
VBox/Debugger/DBGPlugInWinNt.cpp:653:        Log(("DigWinNt: %s: Too many sections: %#x\n", pszName, WINNT_UNION(pThis, pHdrs, FileHeader.NumberOfSections)));
VBox/Debugger/DBGPlugInWinNt.cpp:662:        Log(("DigWinNt: %s: Invalid OH.Magic: %#x\n", pszName, WINNT_UNION(pThis, pHdrs, OptionalHeader.Magic)));
VBox/Debugger/DBGPlugInWinNt.cpp:668:        Log(("DigWinNt: %s: Invalid OH.SizeOfImage: %#x, expected %#x\n", pszName, cbImageFromHdr, cbImage));
VBox/Debugger/DBGPlugInWinNt.cpp:673:        Log(("DigWinNt: %s: Invalid OH.NumberOfRvaAndSizes: %#x\n", pszName, WINNT_UNION(pThis, pHdrs, OptionalHeader.NumberOfRvaAndSizes)));
VBox/Debugger/DBGPlugInWinNt.cpp:846:            Log(("DigWinNt: Bad Mte At %RGv - backpointer\n", Addr.FlatPtr));
VBox/Debugger/DBGPlugInWinNt.cpp:851:            Log(("DigWinNt: Bad Mte at %RGv - forward pointer\n", Addr.FlatPtr));
VBox/Debugger/DBGPlugInWinNt.cpp:856:            Log(("DigWinNt: Bad Mte at %RGv - BaseDllName=%llx\n", Addr.FlatPtr, WINNT_UNION(pThis, &Mte, BaseDllName.Buffer)));
VBox/Debugger/DBGPlugInWinNt.cpp:861:            Log(("DigWinNt: Bad Mte at %RGv - FullDllName=%llx\n", Addr.FlatPtr, WINNT_UNION(pThis, &Mte, FullDllName.Buffer)));
VBox/Debugger/DBGPlugInWinNt.cpp:868:            Log(("DigWinNt: Bad Mte at %RGv - EntryPoint=%llx SizeOfImage=%x DllBase=%llx\n",
VBox/Debugger/DBGPlugInWinNt.cpp:1028:                                    Log(("DigWinNt: MteAddr=%RGv KernelAddr=%RGv SizeOfImage=%x &PsLoadedModuleList=%RGv (32-bit)\n",
VBox/Debugger/DBGPlugInWinNt.cpp:1113:                                    Log(("DigWinNt: MteAddr=%RGv KernelAddr=%RGv SizeOfImage=%x &PsLoadedModuleList=%RGv (32-bit)\n",
VBox/Debugger/VBoxDbgStatsQt.h:148:    /** To Log action. */
VBox/Debugger/VBoxDbgStatsQt.h:150:    /** To Release Log action. */
VBox/Debugger/DBGPlugInCommonELFTmpl.cpp.h:309:            Log(("%02x:%RGv %RGv %s!%s (rc=%Rrc)\n", paSyms[iSym].st_shndx, offSeg, cbSym, pszModName, pszSymbol, rc));
VBox/Frontends/VirtualBox/src/runtime/UIMachineLogic.cpp:2256:    /* Show VM Log Viewer: */
VBox/Frontends/VirtualBox/src/runtime/UIMachineLogic.cpp:2355://    /* Log statement (printf): */
VBox/Frontends/VirtualBox/src/runtime/UIMachineLogic.cpp:2386://    /* Log statement (printf): */
VBox/Frontends/VirtualBox/src/runtime/UIActionPoolRuntime.cpp:1939:        setName(QApplication::translate("UIActionPool", "Show &Log...", "debug action"));
VBox/Frontends/VirtualBox/src/runtime/UIActionPoolRuntime.cpp:3217:    /* 'Log Dialog' action: */
VBox/Frontends/VirtualBox/src/runtime/fullscreen/UIMachineWindowFullscreen.cpp:75:    /* Log all arrived notifications: */
VBox/Frontends/VirtualBox/src/runtime/UISession.cpp:248:    /* Log whether 2D video acceleration is enabled: */
VBox/Frontends/VirtualBox/src/runtime/UISession.cpp:254:/* Log whether HID LEDs sync is enabled: */
VBox/Frontends/VirtualBox/src/globals/VBoxGlobal.cpp:4486:        Log(("GUI: %#RX64 couldn't do SetFrontProcess on itself, the selector (we) had to do it...\n", id));
VBox/Frontends/VirtualBox/src/globals/VBoxGlobal.cpp:4488:        Log(("GUI: Failed to bring %#RX64 to front. rc=%#x\n", id, rc));
VBox/Frontends/VirtualBox/src/globals/UIMessageCenter.cpp:1878:                             "Note that you can also access the above files by selecting <b>Show Log</b> "
VBox/Frontends/VirtualBox/src/globals/UIMessageCenter.cpp:1904:             "Note that you can also access the above file by selecting <b>Show Log</b> "
VBox/Frontends/VirtualBox/src/extradata/UIExtraDataDefs.cpp:201:/* Virtual Machine: Log dialog: */
VBox/Frontends/VirtualBox/src/extradata/UIExtraDataManager.h:665:    /** @name Virtual Machine: Log dialog
VBox/Frontends/VirtualBox/src/extradata/UIExtraDataDefs.h:360:    /** @name Virtual Machine: Log dialog
VBox/Frontends/VirtualBox/src/selector/UISelectorWindow.cpp:1020:        /* Show VM Log Viewer: */
VBox/Frontends/VirtualBox/src/selector/UIVMItem.cpp:358:        Log(("GUI: %#RX64 couldn't do SetFrontProcess on itself, the selector (we) had to do it...\n", id));
VBox/Frontends/VirtualBox/src/selector/UIVMItem.cpp:360:        Log(("GUI: Failed to bring %#RX64 to front. rc=%#x\n", id, rc));
VBox/Frontends/VirtualBox/src/selector/UISelectorWindow.h:176:        /** Handles call to open machine Log dialog. */
VBox/Frontends/VirtualBox/src/selector/UIActionPoolSelector.cpp:817:        setName(QApplication::translate("UIActionPool", "Show &Log..."));
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:56:  * providing GUI for search-panel in VM Log-Viewer. */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:64:      * @param  pViewer  Specifies instance of VM Log-Viewer. */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:486:    /** Holds the reference to the VM Log-Viewer this search-panel belongs to. */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:512:  * providing GUI for filter panel in VM Log Viewer. */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:520:      * @param  pViewer  Specifies reference to the VM Log-Viewer this filter-panel belongs to. */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:723:    /** Holds the reference to VM Log-Viewer this filter-panel belongs to. */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:742:/** Holds the VM Log-Viewer array. */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:747:    /* If there is no corresponding VM Log-Viewer created: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:750:        /* Create new VM Log-Viewer: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:754:            /* Configure VM Log-Viewer: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:760:    /* Show VM Log Viewer: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:773:    /* Prepare VM Log-Viewer: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:779:    /* Cleanup VM Log-Viewer: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:904:                                                                 tr("Save VirtualBox Log As"),
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:951:    /* Create VM Log-Viewer container: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:955:        /* Add VM Log-Viewer container to main-layout: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:959:    /* Create VM Log-Viewer search-panel: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:963:        /* Configure VM Log-Viewer search-panel: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:966:        /* Add VM Log-Viewer search-panel to main-layout: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:970:    /* Create VM Log-Viewer filter-panel: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:974:        /* Configure VM Log-Viewer filter-panel: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:977:        /* Add VM Log-Viewer filter-panel to main-layout: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:1077:        setWindowTitle(tr("%1 - VirtualBox Log Viewer").arg(m_machine.GetName()));
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:1113:        /* Process key escape as VM Log Viewer close: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:1169:        /* Create Log-Viewer: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:1173:            /* Configure Log-Viewer: */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.cpp:1185:            /* Add Log-Viewer to page-layout: */
VBox/Frontends/VirtualBox/src/VBoxFBOverlay.cpp:4254:    Log(("VHWA Command >>> %#p, %d\n", pCmd, enmCmd));
VBox/Frontends/VirtualBox/src/VBoxFBOverlay.cpp:4267:            Log(("VHWA Command <<< Sync %#p, %d\n", pCmd, enmCmd));
VBox/Frontends/VirtualBox/src/VBoxFBOverlay.cpp:4278:            Log(("VHWA Command <<< Sync %#p, %d\n", pCmd, enmCmd));
VBox/Frontends/VirtualBox/src/VBoxFBOverlay.cpp:4286:            Log(("VHWA Command <<< Sync %#p, %d\n", pCmd, enmCmd));
VBox/Frontends/VirtualBox/src/VBoxFBOverlay.cpp:4293:            Log(("VHWA Command <<< Sync %#p, %d\n", pCmd, enmCmd));
VBox/Frontends/VirtualBox/src/VBoxFBOverlay.cpp:4301:            Log(("VHWA Command <<< Sync %#p, %d\n", pCmd, enmCmd));
VBox/Frontends/VirtualBox/src/VBoxFBOverlay.cpp:4309:            Log(("VHWA Command <<< Sync %#p, %d\n", pCmd, enmCmd));
VBox/Frontends/VirtualBox/src/VBoxFBOverlay.cpp:4322:            Log(("VHWA Command <<< Sync %#p, %d\n", pCmd, enmCmd));
VBox/Frontends/VirtualBox/src/VBoxFBOverlay.cpp:4347:            Log(("VHWA Command <<< Sync %#p, %d\n", pCmd, enmCmd));
VBox/Frontends/VirtualBox/src/VBoxFBOverlay.cpp:4367:    Log(("VHWA Command --- Going Async %#p, %d\n", pCmd, enmCmd));
VBox/Frontends/VirtualBox/src/VBoxFBOverlay.cpp:4504:    Log(("VHWA Command <<< Async %#p, %d\n", pvCmd, enmCmd));
VBox/Frontends/VirtualBox/src/VBoxFBOverlay.cpp:5047:    Log(("VHWA post %d %#p\n", aType, pvData));
VBox/Frontends/VirtualBox/src/VBoxFBOverlay.cpp:5240:                    Log(("VHWA Command <<< Async RESET %#p, %d\n", pCmd, pCmd->enmCmd));
VBox/Frontends/VirtualBox/src/main.cpp:188:        Log(("GUI: Got signal %d, faulty address is %p, from %p\n",
VBox/Frontends/VirtualBox/src/main.cpp:192:        Log(("GUI: Got signal %d\n", sig));
VBox/Frontends/VirtualBox/src/main.cpp:204:    Log(("GUI: [bt] Execution path:\n"));
VBox/Frontends/VirtualBox/src/main.cpp:206:        Log(("GUI: [bt] %s\n", messages[i]));
VBox/Frontends/VirtualBox/src/main.cpp:239:            Log(("Qt DEBUG: %s\n", strMessage.toUtf8().constData()));
VBox/Frontends/VirtualBox/src/main.cpp:242:            Log(("Qt WARNING: %s\n", strMessage.toUtf8().constData()));
VBox/Frontends/VirtualBox/src/main.cpp:249:            Log(("Qt CRITICAL: %s\n", strMessage.toUtf8().constData()));
VBox/Frontends/VirtualBox/src/main.cpp:256:            Log(("Qt FATAL: %s\n", strMessage.toUtf8().constData()));
VBox/Frontends/VirtualBox/src/net/tstSSLCertDownloads.cpp:130:    /* Log how many certificates we found and require at least one. */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.h:58:    /** Static method to create/show VM Log Viewer by passing @a pParent to QWidget base-class constructor.
VBox/Frontends/VirtualBox/src/UIVMLogViewer.h:59:      * @param  machine  Specifies the machine for which VM Log-Viewer is requested. */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.h:64:    /** Constructs the VM Log-Viewer by passing @a pParent to QWidget base-class constructor.
VBox/Frontends/VirtualBox/src/UIVMLogViewer.h:66:      * @param  machine  Specifies the machine for which VM Log-Viewer is requested. */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.h:68:    /** Destructs the VM Log-Viewer. */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.h:91:        /** Prepares VM Log-Viewer. */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.h:102:        /** Cleanups VM Log-Viewer. */
VBox/Frontends/VirtualBox/src/UIVMLogViewer.h:124:    /** Holds the list of all VM Log Viewers. */
VBox/Frontends/VirtualBox/src/precomp_vcc.h:154:#if defined(Log) || defined(LogIsEnabled)
VBox/Frontends/VirtualBox/src/precomp_vcc.h:155:# error "Log() from iprt/log.h cannot be defined in the precompiled header!"
VBox/Frontends/VirtualBox/nls/VirtualBox_ja.ts:738:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ja.ts:1173:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ja.ts:10936:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ja.ts:11385:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ja.ts:12128:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ja.ts:12132:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ja.ts:14500:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ja.ts:14504:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ja.ts:20092:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ja.ts:20096:        <source>Show Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ja.ts:20243:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ja.ts:20953:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ja.ts:20965:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ja.ts:20973:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:545:        <translation type="obsolete">Opções de &amp;Log...</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:785:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:786:        <translation>Exibir &amp;Log...</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:1261:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:1263:        <translation>Exibir &amp;Log...</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:1340:        <translation>Opções de &amp;Log</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:11102:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:11103:        <translation type="obsolete">&lt;p&gt;Um erro crítico ocorreu enquanto a máquina virtual estava em execução e por isto a execução foi interrompida.&lt;/p&gt;&lt;p&gt;Para ajuda, consulte a seção Comunidade no endereço &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; ou utilize os recursos disponibilizados por seu contrato de suporte. Por favor forneça o conteúdo do arquivo de log &lt;tt&gt;VBox.log&lt;/tt&gt; e o arquivo de imagem &lt;tt&gt;VBox.png&lt;/tt&gt;, os quais você pode encontrar no diretório &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt;, assim como uma descrição do que você estava fazendo no momento que este erro ocorreu. Você também pode acessar os arquivos acima selecionando a opção &lt;b&gt;Mostrar Log&lt;/b&gt; do menu &lt;b&gt;Máquina&lt;/b&gt; na janela principal do VirtualBox.&lt;/p&gt;&lt;p&gt;Pressione &lt;b&gt;OK&lt;/b&gt; se você deseja desligar a máquina virtual ou pressione &lt;b&gt;Ignorar&lt;/b&gt; se você deseja deixá-la no estado atual para depuração. Note que para depurar este problema são necessários conhecimentos específicos e ferramentas especiais, então recomendamos que você pressione &lt;b&gt;OK&lt;/b&gt; agora.&lt;/p&gt;</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:11515:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:11516:        <translation type="obsolete">&lt;p&gt;Um erro crítico ocorreu enquanto a máquina virtual estava em execução e por isto a execução foi interrompida.&lt;/p&gt;&lt;p&gt;Para ajuda, consulte a seção Comunidade no endereço &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; ou utilize os recursos disponibilizados por seu contrato de suporte. Por favor forneça o conteúdo do arquivo de log &lt;tt&gt;VBox.log&lt;/tt&gt; e o arquivo de imagem &lt;tt&gt;VBox.png&lt;/tt&gt;, os quais você pode encontrar no diretório &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt;, assim como uma descrição do que você estava fazendo no momento que este erro ocorreu. Você também pode acessar os arquivos acima selecionando a opção &lt;b&gt;Exibir Log&lt;/b&gt; do menu &lt;b&gt;Máquina&lt;/b&gt; na janela principal do VirtualBox.&lt;/p&gt;&lt;p&gt;Pressione &lt;b&gt;OK&lt;/b&gt; se você deseja desligar a máquina virtual ou pressione &lt;b&gt;Ignorar&lt;/b&gt; se você deseja deixá-la no estado atual para depuração. Note que para depurar este problema são necessários conhecimentos específicos e ferramentas especiais, então recomendamos que você pressione &lt;b&gt;OK&lt;/b&gt; agora.&lt;/p&gt;</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:12605:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:12606:        <translation type="obsolete">&lt;p&gt;Um erro crítico ocorreu durante a execução da máquina virtual e sua execução deve ser interrompida.&lt;/p&gt;&lt;p&gt;Para ajuda, consulte a seção Comunidade em &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; ou o seu contrato de suporte. Forneça o conteúdo do arquivo de log &lt;tt&gt;VBox.log&lt;/tt&gt;, que pode ser encontrado no diretório da máquina virtual, assim como uma descrição do que você estava fazendo quando este erro ocorreu. Você também pode visualizar o arquivo acima selecionando a opção &lt;b&gt;Exibir Log&lt;/b&gt; do menu &lt;b&gt;Máquina&lt;/b&gt; na janela principal do VirtualBox.&lt;/p&gt;&lt;p&gt;Pressione &lt;b&gt;OK&lt;/b&gt; para desligar esta máquina virtual.&lt;/p&gt;</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:12633:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:12634:        <translation>&lt;p&gt;Um erro crítico ocorreu enquanto a máquina virtual estava em execução e por isto a execução foi interrompida.&lt;/p&gt;&lt;p&gt;Para ajuda, consulte a seção Comunidade no endereço &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; ou utilize os recursos disponibilizados por seu contrato de suporte. Por favor forneça o conteúdo do arquivo de log &lt;tt&gt;VBox.log&lt;/tt&gt; e o arquivo de imagem &lt;tt&gt;VBox.png&lt;/tt&gt;, os quais você pode encontrar no diretório &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt;, assim como uma descrição do que você estava fazendo no momento que este erro ocorreu. Você também pode acessar os arquivos acima selecionando a opção &lt;b&gt;Exibir Log&lt;/b&gt; do menu &lt;b&gt;Máquina&lt;/b&gt; na janela principal do VirtualBox.&lt;/p&gt;&lt;p&gt;Pressione &lt;b&gt;OK&lt;/b&gt; se você deseja desligar a máquina virtual ou pressione &lt;b&gt;Ignorar&lt;/b&gt; se você deseja deixá-la no estado atual para depuração. Note que para depurar este problema são necessários conhecimentos específicos e ferramentas especiais, então recomendamos que você pressione &lt;b&gt;OK&lt;/b&gt; agora.&lt;/p&gt;</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:12637:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:12638:        <translation>&lt;p&gt;Um erro crítico ocorreu durante a execução da máquina virtual e sua execução deve ser interrompida.&lt;/p&gt;&lt;p&gt;Para ajuda, consulte a seção Comunidade em &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; ou o seu contrato de suporte. Forneça o conteúdo do arquivo de log &lt;tt&gt;VBox.log&lt;/tt&gt;, que pode ser encontrado no diretório da máquina virtual, assim como uma descrição do que você estava fazendo quando este erro ocorreu. Você também pode visualizar o arquivo acima selecionando a opção &lt;b&gt;Exibir Log&lt;/b&gt; do menu &lt;b&gt;Máquina&lt;/b&gt; na janela principal do VirtualBox.&lt;/p&gt;&lt;p&gt;Pressione &lt;b&gt;OK&lt;/b&gt; para desligar esta máquina virtual.&lt;/p&gt;</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:15282:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:15283:        <translation type="obsolete">Visualizador de Log</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:15310:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:15311:        <translation>%1 - Visualizador de Log do VirtualBox</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:15318:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:15319:        <translation>Salvar Log do VirtualBox Como</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:17136:        <translation type="obsolete">Opções de &amp;Log...</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:21220:        <source>Show Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:21221:        <translation type="obsolete">Exibir Log...</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:21268:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:21270:        <translation type="obsolete">Log</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:21391:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:21392:        <translation type="obsolete">Exibir &amp;Log...</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:22224:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:22225:        <translation type="obsolete">Visualizador de Log</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:22232:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:22233:        <translation type="obsolete">Salvar Log do VirtualBox Como</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:22236:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt_BR.ts:22237:        <translation type="obsolete">%1 - Visualizador de Log do VirtualBox</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_sl.ts:538:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sl.ts:701:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sl.ts:8916:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sl.ts:8921:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sl.ts:10367:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sl.ts:10372:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fa.ts:636:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fa.ts:1074:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fa.ts:8394:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fa.ts:9343:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fa.ts:10694:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fa.ts:10698:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_xx_YY.ts:374:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_xx_YY.ts:502:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_xx_YY.ts:6297:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_xx_YY.ts:6301:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_xx_YY.ts:7508:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_xx_YY.ts:7512:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/qt_lt.ts:6451:        <source>Clear Error Log</source>
VBox/Frontends/VirtualBox/nls/qt_lt.ts:6590:        <source>Error Log</source>
VBox/Frontends/VirtualBox/nls/qt_sv.ts:7070:        <source>Clear Error Log</source>
VBox/Frontends/VirtualBox/nls/qt_sv.ts:7209:        <source>Error Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_bg.ts:841:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_bg.ts:1113:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_bg.ts:10721:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_bg.ts:11787:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_bg.ts:11827:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_bg.ts:11831:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_bg.ts:14162:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_bg.ts:14166:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_bg.ts:18589:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_bg.ts:18625:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_bg.ts:19105:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_bg.ts:19117:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_bg.ts:19125:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_el.ts:438:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_el.ts:566:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_el.ts:7127:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_el.ts:7131:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_el.ts:8464:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_el.ts:8468:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_cs.ts:674:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_cs.ts:1321:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_cs.ts:10462:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_cs.ts:10952:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_cs.ts:11960:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_cs.ts:14386:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_cs.ts:14402:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_cs.ts:14410:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_cs.ts:19744:        <source>Show Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_cs.ts:19776:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_cs.ts:19778:        <translation type="obsolete">Log</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_cs.ts:19887:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_cs.ts:20761:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_cs.ts:20769:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_cs.ts:20773:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/qt_it.ts:3453:        <translation>Log su %1 non riuscito: richiesta autenticazione</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pl.ts:781:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pl.ts:1103:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pl.ts:9544:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pl.ts:9953:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pl.ts:10880:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pl.ts:13055:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pl.ts:13059:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pl.ts:18440:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pl.ts:18444:        <source>Show Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pl.ts:18500:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pl.ts:18502:        <translation type="obsolete">Log</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pl.ts:19405:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pl.ts:19433:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pl.ts:19441:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_gl.ts:656:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_gl.ts:977:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_gl.ts:8740:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_gl.ts:9514:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_gl.ts:11368:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_gl.ts:11372:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_gl.ts:14915:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_gl.ts:14951:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_gl.ts:15360:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_gl.ts:15372:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_gl.ts:15380:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:522:        <translation type="obsolete">Pencatatan &amp;Log...</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:821:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:822:        <translation>Tampilkan &amp;Log...</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:1227:        <translation>Pencatatan &amp;Log</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:1230:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:1232:        <translation>Tampilkan &amp;Log...</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:9745:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:9746:        <translation type="obsolete">&lt;p&gt;Kesalahan kritikal telah terjadi saat menjalankan mesin virtual dan eksekusi mesin telah dihentikan.&lt;/p&gt;&lt;p&gt;Untuk bantuan, silahkan kunjungi bagian Community (Komunitas) &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; atau kontrak pendukung anda. Mohon sediakan isi dari file log file &lt;tt&gt;VBox.log&lt;/tt&gt; dan file image &lt;tt&gt;VBox.png&lt;/tt&gt;, yang dapat Anda temukan pada direktori &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt;, demikian juga dengan deskripsi tentang apa yang Anda lakukan saat kesalahan ini terjadi. Perhatikan bahwa Anda juga dapat mengakses file diatas dengan memilih &lt;b&gt;Tampilkan Log&lt;/b&gt; dari menu &lt;b&gt;Mesin&lt;/b&gt; dalam jendela utama VirtualBox.&lt;/p&gt;&lt;p&gt;Tekan &lt;b&gt;Baik&lt;/b&gt; bila Anda ingin mematikan mesin atau tekan &lt;b&gt;Abaikan&lt;/b&gt; bila Anda ingin membiarkannya untuk debugging. Mohon perhatikan bahwa debugging membutuhkan pengetahuan dan alat khusus, sehingga dianjurkan untuk menekan &lt;b&gt;Baik&lt;/b&gt; sekarang.&lt;/p&gt;</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:10108:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:10109:        <translation>&lt;p&gt;Kesalahan kritikal telah terjadi saat menjalankan mesin virtual dan eksekusi mesin telah dihentikan.&lt;/p&gt;&lt;p&gt;Untuk bantuan, silakan kunjungi bagian Community pada &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; atau kontrak pendukung Anda. Mohon sediakan isi dari file log &lt;tt&gt;VBox.log&lt;/tt&gt; dan file image &lt;tt&gt;VBox.png&lt;/tt&gt;, yang dapat Anda temukan pada direktori &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt;, demikian juga dengan deskripsi tentang apa yang Anda lakukan saat kesalahan ini terjadi. Perhatikan bahwa Anda juga dapat mengakses file di atas dengan memilih &lt;b&gt;Tampilkan Log&lt;/b&gt; dari menu &lt;b&gt;Mesin&lt;/b&gt; dalam jendela utama VirtualBox.&lt;/p&gt;&lt;p&gt;Tekan &lt;b&gt;OK&lt;/b&gt; bila Anda ingin mematikan mesin atau tekan &lt;b&gt;Abaikan&lt;/b&gt; bila Anda ingin membiarkannya untuk debugging. Mohon perhatikan bahwa debugging membutuhkan pengetahuan dan alat khusus, sehingga dianjurkan untuk menekan &lt;b&gt;OK&lt;/b&gt; sekarang.&lt;/p&gt;</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:11120:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:11121:        <translation>&lt;p&gt;Telah terjadi suatu kesalahan kritis ketika menjalankan mesin virtual dan eksekusi mesin mesti dihentikan.&lt;/p&gt;&lt;p&gt;Untuk bantuan, harap lihat seksi Komunitas pada &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; atau kontrak dukungan Anda. Harap berikan isi berkas log &lt;tt&gt;VBox.log&lt;/tt&gt;, yang dapat Anda temukan dalam direktori log mesin virtual, maupun deskripsi tentang apa yang Anda lakukan ketika kesalahan terjadi. Perhatikan bahwa Anda juga dapat mengakses berkas di atas dengan memilih &lt;b&gt;Tampilkan Log&lt;/b&gt; dari menu &lt;b&gt;Mesin&lt;/b&gt; dari jendela utama VirtualBox.&lt;/p&gt;&lt;p&gt;Tekan &lt;b&gt;OK&lt;/b&gt; untuk mematikan daya mesin.&lt;/p&gt;</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:13270:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:13271:        <translation>Simpan Log VirtualBox Sebagai</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:13274:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:13275:        <translation>%1 -Penilik Log VirtualBox</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:14899:        <translation type="obsolete">Pencatatan &amp;Log...</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:18581:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:18582:        <translation type="obsolete">Tampilkan &amp;Log...</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:18585:        <source>Show Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:18586:        <translation type="obsolete">Tampilkan Log...</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:18645:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:18647:        <translation type="obsolete">Log</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:19571:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:19572:        <translation type="obsolete">Viewer Log</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:19583:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:19584:        <translation type="obsolete">%1 -Viewer Log VirtualBox</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:19591:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_id.ts:19592:        <translation type="obsolete">Simpan Log VirtualBox Sebagai</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:791:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:1354:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:11353:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:12040:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:12779:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:12783:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:15256:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:15284:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:15285:        <translation>%1 - Visualizzatore Log di VirtualBox</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:15292:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:21060:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:21092:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:21350:        <source>Show Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:22371:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:22383:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_it.ts:22391:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_lt.ts:707:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_lt.ts:1144:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_lt.ts:9391:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_lt.ts:10544:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_lt.ts:12501:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_lt.ts:12513:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_lt.ts:12521:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_lt.ts:17320:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_lt.ts:17351:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_lt.ts:17457:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_lt.ts:17962:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_lt.ts:17970:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_lt.ts:17974:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sv.ts:752:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sv.ts:1303:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sv.ts:10431:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sv.ts:10844:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sv.ts:11962:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sv.ts:14338:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sv.ts:14350:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sv.ts:14358:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sv.ts:18996:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sv.ts:19119:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sv.ts:19627:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sv.ts:19635:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sv.ts:19639:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/qt_gl.ts:7343:        <source>Clear Error Log</source>
VBox/Frontends/VirtualBox/nls/qt_gl.ts:7482:        <source>Error Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca.ts:374:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca.ts:502:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca.ts:6382:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca.ts:6386:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca.ts:7594:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca.ts:7598:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_TW.ts:374:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_TW.ts:502:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_TW.ts:6337:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_TW.ts:6341:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_TW.ts:7548:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_TW.ts:7552:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_eu.ts:614:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_eu.ts:1510:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_eu.ts:9784:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_eu.ts:10221:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_eu.ts:12311:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_eu.ts:12316:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_tr.ts:801:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_tr.ts:1081:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_tr.ts:10081:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_tr.ts:11035:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_tr.ts:11075:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_tr.ts:11079:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_tr.ts:13232:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_tr.ts:13236:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_tr.ts:18480:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_tr.ts:18484:        <source>Show Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_tr.ts:18544:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_tr.ts:19199:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_tr.ts:19211:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_tr.ts:19219:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ru.ts:849:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ru.ts:1085:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ru.ts:10808:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ru.ts:11877:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ru.ts:11881:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ru.ts:14174:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ru.ts:14178:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ru.ts:18714:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ru.ts:18750:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ru.ts:19223:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ru.ts:19235:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ru.ts:19243:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_CN.ts:711:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_CN.ts:985:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_CN.ts:9590:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_CN.ts:10537:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_CN.ts:10577:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_CN.ts:10582:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_CN.ts:12373:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_CN.ts:12377:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_CN.ts:15697:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_CN.ts:15842:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_CN.ts:16101:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_CN.ts:16113:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_zh_CN.ts:16121:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sr.ts:756:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sr.ts:1072:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sr.ts:9820:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sr.ts:10829:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sr.ts:13013:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sr.ts:13017:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sr.ts:17123:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sr.ts:17159:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sr.ts:17731:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sr.ts:17743:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sr.ts:17751:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_de.ts:413:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_de.ts:414:        <translation>Zeige &amp;Log...</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_de.ts:541:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_de.ts:543:        <translation>Zeige &amp;Log...</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_de.ts:869:        <translation>Zeigt die Log-Dateien der ausgewählten virtuellen Maschinen</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_de.ts:7147:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_de.ts:7148:        <translation>&lt;p&gt;Ein schwerwiegender Fehler ist aufgetreten, und die Ausführung der virtuellen Maschine wurde unterbrochen.&lt;/p&gt;&lt;p&gt;Zusätzliche Informationen zu diesem Fehler suchen Sie bitte in der Community-Sektion auf &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; bzw. handeln Sie gemäß Ihres Supportvertrages. Bitte geben Sie die Logdatei &lt;tt&gt;VBox.log&lt;/tt&gt;, den Screenshot &lt;tt&gt;VBox.png&lt;/tt&gt;, den Sie im Verzeichnis &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; finden können, sowie eine Beschreibung der Maßnahmen, die zu diesem Fehler führten, weiter. Sie können diese Dateien auch durch Auswahl von &lt;b&gt;Zeige Log...&lt;/b&gt; im Menü &lt;b&gt;Maschine&lt;/b&gt; des Hauptfensters finden.&lt;/p&gt;&lt;p&gt;Wählen Sie &lt;b&gt;OK&lt;/b&gt;, wenn Sie die virtuelle Maschine beenden wollen. Wählen Sie &lt;b&gt;Ignorieren&lt;/b&gt;, wenn Sie diese für Debugging offen lassen wollen. Zum Debuggen sind spezielle Kenntnisse und Tools notwendig, so dass die empfohlene Aktion hier &lt;b&gt;OK&lt;/b&gt; ist.&lt;/p&gt;</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_de.ts:7151:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_de.ts:7152:        <translation>&lt;p&gt;Ein schwerwiegender Fehler ist aufgetreten, und die Ausführung der virtuellen Maschine wurde unterbrochen.&lt;/p&gt;&lt;p&gt;Zusätzliche Informationen zu diesem Fehler suchen Sie bitte in der Community-Sektion auf &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; bzw. handeln Sie gemäß Ihres Supportvertrages. Bitte geben Sie die Logdatei &lt;tt&gt;VBox.log&lt;/tt&gt; sowie eine Beschreibung der Maßnahmen, die zu diesem Fehler führten, weiter. Sie können diese Dateien auch durch Auswahl von &lt;b&gt;Zeige Log...&lt;/b&gt; im Menü &lt;b&gt;Maschine&lt;/b&gt; des Hauptfensters finden.&lt;/p&gt;&lt;p&gt;Wählen Sie &lt;b&gt;OK&lt;/b&gt;, um die virtuelle Maschine zu beenden.&lt;/p&gt;</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_de.ts:8521:        <translation>&lt;p&gt;Keine Log-Dateien gefunden. Klicken Sie auf &lt;b&gt;Aktualisieren&lt;/b&gt;, um erneut im Ordner &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; zu suchen.&lt;/p&gt;</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_de.ts:8524:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_de.ts:8525:        <translation>VirtualBox Log-Datei sichern als</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_de.ts:8528:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_de.ts:8529:        <translation>%1 - VirtualBox Log-Anzeige</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_nl.ts:443:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_nl.ts:444:        <translation>&amp;Log tonen...</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_nl.ts:568:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_nl.ts:7105:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_nl.ts:7106:        <translation>&lt;p&gt;Een fatale fout is opgetreden terwijl de virtuele machine draaide. De machine is gestopt.&lt;/p&gt;&lt;p&gt;Kijk voor ondersteuning op de community sectie van &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; of raadpleeg uw eigen ondersteuningscontact. Stel alstublieft de inhoud van het logbestand &lt;tt&gt;VBox.log&lt;/tt&gt; en het imagebestand &lt;tt&gt;VBox.png&lt;/tt&gt; ter beschikking. Deze kunt u terugvinden in de &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; map, en geef daarbij een beschrijving van wat u deed op het moment dat de fout optrad. Let op: u kunt genoemde bestanden ook benaderen via &lt;b&gt;Toon Log&lt;/b&gt; in het &lt;b&gt;Machine&lt;/b&gt; menu van het hoofdvenster van VirtualBox.&lt;/p&gt;&lt;p&gt;Klik op &lt;b&gt;OK&lt;/b&gt; als u de machine wilt uitzetten of klik op &lt;b&gt;Negeren&lt;/b&gt; als u alles zo wilt laten staan voor nader onderzoek. Let nogmaals op: nader onderzoek vereist specifieke kennis en hulpmiddelen, het wordt aangeraden om op &lt;b&gt;OK&lt;/b&gt; te klikken.&lt;/p&gt;</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_nl.ts:7109:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_nl.ts:7110:        <translation>&lt;p&gt;Een fatale fout is opgetreden terwijl de virtuele machine draaide. De machine is gestopt.&lt;/p&gt;&lt;p&gt;Kijk voor ondersteuning op de community sectie van &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; of raadpleeg uw eigen ondersteuningscontact. Stel alstublieft de inhoud van het logbestand &lt;tt&gt;VBox.log&lt;/tt&gt; en het imagebestand &lt;tt&gt;VBox.png&lt;/tt&gt; ter beschikking. Deze kunt u terugvinden in de virtuele machine logmap, en geef daarbij een beschrijving van wat u deed op het moment dat de fout optrad. Let op: u kunt genoemde bestanden ook benaderen via &lt;b&gt;Toon Log&lt;/b&gt; in het &lt;b&gt;Machine&lt;/b&gt; menu van het hoofdvenster van VirtualBox.&lt;/p&gt;&lt;p&gt;Klik op &lt;b&gt;OK&lt;/b&gt; om de machine uit te zetten.&lt;/p&gt;</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_nl.ts:8443:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_nl.ts:8444:        <translation>Sla VirtualBox-Log op als</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_nl.ts:8447:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_nl.ts:8448:        <translation>%1 - VirtualBox-Log Viewer</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt.ts:795:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt.ts:1116:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt.ts:8923:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt.ts:9288:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt.ts:10047:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt.ts:12135:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt.ts:12139:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt.ts:17278:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt.ts:17282:        <source>Show Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt.ts:17342:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt.ts:18350:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt.ts:18366:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_pt.ts:18374:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/qt_hu.ts:7798:        <source>Clear Error Log</source>
VBox/Frontends/VirtualBox/nls/qt_hu.ts:7921:        <source>Error Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fr.ts:690:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fr.ts:1242:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fr.ts:9695:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fr.ts:10759:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fr.ts:12672:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fr.ts:12684:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fr.ts:12692:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fr.ts:16295:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fr.ts:16406:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fr.ts:16863:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fr.ts:16871:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fr.ts:16875:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sk.ts:748:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sk.ts:1069:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sk.ts:9048:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sk.ts:9794:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sk.ts:11868:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sk.ts:11872:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sk.ts:16935:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sk.ts:16939:        <source>Show Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sk.ts:16995:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sk.ts:17730:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sk.ts:17742:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_sk.ts:17750:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_km_KH.ts:627:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_km_KH.ts:948:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_km_KH.ts:8596:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_km_KH.ts:9549:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_km_KH.ts:11401:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_km_KH.ts:11405:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_km_KH.ts:15457:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_km_KH.ts:15489:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_km_KH.ts:15913:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_km_KH.ts:15925:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_km_KH.ts:15933:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/qt_cs.ts:6085:        <source>Clear Error Log</source>
VBox/Frontends/VirtualBox/nls/qt_cs.ts:6224:        <source>Error Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ko.ts:812:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ko.ts:1104:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ko.ts:10936:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ko.ts:12031:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ko.ts:12035:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ko.ts:14294:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ko.ts:14298:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ko.ts:18776:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ko.ts:18812:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ko.ts:19263:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ko.ts:19275:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ko.ts:19283:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_th.ts:413:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_th.ts:541:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_th.ts:6960:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_th.ts:6964:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_th.ts:8288:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_th.ts:8292:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca_VA.ts:902:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca_VA.ts:1319:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca_VA.ts:10232:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca_VA.ts:10878:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca_VA.ts:11900:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca_VA.ts:14345:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca_VA.ts:14349:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca_VA.ts:19955:        <source>Show Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca_VA.ts:19959:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca_VA.ts:20067:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca_VA.ts:21078:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca_VA.ts:21098:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ca_VA.ts:21114:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_uk.ts:725:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_uk.ts:1254:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_uk.ts:10179:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_uk.ts:11261:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_uk.ts:11262:        <translation type="unfinished">&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</translation>
VBox/Frontends/VirtualBox/nls/VirtualBox_uk.ts:13501:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_uk.ts:13513:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_uk.ts:13521:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_uk.ts:17897:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_uk.ts:18024:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_uk.ts:18594:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_uk.ts:18602:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_uk.ts:18606:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/qt_sl.ts:7194:        <source>Clear Error Log</source>
VBox/Frontends/VirtualBox/nls/qt_sl.ts:7333:        <source>Error Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fi.ts:677:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fi.ts:998:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fi.ts:8948:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fi.ts:9617:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fi.ts:11560:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fi.ts:11564:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fi.ts:16065:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fi.ts:16069:        <source>Show Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fi.ts:16149:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fi.ts:16817:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fi.ts:16845:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_fi.ts:16853:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hu.ts:898:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hu.ts:1320:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hu.ts:10714:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hu.ts:11815:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hu.ts:14235:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hu.ts:14239:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hu.ts:19822:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hu.ts:19826:        <source>Show Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hu.ts:19874:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hu.ts:20809:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hu.ts:20833:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hu.ts:20841:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hr_HR.ts:402:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hr_HR.ts:530:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hr_HR.ts:6493:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hr_HR.ts:6497:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hr_HR.ts:7706:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_hr_HR.ts:7710:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_he.ts:505:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_he.ts:901:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_he.ts:7023:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_he.ts:7027:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_he.ts:8289:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_he.ts:8293:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/qt_fa.ts:7315:        <source>Clear Error Log</source>
VBox/Frontends/VirtualBox/nls/qt_fa.ts:7454:        <source>Error Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_da.ts:382:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_da.ts:689:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_da.ts:5698:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_da.ts:6342:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_da.ts:7519:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_da.ts:7523:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ro.ts:726:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ro.ts:1047:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ro.ts:8731:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ro.ts:9080:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ro.ts:9819:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ro.ts:12017:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ro.ts:12021:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ro.ts:17271:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ro.ts:17275:        <source>Show Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ro.ts:17343:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ro.ts:18337:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ro.ts:18365:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_ro.ts:18373:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_es.ts:920:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_es.ts:1168:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_es.ts:10707:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_es.ts:11170:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=http://www.virtualbox.org&gt;http://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_es.ts:12253:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution has been stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt; and the image file &lt;tt&gt;VBox.png&lt;/tt&gt;, which you can find in the &lt;nobr&gt;&lt;b&gt;%1&lt;/b&gt;&lt;/nobr&gt; directory, as well as a description of what you were doing when this error happened. Note that you can also access the above files by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; if you want to power off the machine or press &lt;b&gt;Ignore&lt;/b&gt; if you want to leave it as is for debugging. Please note that debugging requires special knowledge and tools, so it is recommended to press &lt;b&gt;OK&lt;/b&gt; now.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_es.ts:12257:        <source>&lt;p&gt;A critical error has occurred while running the virtual machine and the machine execution should be stopped.&lt;/p&gt;&lt;p&gt;For help, please see the Community section on &lt;a href=https://www.virtualbox.org&gt;https://www.virtualbox.org&lt;/a&gt; or your support contract. Please provide the contents of the log file &lt;tt&gt;VBox.log&lt;/tt&gt;, which you can find in the virtual machine log directory, as well as a description of what you were doing when this error happened. Note that you can also access the above file by selecting &lt;b&gt;Show Log&lt;/b&gt; from the &lt;b&gt;Machine&lt;/b&gt; menu of the main VirtualBox window.&lt;/p&gt;&lt;p&gt;Press &lt;b&gt;OK&lt;/b&gt; to power off the machine.&lt;/p&gt;</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_es.ts:14845:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_es.ts:14849:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_es.ts:20857:        <source>Show &amp;Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_es.ts:20861:        <source>Show Log...</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_es.ts:20945:        <source>Log</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_es.ts:21818:        <source>Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_es.ts:21846:        <source>%1 - VirtualBox Log Viewer</source>
VBox/Frontends/VirtualBox/nls/VirtualBox_es.ts:21854:        <source>Save VirtualBox Log As</source>
VBox/Frontends/VBoxSDL/VBoxSDL.cpp:1888:        Log(("Machine debugger available!\n"));
VBox/Frontends/VBoxSDL/VBoxSDL.cpp:3231:    Log(("SDL key event: sym=%d scancode=%#x unicode=%#x\n",
VBox/Frontends/VBoxSDL/VBoxSDL.cpp:3374:            Log(("Unhandled sdl key event: sym=%d scancode=%#x unicode=%#x\n",
VBox/Frontends/VBoxSDL/VBoxSDL.cpp:4632:                    Log(("u8LastBytesPaddingMask = %02X, aligned w = %d, width = %d, cbAndMaskScan = %d\n",
VBox/Frontends/VBoxSDL/VBoxSDL.cpp:5145:        Log(("PushSDLEventForSure: waiting for 2ms (rc = %d)\n", rc));
VBox/Frontends/VBoxSDL/VBoxSDL.cpp:5178:        Log(("PushNotifyUpdateEvent: Sleep 1ms\n"));
VBox/Frontends/VBoxSDL/Framebuffer.cpp:160:    Log(("CoCreateFreeThreadedMarshaler hr %08X\n", hr)); NOREF(hr);
VBox/Frontends/VBoxSDL/Framebuffer.cpp:1002:    Log(("Updates %d, %d,%d %dx%d\n", mfUpdates, x, y, w, h));
VBox/Frontends/VBoxAutostart/VBoxAutostartUtils.cpp:209:    Log(("autostartSvcDisplayErrorV: %s", pszFormat)); /** @todo format it! */
VBox/Frontends/VBoxAutostart/VBoxAutostart.h:112:    /** Log info message. */
VBox/Frontends/VBoxAutostart/VBoxAutostart.h:114:    /** Log error message. */
VBox/Frontends/VBoxAutostart/VBoxAutostart.h:116:    /** Log warning message. */
VBox/Frontends/VBoxAutostart/VBoxAutostart.h:118:    /** Log verbose message, only if verbose mode is activated. */
VBox/Frontends/VBoxAutostart/VBoxAutostart.h:125: * Log messages to the system and release log.
VBox/Frontends/VBoxAutostart/VBoxAutostart.h:129: * @param   enmLogType        Log type to use.
VBox/Frontends/VBoxAutostart/VBoxAutostartCfg.cpp:456: * Log unexpected token error.
VBox/Frontends/VBoxHeadless/VBoxHeadless.cpp:67:        Log(("VBoxHeadless: ERROR: " m " [rc=0x%08X]\n", rc)); \
VBox/Frontends/VBoxHeadless/VBoxHeadless.cpp:941:        Log(("VBoxHeadless: Opening a session with machine (id={%s})...\n",
VBox/Frontends/VBoxHeadless/VBoxHeadless.cpp:976:            Log(("Machine debugger available!\n"));
VBox/Frontends/VBoxHeadless/VBoxHeadless.cpp:1076:        Log(("VBoxHeadless: enmVRDE %d, fVRDEEnabled %d\n", enmVRDEOption, fVRDEEnabled));
VBox/Frontends/VBoxHeadless/VBoxHeadless.cpp:1154:        Log(("VBoxHeadless: Powering up the machine...\n"));
VBox/Frontends/VBoxHeadless/VBoxHeadless.cpp:1210:        Log(("VBoxHeadless: Waiting for PowerDown...\n"));
VBox/Frontends/VBoxHeadless/VBoxHeadless.cpp:1216:        Log(("VBoxHeadless: event loop has terminated...\n"));
VBox/Frontends/VBoxHeadless/VBoxHeadless.cpp:1309:        Log(("VBoxHeadless: Closing the session...\n"));
VBox/Frontends/VBoxManage/VBoxManageInfo.cpp:581:    SHOW_STRING_PROP(      machine, LogFolder,                  "LogFldr",              "Log folder");
VBox/Frontends/VBoxManage/VBoxManageInfo.cpp:1100:                                    Log(( #res " extracting from %s is failed\n", str.c_str())); \
VBox/Frontends/VBoxManage/VBoxManageMisc.cpp:895:            return errorArgument("Error parsing Log history count '%s'", a->argv[1]);
VBox/Frontends/VBoxManage/VBoxManageList.cpp:723:    RTPrintf("Log history count:               %u\n", ulValue);
VBox/Runtime/r0drv/linux/RTLogWriteDebugger-r0drv-linux.c:3: * IPRT - Log To Debugger, Ring-0 Driver, Linux.
VBox/Runtime/r0drv/haiku/RTLogWriteStdOut-r0drv-haiku.c:3: * IPRT - Log To StdOut, Ring-0 Driver, Haiku.
VBox/Runtime/r0drv/haiku/RTLogWriteDebugger-r0drv-haiku.c:3: * IPRT - Log To Debugger, Ring-0 Driver, Haiku.
VBox/Runtime/r0drv/memobj-r0drv.cpp:357:                Log(("RTR0MemObjFree: failed to free mapping %p: %p %#zx; rc=%Rrc\n", pChild, pChild->pv, pChild->cb, rc));
VBox/Runtime/r0drv/memobj-r0drv.cpp:411:        Log(("RTR0MemObjFree: failed to free %p: %d %p %#zx; rc=%Rrc\n",
VBox/Runtime/r0drv/solaris/RTLogWriteDebugger-r0drv-solaris.c:3: * IPRT - Log To Debugger, Ring-0 Driver, Solaris.
VBox/Runtime/r0drv/netbsd/RTLogWriteStdOut-r0drv-netbsd.c:3: * IPRT - Log To StdOut, Ring-0 Driver, NetBSD.
VBox/Runtime/r0drv/alloc-ef-r0drv.cpp:233: * Log an event.
VBox/Runtime/r0drv/nt/RTLogWriteDebugger-r0drv-nt.cpp:3: * IPRT - Log To Debugger, Ring-0 Driver, NT.
VBox/Runtime/r0drv/nt/memobj-r0drv-nt.cpp:351:                Log(("rtR0MemObjNativeAllocLow: Exception Code %#x\n", rcNt));
VBox/Runtime/r0drv/nt/memobj-r0drv-nt.cpp:799:            Log(("rtR0MemObjNtMap: Exception Code %#x\n", rcNt));
VBox/Runtime/r0drv/darwin/RTLogWriteDebugger-r0drv-darwin.cpp:3: * IPRT - Log To Debugger, Ring-0 Driver, Darwin.
VBox/Runtime/r0drv/darwin/RTLogWriteStdOut-r0drv-darwin.cpp:3: * IPRT - Log To StdOut, Ring-0 Driver, Darwin.
VBox/Runtime/generic/RTLogWriteDebugger-generic.cpp:3: * IPRT - Log To Debugger, Generic Dummy.
VBox/Runtime/generic/http-curl.cpp:382:    Log(("rtHttpUpdateProxyConfig: pThis=%p type=%d host='%s' port=%u user='%s'%s\n",
VBox/Runtime/generic/http-curl.cpp:478:    Log(("rtHttpUpdateAutomaticProxyDisable: pThis=%p\n", pThis));
VBox/Runtime/generic/http-curl.cpp:1029:            Log(("rtHttpDarwinExecuteProxyAutoConfigurationUrl: error! code=%ld desc='%s'\n", (long)CFErrorGetCode(Result.hError), szTmp));
VBox/Runtime/generic/http-curl.cpp:2075:            Log(("rtHttpGetCalcStatus: rc=%Rrc lastResp=%lu redir='%s'\n", rc, pThis->lLastResp, pThis->pszRedirLocation));
VBox/Runtime/generic/http-curl.cpp:2077:            Log(("rtHttpGetCalcStatus: rc=%Rrc lastResp=%lu\n", rc, pThis->lLastResp));
VBox/Runtime/generic/http-curl.cpp:2117:        Log(("rtHttpGetCalcStatus: rc=%Rrc rcCurl=%u\n", rc, rcCurl));
VBox/Runtime/generic/http-curl.cpp:2371:                Log(("rtHttpGetToMem: %zx bytes (allocated %zx)\n", pThis->Output.Mem.cb, pThis->Output.Mem.cbAllocated));
VBox/Runtime/generic/http-curl.cpp:2388:    Log(("RTHttpGetText: hHttp=%p pszUrl=%s\n", hHttp, pszUrl));
VBox/Runtime/generic/http-curl.cpp:2407:    Log(("RTHttpGetText: hHttp=%p pszUrl=%s\n", hHttp, pszUrl));
VBox/Runtime/generic/http-curl.cpp:2433:    Log(("RTHttpGetBinary: hHttp=%p pszUrl=%s\n", hHttp, pszUrl));
VBox/Runtime/generic/http-curl.cpp:2440:    Log(("RTHttpGetBinary: hHttp=%p pszUrl=%s\n", hHttp, pszUrl));
VBox/Runtime/generic/http-curl.cpp:2461:    Log(("rtHttpWriteDataToFile: rc=%Rrc cbUnit=%zd cUnits=%zu\n", rc, cbUnit, cUnits));
VBox/Runtime/generic/http-curl.cpp:2469:    Log(("RTHttpGetBinary: hHttp=%p pszUrl=%s pszDstFile=%s\n", hHttp, pszUrl, pszDstFile));
VBox/Runtime/generic/RTLogWriteStdOut-generic.cpp:3: * IPRT - Log To StdOut, Generic.
VBox/Runtime/generic/RTLogWriteStdErr-generic.cpp:3: * IPRT - Log To StdErr, Generic.
VBox/Runtime/generic/RTLogWriteUser-generic.cpp:3: * IPRT - Log User Specific Output, Generic Dummy.
VBox/Runtime/generic/RTLogDefaultInit-generic.cpp:3: * IPRT - Default Log Init, Generic Dummy.
VBox/Runtime/generic/RTLogWriteStdErr-stub-generic.cpp:3: * IPRT - Log To StdErr, Generic Dummy.
VBox/Runtime/generic/RTLogWriteStdOut-stub-generic.cpp:3: * IPRT - Log To StdOut, Generic Dummy.
VBox/Runtime/generic/RTFileMove-generic.cpp:80:                    Log(("RTFileMove('%s', '%s', %#x): copy failed, rc=%Rrc\n",
VBox/Runtime/generic/RTFileMove-generic.cpp:91:                Log(("RTFileMove('%s', '%s', %#x): failed to create destination, rc=%Rrc\n",
VBox/Runtime/generic/RTFileMove-generic.cpp:96:            Log(("RTFileMove('%s', '%s', %#x): failed to open source, rc=%Rrc\n",
VBox/Runtime/generic/RTFileMove-generic.cpp:104:                Log(("RTFileMove('%s', '%s', %#x): failed to delete '%s', rc2=%Rrc (rc=%Rrc)\n",
VBox/Runtime/VBox/log-vbox.cpp:589:        RTLogLoggerEx(pLogger, 0, ~0U, "Log created: %s\n", szBuf);
VBox/Runtime/common/time/timesup.cpp:124:        Log(("TM: u64DeltaPrev=%RI64 u64PrevNanoTS=0x%016RX64 u64NanoTS=0x%016RX64 (debugging?)\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:204:            Log(("RTDbgCv: Check failed on line %d: " #a_Expr "\n", __LINE__)); \
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:205:            Log(a_LogArgs); \
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:217:            Log(("RTDbgCv: Check failed on line %d: " #a_Expr "\n", __LINE__)); \
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:541:                        Log(("CV addr fix: %04x:%08x -> %04x:%08x\n", iSeg, *poff, j + 1, uAddrSym - uAddrFirst));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:612:            Log(("Symbol: %04x:%08x %.*s [%Rrc]\n", iSeg, off, cchName, pchName, rc));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:617:            Log(("Invalid segment index/offset %#06x:%08x for symbol %.*s\n", iSeg, off, cchName, pchName));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:620:        Log(("Symbol: %04x:%08x %.*s\n", iSeg, off, cchName, pchName));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:835:        Log(("\n!!More than one source file string table for this module!!\n\n"));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:882:        Log(("\n!!More than one source file info table for this module!!\n\n"));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:954:                        Log(( "RTDbgModCv:       %#x:%#010llx  %0u - rc=%Rrc!! (org: idxSeg=%#x off=%#x)\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:964:            Log(("RTDbgModCv: offSourceInfo=%#x cbSrcInfo=%#x!\n", pSrcHdr->offSourceInfo, pThis->cbSrcInfo));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1020:                Log(("rtDbgModCvSsProcessV8SymTab: Unknown block type %#x (LB %#x)\n", pBlockHdr->uType, pBlockHdr->cb));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1034:     * Log the source info now that we've gathered both it and the strings.
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1086:                Log(("rtDbgModCvSsProcessV8SymTab: Unknown block type %#x (LB %#x)\n", pBlockHdr->uType, pBlockHdr->cb));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1196:    Log(("rtDbgModCvSs_SrcModule: uCurStyle=%#x\n%.*Rhxd\n", pThis->uCurStyle, cbSubSect, pvSubSect));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1276:                    Log(( "RTDbgModCv:       %#x:%#010llx  %0u - rc=%Rrc!! (org: idxSeg=%#x off=%#x)\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1306:        Log(("RTDbgModCv: No segment map present, using segment indexes as is then...\n"));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1549:                Log(("CV: %#010x LB %#010x %s uRVA=%#010x iBest=%u cOverlaps=%u [idxDbgSeg=%#x iSeg=%#x]\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1600:                    Log(("CV: %s offEnd=%#x offFirst=%#x\n", szName, offEnd, offFirst));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1624:            Log(("RTDbgModCv: %Rrc while adding segments from SegMap\n", rc));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1740:                Log(("Old CV directory count is out of considered valid range: %#x\n", DirHdr.cEntries));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1757:                Log(("Unexpected CV directory size: %#x\n", DirHdr.Core.cbHdr));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1764:                Log(("Extended CV directory headers fields are not zero: fFlags=%#x offNextDir=%#x\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1770:                Log(("Unexpected CV directory entry size: %#x (expected %#x)\n", DirHdr.Core.cbEntry, sizeof(RTCVDIRENT32)));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1775:                Log(("CV directory count is out of considered valid range: %#x\n", DirHdr.Core.cEntries));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1820:                Log(("CV directory entry #%u is out of bounds: %#x LB %#x, max %#x\n", i, pDirEnt->off, pDirEnt->cb, cbDbgInfo));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1828:                Log(("CV directory entry #%u uses module index 0 (uSubSectType=%#x)\n", i, pDirEnt->uSubSectType));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1840:                        Log(("CV directory entry #%u: expected module subsection first, found %s (%#x)\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1846:                        Log(("CV directory entry #%u: skips from mod %#x to %#x modules\n", i, iModLast, pDirEnt->iMod));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1856:            Log(("CV directory contains no global modules\n"));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1861:            Log(("CV dir stats: %u total, %u normal, %u special, iModLast=%#x (%u)\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1878:                        Log(("CV directory entry #%u: Unexpected global module entry.\n", i));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1906:                            Log(("CV directory entry #%u: Expected %s (%#x), found %s (%#x).\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1917:                            Log(("CV directory entry #%u: SST %s (%#x) has already been seen or is for globals.\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:1936:                        Log(("CV directory entry #%u: Expected global module entry, not %#x.\n", i,
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2155:    Log(("Symbol: %s:%08x %s [%Rrc]\n", idxSeg == RTDBGSEGIDX_RVA ? "rva" : "abs", uValue, pszName, rc));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2249:                        Log(("Error converting COFF filename: %Rrc\n", rc));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2335:                    Log(("RTDbgCv: Unexpected COFF storage class %#x (%u)\n", Sym.StorageClass, Sym.StorageClass));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2565:    Log(("Segment %s: LinkAddress=%#llx RVA=%#llx cb=%#llx\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2599:        Log(("RTDbgModCv: Bad NumberOfSections: %d\n", pDbgHdr->NumberOfSections));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2604:        Log(("RTDbgModCv: Bad SectionAlignment: %#x\n", pDbgHdr->SectionAlignment));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2633:                Log(("RTDbgModCv: %s: Overlap or soring error, VirtualAddress=%#x uRvaPrev=%#x - section #%d '%.*s'!!!\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2641:                Log(("RTDbgModCv: %s: VirtualAddress=%#x VirtualSize=%#x (total %x) - beyond image size (%#x) - section #%d '%.*s'!!!\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2649:                Log(("RTDbgModCv: %s: VirtualAddress=%#x misaligned (%#x) - section #%d '%.*s'!!!\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2663:            Log(("RTDbgModCv: %s: No loadable sections.\n", pszFilename));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2668:            Log(("RTDbgModCv: %s: No space for PE headers.\n", pszFilename));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2769:        Log(("RTDbgModCv: Not enough room for COFF header.\n"));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2774:        Log(("RTDbgModCv: COFF debug information is to large (%'u bytes), max is 128MB\n", cb));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2786:        Log(("RTDbgModCv: Error reading COFF header: %Rrc\n", rc));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2806:        Log(("RTDbgModCv: Bad COFF symbol count or/and offset: LvaToFirstSymbol=%#x, NumberOfSymbols=%#x cbCoff=%#x\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2813:        Log(("RTDbgModCv: Bad COFF symbol count or/and offset: LvaToFirstSymbol=%#x, NumberOfSymbols=%#x cbCoff=%#x\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2819:        Log(("RTDbgModCv: The COFF symbol table is too short to be of any worth... (%u syms)\n", Hdr.NumberOfSymbols));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:2873:            Log(("RTDbgModCv: Found %c%c%c%c at %#RTfoff - size %#x, directory at %#x. file type %d\n",
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:3127:        Log(("RTDbgCv: Successfully loaded debug info\n"));
VBox/Runtime/common/dbg/dbgmodcodeview.cpp:3131:    Log(("RTDbgCv: Debug info load error %Rrc\n", rc));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:1215:    Log(("Segment %.*s: LinkAddress=%#llx RVA=%#llx cb=%#llx\n",
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:1231:    Log(("Segment %.*s: LinkAddress=%#llx RVA=%#llx cb=%#llx cbMapped=%#llx\n",
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:2096:        Log(("rtDwarfCursor_CalcPos: bad position %#zx, cbUnitLeft=%#zu\n", offRelative, pCursor->cbUnitLeft));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:2119:        Log(("rtDwarfCursor_AdvanceToPos: bad position %p, current %p\n", pbNewPos, pCursor->pb));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:2225:        Log(("rtDwarfCursor_InitWithOffset: offSect=%#x cb=%#x enmSect=%d\n", offSect, pThis->aSections[enmSect].cb, enmSect));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:2259:        Log(("rtDwarfCursor_InitForBlock: cbUnitLeft=%#x < cbBlock=%#x \n", pParent->cbUnitLeft, cbBlock));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:2347:    Log(("  File #%02u = '%s'\n", iFileName, pLnState->papszFileNames[iFileName]));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:2564:                    Log(("rtDwarfLine_RunProgram: Unknown standard opcode %#x, %#x operands, at %08x.\n", bOpCode, cOpsToSkip, offOpCode));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:2638:                            Log(("rtDwarfLine_RunProgram: Unknown extended opcode %#x, length %#x at %08x\n", bOpCode, cbInstr, offOpCode));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:2711:        Log(("  Path #%02u = '%s'\n", pLnState->cIncPaths, psz));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:2875:                Log(("rtDwarfAbbrev_LookupMiss: Growing from %u to %u...\n", pThis->cCachedAbbrevsAlloced, cNew));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:3147:                Log(("Unexpected boolean value %#x\n", b));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:3195:            Log(("rtDwarfDecode_LowHighPc: Duplicate DW_AT_low_pc\n"));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:3205:            Log(("rtDwarfDecode_LowHighPc: Duplicate DW_AT_high_pc\n"));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:3252:        Log(("rtDwarfDecode_Ranges: bad ranges off=%#llx\n", off));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:3267:        Log(("rtDwarfDecode_Ranges: Duplicate DW_AT_ranges\n"));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:3317:            Log(("rtDwarfDecode_Reference: bad info off=%#llx\n", off));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:3326:            Log(("rtDwarfDecode_Reference: bad unit off=%#llx\n", off));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:3378:        Log(("rtDwarfDecode_SectOff: bad off=%#llx, attr %#x (%s), enmSect=%d cb=%#llx; Assuming watcom/gcc.\n", off,
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:4259:    Log(("rtDwarfInfo_LoadUnit: %#x\n", rtDwarfCursor_CalcSectOffsetU32(pCursor)));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:4275:    Log(("   uVer=%d  offAbbrev=%#llx cbNativeAddr=%d\n", uVer, offAbbrev, cbNativeAddr));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:4282:        Log(("Unexpected abbrviation code offset of %#llx\n", offAbbrev));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:4294:        Log(("Unexpected abbrviation code of zero\n"));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:4303:        Log(("Unexpected compile/partial unit tag %#x\n", pAbbrev->uTag));
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:4458:            Log(("Dwarf: Symbol #%05u %#018RTptr %s [%Rrc]\n", uSymbol, Value, pszSymbol, rc)); NOREF(rc);
VBox/Runtime/common/dbg/dbgmoddwarf.cpp:4462:        Log(("Dwarf: Symbol #%05u %#018RTptr '%s' [SKIPPED - INVALID ADDRESS]\n", uSymbol, Value, pszSymbol));
VBox/Runtime/common/dbg/dbgmoddbghelp.cpp:218:        Log((" %#018RX64 %05u  %s  [SKIPPED - INVALID ADDRESS!]\n", pLineInfo->Address, pLineInfo->LineNumber));
VBox/Runtime/common/dbg/dbgmoddbghelp.cpp:248:            Log(("rtDbgModDbgHelpCopyLineNumberCallback: Out of memory\n"));
VBox/Runtime/common/dbg/dbgmoddbghelp.cpp:258:    Log((" %#018RX64 %05u  %s  [%Rrc]\n", pLineInfo->Address, pLineInfo->LineNumber, pArgs->pszPrev, rc));
VBox/Runtime/common/dbg/dbgmoddbghelp.cpp:290:        Log(("Line number enum: %Rrc (%u)\n", rc, GetLastError()));
VBox/Runtime/common/dbg/dbgmoddbghelp.cpp:314:        Log(("  %#018RX64 LB %#07x  %s  [SKIPPED - INVALID ADDRESS!]\n", pSymInfo->Address, cbSymbol, pSymInfo->Name));
VBox/Runtime/common/dbg/dbgmoddbghelp.cpp:319:        Log(("  %#018RX64 LB %#07x  %s  [SKIPPED - TOO LONG (%u > %u)!]\n", pSymInfo->Address, cbSymbol, pSymInfo->Name,
VBox/Runtime/common/dbg/dbgmoddbghelp.cpp:327:    Log(("  %#018RX64 LB %#07x  %s  [%Rrc]\n", pSymInfo->Address, cbSymbol, pSymInfo->Name, rc));
VBox/Runtime/common/dbg/dbgmoddbghelp.cpp:355:        Log(("SymEnumSymbols: %Rrc (%u)\n", rc, GetLastError()));
VBox/Runtime/common/dbg/dbgmoddbghelp.cpp:368:    Log(("Segment %.*s: LinkAddress=%#llx RVA=%#llx cb=%#llx\n",
VBox/Runtime/common/dbg/dbgmod.cpp:638:            Log(("rtDbgModOpenDebugInfoExternalToImageCallback: Don't know how to handle enmType=%d and pszFileExt=%s\n",
VBox/Runtime/common/dbg/dbgmod.cpp:648:    Log(("rtDbgModOpenDebugInfoExternalToImageCallback: '%s' (enmType=%d) for '%s'  -> %Rrc\n",
VBox/Runtime/common/dbg/dbgmod.cpp:1000:                    Log(("RTDbgMod: Found matching PE image '%s'\n", pszFilename));
VBox/Runtime/common/dbg/dbgmod.cpp:1023:                    Log(("rtDbgModFromPeImageOpenCallback: rtDbgModCreateForExports failed: %Rrc\n", rc));
VBox/Runtime/common/dbg/dbgcfg.cpp:107:    /** Log callback function. */
VBox/Runtime/common/dbg/dbgcfg.cpp:263:        Log(("RTDbgCfg: %s", pszMsg));
VBox/Runtime/common/dbg/dbgcfg.cpp:287:        Log(("RTDbgCfg: %s", pszMsg));
VBox/Runtime/common/dbg/dbgcfg.cpp:759:        Log(("Error creating cache dir '%s': %Rrc\n", pszPath, rc));
VBox/Runtime/common/dbg/dbgcfg.cpp:773:            Log(("RTDirCreate(%s) -> %Rrc\n", pszPath, rc));
VBox/Runtime/common/dbg/dbgcfg.cpp:785:            Log(("RTDirCreate(%s) -> %Rrc\n", pszPath, rc));
VBox/Runtime/common/dbg/dbgmodexports.cpp:77:        Log(("Symbol #%05u %#018RTptr %s [%Rrc]\n", uSymbol, Value, pszSymbol, rc)); NOREF(rc);
VBox/Runtime/common/dbg/dbgmodexports.cpp:80:        Log(("Symbol #%05u %#018RTptr %s [SKIPPED - INVALID ADDRESS]\n", uSymbol, Value, pszSymbol));
VBox/Runtime/common/dbg/dbgmodexports.cpp:90:    Log(("Segment %.*s: LinkAddress=%#llx RVA=%#llx cb=%#llx\n",
VBox/Runtime/common/dbg/dbgmodexports.cpp:161:            Log(("rtDbgModCreateForExports: Error during symbol enum: %Rrc\n", rc));
VBox/Runtime/common/dbg/dbgmodexports.cpp:164:        Log(("rtDbgModCreateForExports: Error during segment enum: %Rrc\n", rc));
VBox/Runtime/common/log/log.cpp:188:    /** Log file history settings: maximum amount of data to put in a file. */
VBox/Runtime/common/log/log.cpp:190:    /** Log file history settings: current amount of data in a file. */
VBox/Runtime/common/log/log.cpp:192:    /** Log file history settings: maximum time to use a file (in seconds). */
VBox/Runtime/common/log/log.cpp:194:    /** Log file history settings: in what time slot was the file created. */
VBox/Runtime/common/log/log.cpp:196:    /** Log file history settings: number of older files to keep.
VBox/Runtime/common/log/log.cpp:362:/** Log rotation backoff table - millisecond sleep intervals.
VBox/Runtime/common/log/log.cpp:464: * Log phase callback function, assumes the lock is already held
VBox/Runtime/common/log/log.cpp:484: * Log phase callback function, assumes the lock is not held.
VBox/Runtime/common/log/logformat.cpp:3: * IPRT - Log Formatter.
VBox/Runtime/common/misc/thread.cpp:325:        Log(("RTThreadAdopt: %RTthrd %RTnthrd '%s' enmType=%d fFlags=%#x rc=%Rrc\n",
VBox/Runtime/common/misc/thread.cpp:329:        Log(("RTThreadAdopt: %RTthrd %RTnthrd '%s' enmType=%d fFlags=%#x - already adopted!\n",
VBox/Runtime/common/misc/thread.cpp:700:    Log(("rtThreadMain: Starting: pThread=%p NativeThread=%RTnthrd Name=%s pfnThread=%p pvUser=%p\n",
VBox/Runtime/common/misc/thread.cpp:731:    Log(("rtThreadMain: Terminating: rc=%d pThread=%p NativeThread=%RTnthrd Name=%s pfnThread=%p pvUser=%p\n",
VBox/Runtime/common/misc/thread.cpp:802:            Log(("RTThreadCreate: Created thread %p (%p) %s\n", pThreadInt, NativeThread, pszName));
VBox/Runtime/common/misc/thread.cpp:1290:                    Log(("RTThreadSetType: failed on thread %p (%s), rc=%Rrc!!!\n", Thread, pThread->szName, rc));
VBox/Runtime/common/crypto/RTCrStoreCertAddFromJavaKeyStore.cpp:189:    Log(("JKS: %u entries - '%s'\n", cEntries, pszErrorName));
VBox/Runtime/common/crypto/RTCrStoreCertAddFromJavaKeyStore.cpp:216:            Log(("JKS: %#08zx: entry #%u: Private key\n", offEntry, iEntry));
VBox/Runtime/common/crypto/RTCrStoreCertAddFromJavaKeyStore.cpp:231:            Log(("JKS: %#08zx: entry #%u: Trust certificate\n", offEntry, iEntry));
VBox/Runtime/common/crypto/RTCrStoreCertAddFromJavaKeyStore.cpp:254:            Log(("JKS: %#08zx: %#x certificate bytes\n", off, cbEncoded));
VBox/Runtime/common/vfs/vfsreadahead.cpp:281:            Log(("rtVfsReadAhead_Read: ret %Rrc; offCur=%#llx offEof=%#llx\n", rc, offCur, pThis->offEof));
VBox/Runtime/common/vfs/vfsreadahead.cpp:324:                Log(("rtVfsReadAhead_Read: EOF %llu (%#llx)\n", pThis->offEof, pThis->offEof));
VBox/Runtime/common/vfs/vfsreadahead.cpp:600:                        Log(("rtVfsReadAheadThreadProc: EOF %llu (%#llx)\n", pThis->offEof, pThis->offEof));
VBox/Runtime/common/vfs/vfsbase.cpp:1839:    Log(("RTVfsRelease(%p/%p) -> %d\n", pThis, pvThis, cRefs));
VBox/Runtime/common/fs/fatvfs.cpp:5529:        Log(("rtFsFatVolTryInitDos2Plus: Bogus idxEndOfChain=%#x, using %#x instead\n", pThis->idxEndOfChain, idxOurEndOfChain));
VBox/Runtime/common/fs/isovfs.cpp:505:                Log(("ISO/UDF: Error reading %#x bytes at %#RX64 (%#x:%#RX64): %Rrc\n",
VBox/Runtime/common/fs/isovfs.cpp:517:        Log(("ISO/UDF: Invalid partition index %#x (offset %#RX64), max partitions %#x\n",
VBox/Runtime/common/fs/isovfs.cpp:1158:     * Log it.
VBox/Runtime/common/fs/isovfs.cpp:1314:     * Log it.
VBox/Runtime/common/fs/isovfs.cpp:1489:            Log(("ISO/UDF: ICB has alloc type %d!\n", AllocDesc.uType));
VBox/Runtime/common/fs/isovfs.cpp:1553:                    Log(("ISO/UDF: zero length indirect entry\n"));
VBox/Runtime/common/fs/isovfs.cpp:1620:            Log(("rtFsIsoCore_InitFromUdfIcbAndFileIdDesc: ICB too small: %#04x:%010RX32 LB %#x\n",
VBox/Runtime/common/fs/isovfs.cpp:1627:        Log(("rtFsIsoCore_InitFromUdfIcbAndFileIdDesc: ICB too big: %#04x:%010RX32 LB %#x\n",
VBox/Runtime/common/fs/isovfs.cpp:1797:                        Log(("ISO/UDF: Invalid partition index %#x (offset %#RX64), max partitions %#x; iExtent=%#x\n",
VBox/Runtime/common/fs/isovfs.cpp:4102:    Log(("rtFsIsoVol_Close(%p)\n", pThis));
VBox/Runtime/common/fs/isovfs.cpp:4224:                Log(("rtFsIsoVolValidateUdfDescTag(,%#x,%#010RX32,): Sector mismatch: %#RX32 (%.*Rhxs)\n",
VBox/Runtime/common/fs/isovfs.cpp:4230:            Log(("rtFsIsoVolValidateUdfDescTag(,%#x,%#010RX32,): Tag ID mismatch: %#x (%.*Rhxs)\n",
VBox/Runtime/common/fs/isovfs.cpp:4237:            Log(("rtFsIsoVolValidateUdfDescTag(,%#x,%#010RX32,): All zeros\n", idTag, offTag));
VBox/Runtime/common/fs/isovfs.cpp:4241:        Log(("rtFsIsoVolValidateUdfDescTag(,%#x,%#010RX32,): Unsupported version: %#x (%.*Rhxs)\n",
VBox/Runtime/common/fs/isovfs.cpp:4246:    Log(("rtFsIsoVolValidateUdfDescTag(,%#x,%#010RX32,): checksum error: %#x, calc %#x (%.*Rhxs)\n",
VBox/Runtime/common/fs/isovfs.cpp:4273:        Log(("rtFsIsoVolValidateUdfDescCrc(,%#x,%#010RX32,): Descriptor CRC mismatch: expected %#x, calculated %#x (cbDescriptorCrc=%#x)\n",
VBox/Runtime/common/fs/isovfs.cpp:4280:    Log(("rtFsIsoVolValidateUdfDescCrc(,%#x,%#010RX32,): Insufficient data to CRC: cbDescriptorCrc=%#x cbDesc=%#zx\n",
VBox/Runtime/common/fs/isovfs.cpp:4338:            Log(("ISO/UDF: File set descriptor at %#RX32 (%#RX32:%#RX32)\n", pFsd->Tag.offTag,
VBox/Runtime/common/fs/isovfs.cpp:4647:    Log(("ISO/UDF: Primary volume descriptor at sector %#RX32\n", pDesc->Tag.offTag));
VBox/Runtime/common/fs/isovfs.cpp:4689:                Log(("ISO/UDF: Primary descriptor prevails over previous! (%u >= %u)\n",
VBox/Runtime/common/fs/isovfs.cpp:4695:                Log(("ISO/UDF: Primary descriptor has lower sequence number than the previous! (%u < %u)\n",
VBox/Runtime/common/fs/isovfs.cpp:4748:    Log(("ISO/UDF: Logical volume descriptor at sector %#RX32\n", pDesc->Tag.offTag));
VBox/Runtime/common/fs/isovfs.cpp:4834:        Log(("ISO/UDF: Logical volume descriptor is too big: %#zx (cbSector=%#x)\n", cbDesc, cbSector));
VBox/Runtime/common/fs/isovfs.cpp:4849:                Log(("ISO/UDF: Logical descriptor prevails over previous! (%u >= %u)\n",
VBox/Runtime/common/fs/isovfs.cpp:4858:                Log(("ISO/UDF: Logical descriptor has lower sequence number than the previous! (%u >= %u)\n",
VBox/Runtime/common/fs/isovfs.cpp:4907:    Log(("ISO/UDF: Partition descriptor at sector %#RX32\n", pDesc->Tag.offTag));
VBox/Runtime/common/fs/isovfs.cpp:4948:                Log(("ISO/UDF: Partition descriptor for part %#u prevails over previous! (%u >= %u)\n",
VBox/Runtime/common/fs/isovfs.cpp:4954:                Log(("ISO/UDF: Partition descriptor for part %#u has a lower sequence number than the previous! (%u < %u)\n",
VBox/Runtime/common/fs/isovfs.cpp:5003:    Log(("ISO/UDF: Implementation use volume descriptor at sector %#RX32\n", pDesc->Tag.offTag));
VBox/Runtime/common/fs/isovfs.cpp:5130:                    Log(("ISO/UDF: Ignoring logical volume integrity descriptor at offset %#RX64.\n", offSeq + offInSeq));
VBox/Runtime/common/fs/isovfs.cpp:5135:                    Log(("ISO/UDF: Ignoring unallocated space descriptor at offset %#RX64.\n", offSeq + offInSeq));
VBox/Runtime/common/fs/isovfs.cpp:5140:                    Log(("ISO/UDF: Ignoring AVDP in VDS (at offset %#RX64).\n", offSeq + offInSeq));
VBox/Runtime/common/fs/isovfs.cpp:5147:                    Log(("ISO/UDF: Processing volume descriptor pointer at offset %#RX64: %#x LB %#x (seq %#x); cNestings=%d\n",
VBox/Runtime/common/fs/isovfs.cpp:5156:                    Log(("ISO/UDF: Terminating descriptor at offset %#RX64\n", offSeq + offInSeq));
VBox/Runtime/common/fs/isovfs.cpp:5793:        Log(("ISO9660: Joliet with UCS-2 level %u\n", *pbUcs2Level));
VBox/Runtime/common/fs/isovfs.cpp:5912:            Log(("ISO9660: volume desc #%u: type=%#x\n", iVolDesc, Buf.VolDescHdr.bDescType));
VBox/Runtime/common/fs/isovfs.cpp:6013:        Log(("rtFsIsoVolTryInit: uUdfLevel=%d\n", uUdfLevel));
VBox/Runtime/common/fs/isomakerimport.cpp:1038:                            Log(("rtFsIsoImport/Rock: Ignoring 'NM' entry for '.' and '..'\n"));
VBox/Runtime/common/fs/isomakerimport.cpp:2034:            default: Log(("rtFsIsoImportProcessSupplementaryDesc: last joliet escape sequence byte doesn't match: %#x\n",
VBox/Runtime/common/ldr/ldrPE.cpp:515:        Log(("rtldrPE: %s: Reading %#x bytes at offset %#x failed, %Rrc!!! (the entire image)\n",
VBox/Runtime/common/ldr/ldrPE.cpp:540:                    Log(("rtldrPE: %s: Reading %#x bytes at offset %#x failed, %Rrc - section #%d '%.*s'!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:548:        Log(("rtldrPE: %s: Reading %#x bytes at offset %#x failed, %Rrc!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3151:            Log(("rtldrPEOpen: %s: Unsupported Machine=%#x\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3158:        Log(("rtldrPEOpen: %s: SizeOfOptionalHeader=%#x expected %#x\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3166:        Log(("rtldrPEOpen: %s: IMAGE_FILE_RELOCS_STRIPPED\n", pszLogName));
VBox/Runtime/common/ldr/ldrPE.cpp:3171:        Log(("rtldrPEOpen: %s: NumberOfSections=%d - our limit is 42, please raise it if the binary makes sense.(!!!)\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3177:        Log(("rtldrPEOpen: %s: NumberOfSections=%d - we can't have an image without sections (!!!)\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3205:        Log(("rtldrPEOpen: %s: Magic=%#x - expected %#x!!!\n", pszLogName, pOptHdr->Magic, CorrectMagic));
VBox/Runtime/common/ldr/ldrPE.cpp:3211:        Log(("rtldrPEOpen: %s: SizeOfImage=%#x - Our limit is 1GB (%#x)!!!\n", pszLogName, cbImage, _1G));
VBox/Runtime/common/ldr/ldrPE.cpp:3217:        Log(("rtldrPEOpen: %s: SizeOfImage=%#x to small, minimum %#x!!!\n", pszLogName, cbImage, cbMinImageSize));
VBox/Runtime/common/ldr/ldrPE.cpp:3222:        Log(("rtldrPEOpen: %s: AddressOfEntryPoint=%#x - beyond image size (%#x)!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3228:        Log(("rtldrPEOpen: %s: BaseOfCode=%#x - beyond image size (%#x)!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3235:        Log(("rtldrPEOpen: %s: BaseOfData=%#x - beyond image size (%#x)!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3242:        Log(("rtldrPEOpen: %s: SizeOfHeaders=%#x - beyond image size (%#x)!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3249:        Log(("rtldrPEOpen: %s: Subsystem=%#x (unknown)!!!\n", pszLogName, pOptHdr->Subsystem));
VBox/Runtime/common/ldr/ldrPE.cpp:3254:        Log(("rtldrPEOpen: %s: SizeOfHeaders=%#x - cbMinImageSize %#x + sections %#x = %#llx!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3262:        Log(("rtldrPEOpen: %s: SizeOfStackReserve %#x < SizeOfStackCommit %#x!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3268:        Log(("rtldrPEOpen: %s: SizeOfStackReserve %#x < SizeOfStackCommit %#x!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3276:        Log(("rtldrPEOpen: %s: NumberOfRvaAndSizes=%d!!!\n", pszLogName, pOptHdr->NumberOfRvaAndSizes));
VBox/Runtime/common/ldr/ldrPE.cpp:3304:                Log(("rtldrPEOpen: %s: dir no. %d (DELAY_IMPORT) VirtualAddress=%#x Size=%#x is not supported!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3311:                Log(("rtldrPEOpen: %s: dir no. %d (SECURITY) VirtualAddress=%#x Size=%#x is not supported!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3315:                    Log(("rtldrPEOpen: %s: Security directory #%u is too small: %#x bytes\n", pszLogName, i, pDir->Size));
VBox/Runtime/common/ldr/ldrPE.cpp:3320:                    Log(("rtldrPEOpen: %s: Security directory #%u is too large: %#x bytes\n", pszLogName, i, pDir->Size));
VBox/Runtime/common/ldr/ldrPE.cpp:3325:                    Log(("rtldrPEOpen: %s: Security directory #%u is misaligned: %#x\n", pszLogName, i, pDir->VirtualAddress));
VBox/Runtime/common/ldr/ldrPE.cpp:3337:                Log(("rtldrPEOpen: %s: dir no. %d (GLOBALPTR) VirtualAddress=%#x Size=%#x is not supported!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3344:                Log(("rtldrPEOpen: %s: dir no. %d (TLS) VirtualAddress=%#x Size=%#x is not supported!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3351:                Log(("rtldrPEOpen: %s: dir no. %d (COM_DESCRIPTOR) VirtualAddress=%#x Size=%#x is not supported!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3356:                Log(("rtldrPEOpen: %s: dir no. %d VirtualAddress=%#x Size=%#x is not supported!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3362:            Log(("rtldrPEOpen: %s: dir no. %d VirtualAddress=%#x is invalid (limit %#x)!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3368:            Log(("rtldrPEOpen: %s: dir no. %d Size=%#x is invalid (rva=%#x, limit=%#x)!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3416:            Log(("rtldrPEOpen: %s: Unsupported section flag(s) %#x section #%d '%.*s'!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3426:                Log(("rtldrPEOpen: %s: Overlaps previous section or sections aren't in ascending order, VirtualAddress=%#x uRvaPrev=%#x - section #%d '%.*s'!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3432:                Log(("rtldrPEOpen: %s: VirtualAddress=%#x - beyond image size (%#x) - section #%d '%.*s'!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3439:                Log(("rtldrPEOpen: %s: VirtualAddress=%#x misaligned (%#x) - section #%d '%.*s'!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3449:                Log(("rtldrPEOpen: %s: ASSUMPTION FAILED: file offset %#x != RVA %#x - section #%d '%.*s'!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3461:            Log(("rtldrPEOpen: %s: PointerToRawData=%#x SizeOfRawData=%#x - beyond end of file (%#x) - section #%d '%.*s'!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3469:            Log(("rtldrPEOpen: %s: PointerToRawData=%#x misaligned (%#x) - section #%d '%.*s'!!!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3651:            Log(("rtldrPEOpen: %s: load cfg dir: unexpected dir size of %u bytes, expected %zu, %zu, %zu, %zu, %zu, %zu, %zu, %zu, or %zu.%s\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3676:            Log(("rtldrPEOpen: %s: load cfg dir: Unexpected bytes are non-zero (%u bytes of which %u expected to be zero): %.*Rhxs\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3689:                Log(("rtldrPEOpen: %s: load cfg dir: Header (%d) and directory (%d) size mismatch, applying the XP kludge.\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3706:                Log(("rtldrPEOpen: %s: load cfg dir: Header (%d) and directory (%d) size mismatch, applying the old linker kludge.\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3719:                    Log(("rtldrPEOpen: %s: load cfg dir: Unknown bytes are non-zero (%u bytes of which %u expected to be zero): %.*Rhxs\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3732:                Log(("rtldrPEOpen: %s: load cfg hdr: unexpected hdr size of %u bytes (dir %u), expected %zu, %zu, %zu, %zu, %zu, %zu, %zu, %zu, or %zu.\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3741:            Log(("rtldrPEOpen: %s: load cfg dir: lock prefix table at %RX64. We don't support lock prefix tables!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3750:            Log(("rtldrPEOpen: %s: load cfg dir: SEHandlerTable=%RX64 and SEHandlerCount=%RX64 are unsupported!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3757:            Log(("rtldrPEOpen: %s: load cfg dir: EditList=%RX64 is unsupported!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3776:            Log(("rtldrPEOpen: %s: load cfg dir: Guard stuff: %RX64,%RX64,%RX64,%RX64,%RX32,%RX64,%RX64,%RX64,%RX64!\n",
VBox/Runtime/common/ldr/ldrPE.cpp:3814:                    Log(("rtldrPEOpen: %s: cert at %#x/%#x: dwLength=%#x\n", pszLogName, off, Dir.Size, pCur->dwLength));
VBox/Runtime/common/ldr/ldrPE.cpp:3822:                    Log(("rtldrPEOpen: %s: cert at %#x/%#x: wRevision=%#x\n", pszLogName, off, Dir.Size, pCur->wRevision));
VBox/Runtime/common/ldr/ldrPE.cpp:3839:                    Log(("rtldrPEOpen: %s: cert at %#x/%#x: wCertificateType=%#x\n", pszLogName, off, Dir.Size, pCur->wCertificateType));
VBox/Runtime/common/ldr/ldrEx.cpp:90:        Log(("rtldrOpenWithReader: %s: unknown magic %#x / '%.4s\n", pReader->pfnLogName(pReader), uSign.u32, &uSign.ach[0]));
VBox/Runtime/common/ldr/ldrEx.cpp:103:            Log(("rtldrOpenWithReader: %s: no new header / invalid offset %#RX32\n", pReader->pfnLogName(pReader), offHdr));
VBox/Runtime/common/ldr/ldrEx.cpp:114:            Log(("rtldrOpenWithReader: %s: unknown new magic %#x / '%.4s\n", pReader->pfnLogName(pReader), uSign.u32, &uSign.ach[0]));
VBox/Runtime/common/ldr/ldrEx.cpp:169:        Log(("rtldrOpenWithReader: %s: the format isn't implemented %#x / '%.4s\n", pReader->pfnLogName(pReader), uSign.u32, &uSign.ach[0]));
VBox/Runtime/common/ldr/ldrELF.cpp:143:        Log(("RTLdrELF: %s: Unsupported/invalid ident %.*Rhxs\n", pszLogName, sizeof(e_ident), e_ident));
VBox/Runtime/common/ldr/ldrELF.cpp:148:        Log(("RTLdrELF: %s: ELF endian %x is unsupported\n", pszLogName, e_ident[EI_DATA]));
VBox/Runtime/common/ldr/ldrkStuff.cpp:1020:            Log(("rtldrkLdrOpen: '%s' (%s) %u segments\n",
VBox/Runtime/common/ldr/ldrkStuff.cpp:1024:                Log(("Segment #%-2u: RVA=%08llx cb=%08llx '%.*s'\n", iSeg,
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:784:            Log(("RTLdrELF: %s: Executable images are not supported yet!\n", pModElf->Core.pReader->pfnLogName(pModElf->Core.pReader)));
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:787:            Log(("RTLdrELF: %s: Dynamic images are not supported yet!\n", pModElf->Core.pReader->pfnLogName(pModElf->Core.pReader)));
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:814:                        Log(("RTLdrELF: %s: Read error when reading " FMT_ELF_SIZE " bytes at " FMT_ELF_OFF ", iShdr=%d\n",
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:849:            Log(("RTLdrELF: %s: Executable images are not supported yet!\n", pszLogName));
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:852:            Log(("RTLdrELF: %s: Dynamic images are not supported yet!\n", pszLogName));
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1472:        Log(("RTLdrELF: %s: Invalid ELF magic (%.*Rhxs)\n", pszLogName, sizeof(pEhdr->e_ident), pEhdr->e_ident)); NOREF(pszLogName);
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1477:        Log(("RTLdrELF: %s: Invalid ELF class (%.*Rhxs)\n", pszLogName, sizeof(pEhdr->e_ident), pEhdr->e_ident));
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1482:        Log(("RTLdrELF: %s: ELF endian %x is unsupported\n", pszLogName, pEhdr->e_ident[EI_DATA]));
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1487:        Log(("RTLdrELF: %s: ELF version %x is unsupported\n", pszLogName, pEhdr->e_version));
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1493:        Log(("RTLdrELF: %s: Elf header e_ehsize is %d expected %d!\n",
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1501:        Log(("RTLdrELF: %s: Elf header e_phentsize is %d expected %d!\n",
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1507:        Log(("RTLdrELF: %s: Elf header e_shentsize is %d expected %d!\n",
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1519:            Log(("RTLdrELF: %s: image type %#x is not supported!\n", pszLogName, pEhdr->e_type));
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1536:            Log(("RTLdrELF: %s: machine type %u is not supported!\n", pszLogName, pEhdr->e_machine));
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1544:        Log(("RTLdrELF: %s: The program headers overlap with the ELF header! e_phoff=" FMT_ELF_OFF "\n",
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1551:        Log(("RTLdrELF: %s: The program headers extends beyond the file! e_phoff=" FMT_ELF_OFF " e_phnum=" FMT_ELF_HALF "\n",
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1560:        Log(("RTLdrELF: %s: The section headers overlap with the ELF header! e_shoff=" FMT_ELF_OFF "\n",
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1567:        Log(("RTLdrELF: %s: The section headers extends beyond the file! e_shoff=" FMT_ELF_OFF " e_shnum=" FMT_ELF_HALF "\n",
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1574:        Log(("RTLdrELF: %s: The section headers string table is out of bounds! e_shstrndx=" FMT_ELF_HALF " e_shnum=" FMT_ELF_HALF "\n",
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1657:            Log(("RTLdrELF: %s: Bad #0 section: %.*Rhxs\n", pszLogName, sizeof(*pShdr), pShdr ));
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1665:        Log(("RTLdrELF: %s: Shdr #%d: sh_name (%d) is beyond the end of the section header string table (%d)!\n",
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1672:        Log(("RTLdrELF: %s: Shdr #%d: sh_link (%d) is beyond the end of the section table (%d)!\n",
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1683:                Log(("RTLdrELF: %s: Shdr #%d: sh_info (%d) is beyond the end of the section table (%d)!\n",
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1710:            Log(("RTLdrELF: %s: Warning, unknown type %d!\n", pszLogName, pShdr->sh_type));
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1721:            Log(("RTLdrELF: %s: Shdr #%d: sh_offset (" FMT_ELF_OFF ") + sh_size (" FMT_ELF_XWORD " = %RTfoff) is beyond the end of the file (%RTfoff)!\n",
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1727:            Log(("RTLdrELF: %s: Shdr #%d: sh_offset (" FMT_ELF_OFF ") + sh_size (" FMT_ELF_XWORD ") is starting in the ELF header!\n",
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1834:                            Log(("RTLdrElf: %s: Multiple symbol tabs! iSymSh=%d i=%d\n", pszLogName, pModElf->iSymSh, i));
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1851:                            Log(("RTLdrElf: Section header string table is not a SHT_STRTAB: %#x\n", paShdrs[i].sh_type));
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1857:                            Log(("RTLdrElf: Section header string table is empty\n"));
VBox/Runtime/common/ldr/ldrELFRelocatable.cpp.h:1870:                            Log(("RTLdrElf: Out of order section #%d; adjusting sh_addr from " FMT_ELF_ADDR " to " FMT_ELF_ADDR "\n",
VBox/Runtime/testcase/tstLog.cpp:3: * IPRT Testcase - Log Formatting.
VBox/Runtime/r3/linux/sched-linux.cpp:339:    Log(("Priority: g_fCanRaisePriority=%RTbool g_fCanRestorePriority=%RTbool g_fScrewedUpMaxPriorityLimitInheritance=%RTbool\n",
VBox/Runtime/r3/linux/sched-linux.cpp:341:    Log(("Priority: g_iMaxPriority=%d g_iMinPriority=%d\n", g_iMaxPriority, g_iMinPriority));
VBox/Runtime/r3/linux/sched-linux.cpp:342:    Log(("Priority: enmPriority=%d \"%s\" iNice=%d iDelta=%d\n",
VBox/Runtime/r3/linux/sched-linux.cpp:347:    Log(("Priority:  %2d INFREQUENT_POLLER = %d\n", RTTHREADTYPE_INFREQUENT_POLLER, g_pProcessPriority->paTypes[RTTHREADTYPE_INFREQUENT_POLLER].iPriority));
VBox/Runtime/r3/linux/sched-linux.cpp:348:    Log(("Priority:  %2d MAIN_HEAVY_WORKER = %d\n", RTTHREADTYPE_MAIN_HEAVY_WORKER, g_pProcessPriority->paTypes[RTTHREADTYPE_MAIN_HEAVY_WORKER].iPriority));
VBox/Runtime/r3/linux/sched-linux.cpp:349:    Log(("Priority:  %2d EMULATION         = %d\n", RTTHREADTYPE_EMULATION        , g_pProcessPriority->paTypes[RTTHREADTYPE_EMULATION        ].iPriority));
VBox/Runtime/r3/linux/sched-linux.cpp:350:    Log(("Priority:  %2d DEFAULT           = %d\n", RTTHREADTYPE_DEFAULT          , g_pProcessPriority->paTypes[RTTHREADTYPE_DEFAULT          ].iPriority));
VBox/Runtime/r3/linux/sched-linux.cpp:351:    Log(("Priority:  %2d GUI               = %d\n", RTTHREADTYPE_GUI              , g_pProcessPriority->paTypes[RTTHREADTYPE_GUI              ].iPriority));
VBox/Runtime/r3/linux/sched-linux.cpp:352:    Log(("Priority:  %2d MAIN_WORKER       = %d\n", RTTHREADTYPE_MAIN_WORKER      , g_pProcessPriority->paTypes[RTTHREADTYPE_MAIN_WORKER      ].iPriority));
VBox/Runtime/r3/linux/sched-linux.cpp:353:    Log(("Priority:  %2d VRDP_IO           = %d\n", RTTHREADTYPE_VRDP_IO          , g_pProcessPriority->paTypes[RTTHREADTYPE_VRDP_IO          ].iPriority));
VBox/Runtime/r3/linux/sched-linux.cpp:354:    Log(("Priority:  %2d DEBUGGER          = %d\n", RTTHREADTYPE_DEBUGGER         , g_pProcessPriority->paTypes[RTTHREADTYPE_DEBUGGER         ].iPriority));
VBox/Runtime/r3/linux/sched-linux.cpp:355:    Log(("Priority:  %2d MSG_PUMP          = %d\n", RTTHREADTYPE_MSG_PUMP         , g_pProcessPriority->paTypes[RTTHREADTYPE_MSG_PUMP         ].iPriority));
VBox/Runtime/r3/linux/sched-linux.cpp:356:    Log(("Priority:  %2d IO                = %d\n", RTTHREADTYPE_IO               , g_pProcessPriority->paTypes[RTTHREADTYPE_IO               ].iPriority));
VBox/Runtime/r3/linux/sched-linux.cpp:357:    Log(("Priority:  %2d TIMER             = %d\n", RTTHREADTYPE_TIMER            , g_pProcessPriority->paTypes[RTTHREADTYPE_TIMER            ].iPriority));
VBox/Runtime/r3/linux/sched-linux.cpp:602:        Log(("rtThreadNativeSetPriority: Thread=%p enmType=%d iPriority=%d pid=%d\n", pThread->Core.Key, enmType, iPriority, getpid()));
VBox/Runtime/r3/solaris/coredumper-solaris.cpp:80:#define CORELOG(a)          Log(a)
VBox/Runtime/r3/solaris/mp-solaris.cpp:176:                            Log(("rtMpSolarisGetCoreIds failed. rc=%Rrc\n", rc));
VBox/Runtime/r3/solaris/mp-solaris.cpp:202:        Log(("kstat_open() -> %d (%Rrc)\n", errno, rc));
VBox/Runtime/r3/solaris/mp-solaris.cpp:266:                        Log(("kstat_data_lookup(%s) -> %d\n", pszStatName, errno));
VBox/Runtime/r3/solaris/mp-solaris.cpp:269:                    Log(("kstat_read() -> %d\n", errno));
VBox/Runtime/r3/solaris/mp-solaris.cpp:274:            Log(("invalid idCpu: %d (g_capCpuInfo=%d)\n", (int)idCpu, (int)g_capCpuInfo));
VBox/Runtime/r3/alloc-ef.cpp:121: * Log an event.
VBox/Runtime/r3/win/path-win.cpp:512:                    Log(("RTPathSetTimes('%s', %p, %p, %p, %p): SetFileTime failed with lasterr %d (%Rrc)\n",
VBox/Runtime/r3/win/path-win.cpp:522:            Log(("RTPathSetTimes('%s',,,,): failed with %Rrc and lasterr=%u\n", pszPath, rc, Err));
VBox/Runtime/r3/win/path-win.cpp:584:                    Log(("MoveFileExW('%s', '%s', %#x, %RTfmode): fails with rc=%Rrc & lasterr=%d\n",
VBox/Runtime/r3/win/localipc-win.cpp:965:    Log(("rtLocalIpcSessionReleaseAndUnlock: %u refs left\n", cRefs));
VBox/Runtime/r3/win/localipc-win.cpp:982:        Log(("RTLocalIpcSessionRelease: %u refs left\n", cRefs));
VBox/Runtime/r3/win/RTLogWriteDebugger-win.cpp:3: * IPRT - Log To Debugger, Win32.
VBox/Runtime/r3/win/timer-win.cpp:292:    Log(("NtQueryTimerResolution -> ulMax=%lu00ns ulMin=%lu00ns ulCur=%lu00ns\n", ulMax, ulMin, ulCur));
VBox/Runtime/r3/win/timer-win.cpp:296:            Log(("Changed timer resolution to 1ms.\n"));
VBox/Runtime/r3/win/timer-win.cpp:298:            Log(("Changed timer resolution to 2ms.\n"));
VBox/Runtime/r3/win/timer-win.cpp:300:            Log(("Changed timer resolution to 4ms.\n"));
VBox/Runtime/r3/win/timer-win.cpp:302:            Log(("Changed timer resolution to %lu *100ns.\n", ulMin));
VBox/Runtime/r3/win/timer-win.cpp:332:            Log(("NtQueryTimerResolution -> ulMax=%lu00ns ulMin=%lu00ns ulCur=%lu00ns\n", ulMax, ulMin, ulCur));
VBox/Runtime/r3/win/fs-win.cpp:213:            Log(("RTFsQuerySizes(%s,): GetDiskFreeSpaceEx failed with lasterr %d (%Rrc)\n",
VBox/Runtime/r3/win/fs-win.cpp:238:            Log(("RTFsQuerySizes(%s,): GetDiskFreeSpace failed with lasterr %d (%Rrc)\n",
VBox/Runtime/r3/win/fs-win.cpp:279:        Log(("RTFsQuerySizes(%s,): GetDiskFreeSpaceEx failed with lasterr %d (%Rrc)\n",
VBox/Runtime/r3/win/fs-win.cpp:331:        Log(("RTFsQuerySizes(%s,): GetVolumeInformation failed with lasterr %d (%Rrc)\n",
VBox/Runtime/r3/win/fileio-win.cpp:594:        Log(("FlushFileBuffers failed with %d\n", rc));
VBox/Runtime/r3/win/fileio-win.cpp:972:        Log(("RTFileSetTimes(%RTfile, %p, %p, %p, %p): SetFileTime failed with lasterr %d (%Rrc)\n",
VBox/Runtime/r3/win/fileio-win.cpp:1000:        Log(("RTFileSetMode(%RTfile, %RTfmode): rtFileNativeSetAttributes (0x%08X) failed with err %d (%Rrc)\n",
VBox/Runtime/r3/posix/fileio-posix.cpp:706:        Log(("RTFileSetMode(%RTfile,%RTfmode): returns %Rrc\n", hFile, fMode, rc));
VBox/Runtime/r3/posix/localipc-posix.cpp:269:    Log(("RTLocalIpcServerCreate: failed, rc=%Rrc\n", rc));
VBox/Runtime/r3/posix/localipc-posix.cpp:297:        Log(("rtLocalIpcServerDtor: Released socket\n"));
VBox/Runtime/r3/posix/localipc-posix.cpp:299:        Log(("rtLocalIpcServerDtor: Socket still has references (impossible?)\n"));
VBox/Runtime/r3/posix/localipc-posix.cpp:333:    Log(("rtLocalIpcServerCancel:\n"));
VBox/Runtime/r3/posix/localipc-posix.cpp:416:                    Log(("RTLocalIpcServerListen: Calling rtSocketAccept...\n"));
VBox/Runtime/r3/posix/localipc-posix.cpp:418:                    Log(("RTLocalIpcServerListen: rtSocketAccept returns %Rrc.\n", rc));
VBox/Runtime/r3/posix/localipc-posix.cpp:441:                                Log(("RTLocalIpcServerListen: Returning new client session: %p\n", pSession));
VBox/Runtime/r3/posix/localipc-posix.cpp:474:    Log(("RTLocalIpcServerListen: returns %Rrc\n", rc));
VBox/Runtime/r3/posix/localipc-posix.cpp:526:                            Log(("RTLocalIpcSessionConnect: Returns new session %p\n", pThis));
VBox/Runtime/r3/posix/localipc-posix.cpp:538:    Log(("RTLocalIpcSessionConnect: returns %Rrc\n", rc));
VBox/Runtime/r3/posix/localipc-posix.cpp:577:        Log(("rtLocalIpcSessionDtor: Released socket\n"));
VBox/Runtime/r3/posix/localipc-posix.cpp:579:        Log(("rtLocalIpcSessionDtor: Socket still has references (impossible?)\n"));
VBox/Runtime/r3/posix/localipc-posix.cpp:598:    Log(("rtLocalIpcSessionRelease: %u refs left\n", cRefs));
VBox/Runtime/r3/posix/localipc-posix.cpp:615:        Log(("RTLocalIpcSessionRelease: %u refs left\n", cRefs));
VBox/Runtime/r3/posix/localipc-posix.cpp:632:    Log(("rtLocalIpcSessionCancel:\n"));
VBox/Runtime/r3/posix/localipc-posix.cpp:657:    Log(("RTLocalIpcSessionClose:\n"));
VBox/Runtime/r3/posix/localipc-posix.cpp:966:                    Log(("RTLocalIpcSessionWaitForData: Calling RTSocketSelectOneEx...\n"));
VBox/Runtime/r3/posix/localipc-posix.cpp:968:                    Log(("RTLocalIpcSessionWaitForData: RTSocketSelectOneEx returns %Rrc, fEvents=%#x\n", rc, fEvents));
VBox/Runtime/r3/posix/localipc-posix.cpp:978:                    Log(("RTLocalIpcSessionWaitForData: Calling poll...\n"));
VBox/Runtime/r3/posix/localipc-posix.cpp:1008:                    Log(("RTLocalIpcSessionWaitForData: poll returns %u (rc=%d), revents=%#x\n", cFds, rc, PollFd.revents));
VBox/Runtime/r3/posix/fileio2-posix.cpp:91:        Log(("RTFileQueryInfo(%RTfile,,%d): returns %Rrc\n", hFile, enmAdditionalAttribs, rc));
VBox/Runtime/r3/posix/fileio2-posix.cpp:165:        Log(("RTFileSetTimes(%RTfile,%p,%p,,): returns %Rrc\n", hFile, pAccessTime, pModificationTime, rc));
VBox/Runtime/r3/posix/fileio2-posix.cpp:194:        Log(("RTFileSetTimes(%RTfile,%p,%p,,): returns %Rrc\n", hFile, pAccessTime, pModificationTime, rc));
VBox/Runtime/r3/posix/path-posix.cpp:220:                            Log(("rtPathRename('%s', '%s', %#x ,%RTfmode): appears to be the same file... (errno=%d)\n",
VBox/Runtime/r3/posix/path-posix.cpp:240:                                        Log(("rtPathRename('%s', '%s', %#x ,%RTfmode): rename failed rc=%Rrc errno=%d\n",
VBox/Runtime/r3/posix/path-posix.cpp:247:                                    Log(("rtPathRename('%s', '%s', %#x ,%RTfmode): failed to unlink dst rc=%Rrc errno=%d\n",
VBox/Runtime/r3/posix/path-posix.cpp:252:                                Log(("rtPathRename('%s', '%s', %#x ,%RTfmode): dst !dir check failed rc=%Rrc\n",
VBox/Runtime/r3/posix/path-posix.cpp:261:                        Log(("rtPathRename('%s', '%s', %#x ,%RTfmode): rename failed rc=%Rrc errno=%d\n",
VBox/Runtime/r3/posix/path-posix.cpp:266:                    Log(("rtPathRename('%s', '%s', %#x ,%RTfmode): destination check failed rc=%Rrc errno=%d\n",
VBox/Runtime/r3/posix/path-posix.cpp:270:                Log(("rtPathRename('%s', '%s', %#x ,%RTfmode): source type check failed rc=%Rrc errno=%d\n",
VBox/Runtime/r3/posix/path-posix.cpp:297:    Log(("RTPathRename(%p:{%s}, %p:{%s}, %#x): returns %Rrc\n", pszSrc, pszSrc, pszDst, pszDst, fRename, rc));
VBox/Runtime/r3/posix/path2-posix.cpp:180:                    Log(("RTPathSetTimes('%s',%p,%p,,): RTPathQueryInfo failed with %Rrc\n",
VBox/Runtime/r3/posix/path2-posix.cpp:214:                    Log(("RTPathSetTimes('%s',%p,%p,,): failed with %Rrc and errno=%d\n",
VBox/Runtime/r3/posix/path2-posix.cpp:280:            Log(("RTPathSetOwnerEx('%s',%d,%d): failed with %Rrc and errno=%d\n",
VBox/Runtime/r3/posix/ldrNative-posix.cpp:123:    Log(("rtldrNativeFree: dlclose(%p) failed: %s\n", pModNative->hNative, dlerror()));
VBox/Runtime/r3/posix/timer-posix.cpp:462:            Log(("RTTimerCreate: interval={%ld,%ld} trying to adjust /dev/rtc!\n", TimerVal.it_interval.tv_sec, TimerVal.it_interval.tv_usec));
VBox/Runtime/r3/posix/timer-posix.cpp:469:                    Log(("RTTimerCreate: couldn't configure rtc! errno=%d\n", errno));
VBox/Runtime/r3/posix/timer-posix.cpp:476:                Log(("RTTimerCreate: couldn't configure rtc! open failed with errno=%d\n", errno));
VBox/Runtime/r3/posix/timer-posix.cpp:624:            Log(("RTTimerCreateEx: err=%d (%Rrc)\n", err, rc));
VBox/Runtime/r3/posix/sched-posix.cpp:420:    Log(("Priority: g_fCanNice=%d g_enmOsPrioSup=%d\n", g_fCanNice, g_enmOsPrioSup));
VBox/Runtime/r3/posix/sched-posix.cpp:421:    Log(("Priority: enmPriority=%d \"%s\" iNice=%d iDelta=%d\n",
VBox/Runtime/r3/posix/sched-posix.cpp:426:    Log(("Priority:  %2d INFREQUENT_POLLER = %d\n", RTTHREADTYPE_INFREQUENT_POLLER, g_pProcessPriority->paTypes[RTTHREADTYPE_INFREQUENT_POLLER].iPriority));
VBox/Runtime/r3/posix/sched-posix.cpp:427:    Log(("Priority:  %2d MAIN_HEAVY_WORKER = %d\n", RTTHREADTYPE_MAIN_HEAVY_WORKER, g_pProcessPriority->paTypes[RTTHREADTYPE_MAIN_HEAVY_WORKER].iPriority));
VBox/Runtime/r3/posix/sched-posix.cpp:428:    Log(("Priority:  %2d EMULATION         = %d\n", RTTHREADTYPE_EMULATION        , g_pProcessPriority->paTypes[RTTHREADTYPE_EMULATION        ].iPriority));
VBox/Runtime/r3/posix/sched-posix.cpp:429:    Log(("Priority:  %2d DEFAULT           = %d\n", RTTHREADTYPE_DEFAULT          , g_pProcessPriority->paTypes[RTTHREADTYPE_DEFAULT          ].iPriority));
VBox/Runtime/r3/posix/sched-posix.cpp:430:    Log(("Priority:  %2d GUI               = %d\n", RTTHREADTYPE_GUI              , g_pProcessPriority->paTypes[RTTHREADTYPE_GUI              ].iPriority));
VBox/Runtime/r3/posix/sched-posix.cpp:431:    Log(("Priority:  %2d MAIN_WORKER       = %d\n", RTTHREADTYPE_MAIN_WORKER      , g_pProcessPriority->paTypes[RTTHREADTYPE_MAIN_WORKER      ].iPriority));
VBox/Runtime/r3/posix/sched-posix.cpp:432:    Log(("Priority:  %2d VRDP_IO           = %d\n", RTTHREADTYPE_VRDP_IO          , g_pProcessPriority->paTypes[RTTHREADTYPE_VRDP_IO          ].iPriority));
VBox/Runtime/r3/posix/sched-posix.cpp:433:    Log(("Priority:  %2d DEBUGGER          = %d\n", RTTHREADTYPE_DEBUGGER         , g_pProcessPriority->paTypes[RTTHREADTYPE_DEBUGGER         ].iPriority));
VBox/Runtime/r3/posix/sched-posix.cpp:434:    Log(("Priority:  %2d MSG_PUMP          = %d\n", RTTHREADTYPE_MSG_PUMP         , g_pProcessPriority->paTypes[RTTHREADTYPE_MSG_PUMP         ].iPriority));
VBox/Runtime/r3/posix/sched-posix.cpp:435:    Log(("Priority:  %2d IO                = %d\n", RTTHREADTYPE_IO               , g_pProcessPriority->paTypes[RTTHREADTYPE_IO               ].iPriority));
VBox/Runtime/r3/posix/sched-posix.cpp:436:    Log(("Priority:  %2d TIMER             = %d\n", RTTHREADTYPE_TIMER            , g_pProcessPriority->paTypes[RTTHREADTYPE_TIMER            ].iPriority));
VBox/Runtime/r3/posix/sched-posix.cpp:768:                    Log(("rtThreadNativeSetPriority: Thread=%p enmType=%d iPolicy=%d sched_priority=%d pid=%d\n",
VBox/Runtime/r3/posix/sched-posix.cpp:789:                Log(("rtThreadNativeSetPriority: Thread=%p enmType=%d iPriority=%d pid=%d\n", pThread->Core.Key, enmType, iPriority, getpid()));
VBox/ExtPacks/BusMouseSample/BusMouse.cpp:667:                Log(("%s/%d: warning: no driver attached to LUN #0!\n", pDevIns->pReg->szName, pDevIns->iInstance));
VBox/ExtPacks/BusMouseSample/BusMouse.cpp:769:    Log(("busmouse: IRQ=%d fGCEnabled=%RTbool fR0Enabled=%RTbool\n", irq_lvl, fGCEnabled, fR0Enabled));
VBox/Devices/VirtIO/Virtio.cpp:72:    //Log(("%s vringReadDesc: ring=%p idx=%u\n", INSTANCE(pState), pVRing, uIndex));
VBox/Devices/VirtIO/Virtio.cpp:294:            Log(("%s vqueueNotify: Failed to raise an interrupt (%Rrc).\n", INSTANCE(pState), rc));
VBox/Devices/VirtIO/Virtio.cpp:511:                    Log(("%s WARNING! Guest failed to negotiate properly (guest=%x)\n",
VBox/Devices/VirtIO/Virtio.cpp:517:                    Log(("%s Guest asked for features host does not support! (host=%x guest=%x)\n",
VBox/Devices/VirtIO/Virtio.cpp:566:                    Log(("%s The queue (#%d) being notified has not been initialized.\n",
VBox/Devices/VirtIO/Virtio.cpp:570:                Log(("%s Invalid queue number (%d)\n", INSTANCE(pState), u32));
VBox/Devices/VirtIO/Virtio.cpp:957:    Log(("%s Destroying PCI instance\n", INSTANCE(pState)));
VBox/Devices/VirtIO/Virtio.cpp:1004:        Log(("%s Too many queues being added, no empty slots available!\n", INSTANCE(pState)));
VBox/Devices/VMMDev/VMMDev.cpp:156: * Log information about the Guest Additions.
VBox/Devices/VMMDev/VMMDev.cpp:243:        Log(("vmmdevSetIRQ: fEvents=%#010x, u32HostEventFlags=%#010x, u32GuestEventMask=%#010x.\n",
VBox/Devices/VMMDev/VMMDev.cpp:254:            Log(("vmmdevSetIRQ: u32HostEventFlags=%#010x\n", pThis->u32HostEventFlags));
VBox/Devices/VMMDev/VMMDev.cpp:261:        Log(("vmmdevSetIRQ: IRQ set %d\n", uIRQLevel));
VBox/Devices/VMMDev/VMMDev.cpp:264:        Log(("vmmdevSetIRQ: IRQ is not generated, guest has not yet reported to us.\n"));
VBox/Devices/VMMDev/VMMDev.cpp:324:            Log(("vmmdevNotifyGuestWorker: IRQ is not generated, guest has not yet reported to us.\n"));
VBox/Devices/VMMDev/VMMDev.cpp:389:    Log(("VMMDevCtlSetGuestFilterMask: fOrMask=%#010x, u32NotMask=%#010x, fHadEvents=%d.\n", fOrMask, fNotMask, fHadEvents));
VBox/Devices/VMMDev/VMMDev.cpp:1081:    Log(("VMMDevReq_SetPointerShape: visible: %d, alpha: %d, shape = %d, width: %d, height: %d\n",
VBox/Devices/VMMDev/VMMDev.cpp:1327:    Log(("VMMDev: returning display change request xres = %d, yres = %d, bpp = %d\n", pReq->xres, pReq->yres, pReq->bpp));
VBox/Devices/VMMDev/VMMDev.cpp:1414:    Log(("VMMDev: returning display change request xres = %d, yres = %d, bpp = %d at %d\n",
VBox/Devices/VMMDev/VMMDev.cpp:1514:    Log(("VMMDevEx: returning display change request xres = %d, yres = %d, bpp = %d id %d xPos = %d, yPos = %d & Enabled=%d\n",
VBox/Devices/VMMDev/VMMDev.cpp:1657:        Log(("VMMDevReq_HGCMConnect\n"));
VBox/Devices/VMMDev/VMMDev.cpp:1661:    Log(("VMMDevReq_HGCMConnect: HGCM Connector is NULL!\n"));
VBox/Devices/VMMDev/VMMDev.cpp:1681:        Log(("VMMDevReq_VMMDevHGCMDisconnect\n"));
VBox/Devices/VMMDev/VMMDev.cpp:1685:    Log(("VMMDevReq_VMMDevHGCMDisconnect: HGCM Connector is NULL!\n"));
VBox/Devices/VMMDev/VMMDev.cpp:1711:    Log(("VMMDevReq_HGCMCall: HGCM Connector is NULL!\n"));
VBox/Devices/VMMDev/VMMDev.cpp:1730:        Log(("VMMDevReq_VMMDevHGCMCancel\n"));
VBox/Devices/VMMDev/VMMDev.cpp:1734:    Log(("VMMDevReq_VMMDevHGCMCancel: HGCM Connector is NULL!\n"));
VBox/Devices/VMMDev/VMMDev.cpp:1753:        Log(("VMMDevReq_HGCMCancel2\n"));
VBox/Devices/VMMDev/VMMDev.cpp:1757:    Log(("VMMDevReq_HGCMConnect2: HGCM Connector is NULL!\n"));
VBox/Devices/VMMDev/VMMDev.cpp:1778:        Log(("VMMDevReq_VideoAccelEnable Connector is NULL!!\n"));
VBox/Devices/VMMDev/VMMDev.cpp:1831:        Log(("VMMDevReq_VideoAccelFlush: Connector is NULL!!!\n"));
VBox/Devices/VMMDev/VMMDev.cpp:1854:        Log(("VMMDevReq_VideoSetVisibleRegion: Connector is NULL!!!\n"));
VBox/Devices/VMMDev/VMMDev.cpp:1861:        Log(("VMMDevReq_VideoSetVisibleRegion: cRects=%#x doesn't match size=%#x or is out of bounds\n",
VBox/Devices/VMMDev/VMMDev.cpp:1866:    Log(("VMMDevReq_VideoSetVisibleRegion %d rectangles\n", pReq->cRect));
VBox/Devices/VMMDev/VMMDev.cpp:1885:    Log(("VMMDev: returning seamless change request mode=%d\n", pThis->fSeamlessEnabled));
VBox/Devices/VMMDev/VMMDev.cpp:1914:    Log(("VMMDev: returning VRDP status %d level %d\n", pThis->fVRDPEnabled, pThis->uVRDPExperienceLevel));
VBox/Devices/VMMDev/VMMDev.cpp:1936:    Log(("VMMDev: returning memory balloon size =%d\n", pThis->cMbMemoryBalloon));
VBox/Devices/VMMDev/VMMDev.cpp:1965:    Log(("VMMDevReq_ChangeMemBalloon\n"));
VBox/Devices/VMMDev/VMMDev.cpp:1987:    Log(("VMMDevReq_GetStatisticsChangeRequest\n"));
VBox/Devices/VMMDev/VMMDev.cpp:1989:    Log(("VMMDev: returning statistics interval %d seconds\n", pThis->u32StatIntervalSize));
VBox/Devices/VMMDev/VMMDev.cpp:2014:    Log(("VMMDevReq_ReportGuestStats\n"));
VBox/Devices/VMMDev/VMMDev.cpp:2018:    Log(("Current statistics:\n"));
VBox/Devices/VMMDev/VMMDev.cpp:2020:        Log(("CPU%u: CPU Load Idle          %-3d%%\n", pGuestStats->u32CpuId, pGuestStats->u32CpuLoad_Idle));
VBox/Devices/VMMDev/VMMDev.cpp:2023:        Log(("CPU%u: CPU Load Kernel        %-3d%%\n", pGuestStats->u32CpuId, pGuestStats->u32CpuLoad_Kernel));
VBox/Devices/VMMDev/VMMDev.cpp:2026:        Log(("CPU%u: CPU Load User          %-3d%%\n", pGuestStats->u32CpuId, pGuestStats->u32CpuLoad_User));
VBox/Devices/VMMDev/VMMDev.cpp:2029:        Log(("CPU%u: Thread                 %d\n", pGuestStats->u32CpuId, pGuestStats->u32Threads));
VBox/Devices/VMMDev/VMMDev.cpp:2032:        Log(("CPU%u: Processes              %d\n", pGuestStats->u32CpuId, pGuestStats->u32Processes));
VBox/Devices/VMMDev/VMMDev.cpp:2035:        Log(("CPU%u: Handles                %d\n", pGuestStats->u32CpuId, pGuestStats->u32Handles));
VBox/Devices/VMMDev/VMMDev.cpp:2038:        Log(("CPU%u: Memory Load            %d%%\n", pGuestStats->u32CpuId, pGuestStats->u32MemoryLoad));
VBox/Devices/VMMDev/VMMDev.cpp:2041:    Log(("CPU%u: Page size              %-4d bytes\n", pGuestStats->u32CpuId, pGuestStats->u32PageSize));
VBox/Devices/VMMDev/VMMDev.cpp:2045:        Log(("CPU%u: Total physical memory  %-4d MB\n", pGuestStats->u32CpuId, (pGuestStats->u32PhysMemTotal + (_1M/_4K)-1) / (_1M/_4K)));
VBox/Devices/VMMDev/VMMDev.cpp:2048:        Log(("CPU%u: Free physical memory   %-4d MB\n", pGuestStats->u32CpuId, pGuestStats->u32PhysMemAvail / (_1M/_4K)));
VBox/Devices/VMMDev/VMMDev.cpp:2051:        Log(("CPU%u: Memory balloon size    %-4d MB\n", pGuestStats->u32CpuId, pGuestStats->u32PhysMemBalloon / (_1M/_4K)));
VBox/Devices/VMMDev/VMMDev.cpp:2054:        Log(("CPU%u: Committed memory       %-4d MB\n", pGuestStats->u32CpuId, pGuestStats->u32MemCommitTotal / (_1M/_4K)));
VBox/Devices/VMMDev/VMMDev.cpp:2057:        Log(("CPU%u: Total kernel memory    %-4d MB\n", pGuestStats->u32CpuId, pGuestStats->u32MemKernelTotal / (_1M/_4K)));
VBox/Devices/VMMDev/VMMDev.cpp:2060:        Log(("CPU%u: Paged kernel memory    %-4d MB\n", pGuestStats->u32CpuId, pGuestStats->u32MemKernelPaged / (_1M/_4K)));
VBox/Devices/VMMDev/VMMDev.cpp:2063:        Log(("CPU%u: Nonpaged kernel memory %-4d MB\n", pGuestStats->u32CpuId, pGuestStats->u32MemKernelNonPaged / (_1M/_4K)));
VBox/Devices/VMMDev/VMMDev.cpp:2066:        Log(("CPU%u: System cache size      %-4d MB\n", pGuestStats->u32CpuId, pGuestStats->u32MemSystemCache / (_1M/_4K)));
VBox/Devices/VMMDev/VMMDev.cpp:2069:        Log(("CPU%u: Page file size         %-4d MB\n", pGuestStats->u32CpuId, pGuestStats->u32PageFileSize / (_1M/_4K)));
VBox/Devices/VMMDev/VMMDev.cpp:2070:    Log(("Statistics end *******************\n"));
VBox/Devices/VMMDev/VMMDev.cpp:2176:        Log(("VMMDevReq_ReportCredentialsJudgement: invalid flags: %d!!!\n", pReq->u32Flags));
VBox/Devices/VMMDev/VMMDev.cpp:2736:            Log(("VMMDev unknown request type %d\n", pReqHdr->requestType));
VBox/Devices/VMMDev/VMMDev.cpp:2765:        Log(("VMMDev request header size too small! size = %d\n", requestHeader.size));
VBox/Devices/VMMDev/VMMDev.cpp:2772:        Log(("VMMDev: guest header version (0x%08X) differs from ours (0x%08X)\n", requestHeader.version, VMMDEV_REQUEST_HEADER_VERSION));
VBox/Devices/VMMDev/VMMDev.cpp:2821:                Log(("VMMDev: RTMemAlloc failed!\n"));
VBox/Devices/VMMDev/VMMDev.cpp:2981:                LogRelIt(RTLOGGRPFLAGS_LEVEL_1, LOG_GROUP_DEV_VMM_BACKDOOR, ("VMMDev: Guest Log: %s\n", pThis->szMsg));
VBox/Devices/VMMDev/VMMDev.cpp:2989:                LogRelIt(RTLOGGRPFLAGS_LEVEL_1, LOG_GROUP_DEV_VMM_BACKDOOR, ("VMMDev: Guest Log: %s\n", pThis->szMsg));
VBox/Devices/VMMDev/VMMDev.cpp:3020:                Log(("vmmdevAltTimeSyncWrite: Invalid access cb=%#x u32=%#x\n", cb, u32));
VBox/Devices/VMMDev/VMMDev.cpp:3025:        Log(("vmmdevAltTimeSyncWrite: Invalid access cb=%#x u32=%#x\n", cb, u32));
VBox/Devices/VMMDev/VMMDev.cpp:3052:        Log(("vmmdevAltTimeSyncRead: Invalid access cb=%#x\n", cb));
VBox/Devices/VMMDev/VMMDev.cpp:3257:    Log(("vmmdevIPort_RequestSeamlessChange: same=%d. new=%d\n", fSameMode, fEnabled));
VBox/Devices/VMMDev/VMMDev.cpp:3281:    Log(("vmmdevIPort_SetMemoryBalloon: old=%u new=%u\n", pThis->cMbMemoryBalloonLast, cMbBalloon));
VBox/Devices/VMMDev/VMMDev.cpp:3305:    Log(("vmmdevIPort_VRDPChange: old=%d. new=%d\n", pThis->fVRDPEnabled, fVRDPEnabled));
VBox/Devices/VMMDev/VMMDev.cpp:3330:    Log(("vmmdevIPort_SetStatisticsInterval: old=%d. new=%d\n", pThis->u32LastStatIntervalSize, cSecsStatInterval));
VBox/Devices/VMMDev/VMMDev.cpp:3405:    Log(("vmmdevIPort_VBVAChange: fEnabled = %d\n", fEnabled));
VBox/Devices/VMMDev/VMMDev.cpp:3419:    Log(("vmmdevIPort_CpuHotUnplug: idCpuCore=%u idCpuPackage=%u\n", idCpuCore, idCpuPackage));
VBox/Devices/VMMDev/VMMDev.cpp:3445:    Log(("vmmdevCpuPlug: idCpuCore=%u idCpuPackage=%u\n", idCpuCore, idCpuPackage));
VBox/Devices/VMMDev/VMMDev.cpp:3677:    Log(("vmmdevLoadState: capabilities changed (%x), informing connector\n", pThis->mouseCapabilities));
VBox/Devices/VMMDev/VMMDev.cpp:3780:        Log(("vmmdevReset: capabilities changed (%x), informing connector\n", pThis->mouseCapabilities));
VBox/Devices/VMMDev/VMMDev.cpp:3807:        Log(("vmmdevReset: fu32AdditionsOk=%d additionsVersion=%x osType=%#x\n",
VBox/Devices/VMMDev/VMMDev.cpp:4147:        Log(("!!WARNING!!: pThis->PciDev.uDevFn=%d (ignore if testcase or no started by Main)\n", pThis->PciDev.uDevFn));
VBox/Devices/VMMDev/VMMDev.cpp:4205:            Log(("LUN #0 doesn't have a HGCM connector interface, HGCM is not supported. rc=%Rrc\n", rc));
VBox/Devices/VMMDev/VMMDev.cpp:4214:        Log(("Initial balloon size %x\n", pThis->cMbMemoryBalloon));
VBox/Devices/VMMDev/VMMDev.cpp:4218:        Log(("%s/%d: warning: no driver attached to LUN #0!\n", pDevIns->pReg->szName, pDevIns->iInstance));
VBox/Devices/VMMDev/VMMDevTesting.cpp:580:            Log(("VMMDEV_TESTING_IOPORT_CMD: bad access; cmd=%#x off=%#x cb=%#x u32=%#x\n", uCmd, off, cb, u32));
VBox/Devices/VMMDev/VMMDevHGCM.cpp:961:        Log(("vmmdevHGCMCancel2: GCPhys=%#x\n", GCPhys));
VBox/Devices/VMMDev/VMMDevHGCM.cpp:976:        Log(("vmmdevHGCMCancel2: Cancelled pCmd=%p / GCPhys=%#x\n", pCmd, GCPhys));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:212:            Log(("usb-linux: ENODEV -> unplugged. pProxyDev=%s\n", usbProxyGetName(pProxyDev)));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:277:            Log(("usbProxyLinuxSetConnected: failure, errno=%d. pProxyDev=%s\n",
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:701:    Log(("usbProxyLinuxOpen(%p, %s) failed, rc=%s!\n", pProxyDev, pszAddress,
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:742:        Log(("usbProxyLinuxInit: No active config! Tried to set %d: iActiveCfg=%d\n", iFirstCfg, pProxyDev->iActiveCfg));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:745:        Log(("usbProxyLinuxInit(%p): iActiveCfg=%d\n", pProxyDev, pProxyDev->iActiveCfg));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:781:            Log(("USB: Reset failed, errno=%d (ENODEV), pProxyDev=%s.\n", errno, usbProxyGetName(pProxyDev)));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1047:            Log(("usb-linux: Reset failed, rc=%s errno=%d.\n",
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1097:        Log(("usb-linux: Reset failed, rc=%s errno=%d.\n",
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1131:        Log(("usb-linux: Set configuration. errno=%d\n", errno));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1149:        Log(("usb-linux: Claim interface. errno=%d pProxyDev=%s\n", errno, usbProxyGetName(pProxyDev)));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1166:        Log(("usb-linux: Release interface, errno=%d. pProxyDev=%s\n", errno, usbProxyGetName(pProxyDev)));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1187:        Log(("usb-linux: Set interface, errno=%d. pProxyDev=%s\n", errno, usbProxyGetName(pProxyDev)));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1210:            Log(("usb-linux: clear_halted_ep failed errno=%d. pProxyDev=%s ep=%d - IGNORED\n",
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1214:        Log(("usb-linux: clear_halted_ep failed errno=%d. pProxyDev=%s ep=%d\n",
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1297:            Log(("usbProxyLinuxSubmitURB: ENODEV -> unplugged. pProxyDev=%s\n", usbProxyGetName(pProxyDev)));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1302:        Log(("usb-linux: Submit URB %p -> %d!!! type=%d ep=%#x buffer_length=%#x cTries=%d\n",
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1418:        Log(("usb-linux: Large ShortOK read, only queuing first fragment.\n"));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1554:            Log(("usbProxyLinuxUrbQueue: ENODEV -> unplugged. pProxyDev=%s\n", usbProxyGetName(pProxyDev)));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1580:        Log(("usb-linux: Queue URB %p -> %d!!! type=%d ep=%#x buffer_length=%#x cTries=%d\n",
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1636:            Log(("vusbProxyLinuxStatusToVUsbStatus: DNR/EPPROTO!!\n"));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1640:            Log(("vusbProxyLinuxStatusToVUsbStatus: STALL/EPIPE!!\n"));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1644:            Log(("vusbProxyLinuxStatusToVUsbStatus: SHUTDOWN!!\n"));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1648:            Log(("vusbProxyLinuxStatusToVUsbStatus: status %d!!\n", iStatus));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1719:                Log(("usbProxyLinuxUrbReap: poll rc = %d\n", rc));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1736:                    Log(("usb-linux: Reap URB - poll -> %d errno=%d pProxyDev=%s\n", rc, errno, usbProxyGetName(pProxyDev)));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1739:                Log(("usbProxyLinuxUrbReap: poll again - weird!!!\n"));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1755:                        Log(("usb-linux: Reap URB. errno=%d pProxyDev=%s\n", errno, usbProxyGetName(pProxyDev)));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1776:                        Log(("usb-linux: Allocating URB fragment failed. errno=%d pProxyDev=%s\n", errno, usbProxyGetName(pProxyDev)));
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1897:            Log(("usb-linux: Discard URB %p failed, errno=%d. pProxyDev=%s!!! (split)\n",
VBox/Devices/USB/linux/USBProxyDevice-linux.cpp:1908:            Log(("usb-linux: Discard URB %p failed, errno=%d. pProxyDev=%s!!!\n",
VBox/Devices/USB/VUSBDevice.cpp:131:        Log(("vusb: map message pipe on address %u\n", i8Addr));
VBox/Devices/USB/VUSBDevice.cpp:137:        Log(("vusb: map input pipe on address %u\n", i8Addr));
VBox/Devices/USB/VUSBDevice.cpp:142:        Log(("vusb: map output pipe on address %u\n", i8Addr));
VBox/Devices/USB/VUSBDevice.cpp:163:        Log(("vusb: unmap MSG pipe from address %u (%#x)\n", EndPt, pEndPtDesc->Core.bEndpointAddress));
VBox/Devices/USB/VUSBDevice.cpp:169:        Log(("vusb: unmap IN pipe from address %u (%#x)\n", EndPt, pEndPtDesc->Core.bEndpointAddress));
VBox/Devices/USB/VUSBDevice.cpp:174:        Log(("vusb: unmap OUT pipe from address %u (%#x)\n", EndPt, pEndPtDesc->Core.bEndpointAddress));
VBox/Devices/USB/VUSBDevice.cpp:193:            Log(("vusb: Endpoint 0x%x on interface %u.%u tried to override the default message pipe!!!\n",
VBox/Devices/USB/VUSBDevice.cpp:283:        Log(("vusb: error: %s: SET_CONFIGURATION - invalid request (dir) !!!\n", pDev->pUsbIns->pszName));
VBox/Devices/USB/VUSBDevice.cpp:301:        Log(("vusb: error: %s: config %i not found !!!\n", pDev->pUsbIns->pszName, iCfg));
VBox/Devices/USB/VUSBDevice.cpp:318:            Log(("vusb: error: %s: failed to set config %i (%Rrc) !!!\n", pDev->pUsbIns->pszName, iCfg, rc));
VBox/Devices/USB/VUSBDevice.cpp:322:    Log(("vusb: %p[%s]: SET_CONFIGURATION: Selected config %u\n", pDev, pDev->pUsbIns->pszName, iCfg));
VBox/Devices/USB/VUSBDevice.cpp:336:        Log(("vusb: error: %s: GET_CONFIGURATION - invalid request (dir) !!!\n", pDev->pUsbIns->pszName));
VBox/Devices/USB/VUSBDevice.cpp:379:        Log(("vusb: error: %s: GET_INTERFACE - invalid request (dir) !!!\n", pDev->pUsbIns->pszName));
VBox/Devices/USB/VUSBDevice.cpp:408:            Log(("vusb: %s: GET_INTERFACE: %u.%u\n", pDev->pUsbIns->pszName, pIfDesc->Core.bInterfaceNumber, *pbBuf));
VBox/Devices/USB/VUSBDevice.cpp:413:    Log(("vusb: error: %s: GET_INTERFACE - unknown iface %u !!!\n", pDev->pUsbIns->pszName, pSetup->wIndex));
VBox/Devices/USB/VUSBDevice.cpp:426:        Log(("vusb: error: %s: SET_INTERFACE - invalid request (dir) !!!\n", pDev->pUsbIns->pszName));
VBox/Devices/USB/VUSBDevice.cpp:474:    Log(("vusb: SET_INTERFACE: Selected %u.%u\n", iIf, iAlt));
VBox/Devices/USB/VUSBDevice.cpp:491:        Log(("vusb: error: %s: SET_ADDRESS - invalid request (dir) !!!\n", pDev->pUsbIns->pszName));
VBox/Devices/USB/VUSBDevice.cpp:524:            Log(("vusb: ClearFeature: dev(%u): selector=%u\n", pSetup->wIndex, pSetup->wValue));
VBox/Devices/USB/VUSBDevice.cpp:527:            Log(("vusb: ClearFeature: iface(%u): selector=%u\n", pSetup->wIndex, pSetup->wValue));
VBox/Devices/USB/VUSBDevice.cpp:530:            Log(("vusb: ClearFeature: ep(%u): selector=%u\n", pSetup->wIndex, pSetup->wValue));
VBox/Devices/USB/VUSBDevice.cpp:561:            Log(("vusb: SetFeature: dev(%u): selector=%u\n",
VBox/Devices/USB/VUSBDevice.cpp:565:            Log(("vusb: SetFeature: if(%u): selector=%u\n",
VBox/Devices/USB/VUSBDevice.cpp:569:            Log(("vusb: SetFeature: ep(%u): selector=%u\n",
VBox/Devices/USB/VUSBDevice.cpp:867:    Log(("vusb: %s: warning: unknown descriptor: type=%u descidx=%u lang=%u len=%u!!!\n",
VBox/Devices/USB/VUSBDevice.cpp:920:        Log(("vusb: warning: standard req not implemented: message %u: val=%u idx=%u len=%u !!!\n",
VBox/Devices/USB/VUSBDevice.cpp:1026:            Log(("2 DEFAULT ADDRS\n"));
VBox/Devices/USB/VUSBDevice.cpp:1038:    Log(("vusb: %p[%s]/%i: Assigned address %u\n",
VBox/Devices/USB/VUSBDevice.cpp:1496:        Log(("vusb: warning: attempt to power on detached device %p[%s]\n", pDev, pDev->pUsbIns->pszName));
VBox/Devices/USB/VUSBDevice.cpp:1532:        Log(("vusb: warning: attempt to power off detached device %p[%s]\n", pDev, pDev->pUsbIns->pszName));
VBox/Devices/USB/VUSBUrb.cpp:451:        Log(("vusbUrbQueueAsyncRh returning VERR_OBJECT_DESTROYED\n"));
VBox/Devices/USB/VUSBUrb.cpp:687:            Log(("vusbMsgSetup: out of memory!!! cbReq=%u\n", RT_OFFSETOF(VUSBCTRLEXTRA, Urb.abData[pExtra->cbMax])));
VBox/Devices/USB/VUSBUrb.cpp:709:            Log(("vusbMsgSetup: out of memory!!! cbReq=%u %u\n",
VBox/Devices/USB/VUSBUrb.cpp:890:                Log(("%s: vusbUrbSubmitCtrl: Stall at setup stage (dir=%#x)!!\n", pUrb->pszDesc, pUrb->enmDir));
VBox/Devices/USB/VUSBUrb.cpp:942:                    Log(("%s: vusbUrbSubmitCtrl: pSetup->wLength == 0!! (iPhone)\n", pUrb->pszDesc));
VBox/Devices/USB/VUSBUrb.cpp:958:                    Log(("%s: vusbUrbSubmitCtrl: Stall at data stage!!\n", pUrb->pszDesc));
VBox/Devices/USB/VUSBUrb.cpp:1122:        Log(("%s: pDev=%p[%s]: SUBMIT: ep %i >= %i!!!\n", pUrb->pszDesc, pDev, pDev->pUsbIns->pszName, pUrb->EndPt, VUSB_PIPE_MAX));
VBox/Devices/USB/VUSBUrb.cpp:1141:        Log(("%s: pDev=%p[%s]: SUBMIT: no endpoint!!! dir=%s e=%i\n",
VBox/Devices/USB/VUSBUrb.cpp:1167:            Log(("%s: pDev=%p[%s]: SUBMIT: %s transfer requested for %#x endpoint on DstAddress=%i ep=%i dir=%s\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:159:    Log(("%s: %*s: pDev=%p[%s] rc=%s a=%i e=%u d=%s t=%s cb=%#x(%d) ts=%RU64 (%RU64 ns ago) %s\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:199:        Log(("%s: %*s: CTRL: bmRequestType=0x%.2x (%s %s %s) bRequest=0x%.2x (%s) wValue=0x%.4x wIndex=0x%.4x wLength=0x%.4x\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:244:                    Log(("URB: %*s: DESC: warning descriptor length goes beyond the end of the URB! cbLength=%d cbLeft=%d\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:250:                Log(("URB: %*s: DESC: %04x: %25s = %#04x (%d)\n"
VBox/Devices/USB/VUSBUrbTrace.cpp:258:                        Log(("URB: %*s:       %04x: %25s = %#04x\n", s_cchMaxMsg, pszMsg, \
VBox/Devices/USB/VUSBUrbTrace.cpp:263:                        Log(("URB: %*s:       %04x: %25s = %#04x", s_cchMaxMsg, pszMsg, \
VBox/Devices/USB/VUSBUrbTrace.cpp:266:                        Log(("\n")); \
VBox/Devices/USB/VUSBUrbTrace.cpp:270:                        Log(("URB: %*s:       %04x: %25s = %#06x\n", s_cchMaxMsg, pszMsg, \
VBox/Devices/USB/VUSBUrbTrace.cpp:274:                        Log(("URB: %*s:       %04x: %25s = %#06x (%02x.%02x)\n", s_cchMaxMsg, pszMsg, \
VBox/Devices/USB/VUSBUrbTrace.cpp:279:                        Log(("URB: %*s:       %04x: WARNING %d extra byte(s) %.*Rhxs\n", s_cchMaxMsg, pszMsg, \
VBox/Devices/USB/VUSBUrbTrace.cpp:282:                        Log(("URB: %*s:       %04x: WARNING %d missing byte(s)! Expected size %d.\n", s_cchMaxMsg, pszMsg, \
VBox/Devices/USB/VUSBUrbTrace.cpp:307:                        Log(("DEV)\n"));
VBox/Devices/USB/VUSBUrbTrace.cpp:337:                        Log(("CFG)\n"));
VBox/Devices/USB/VUSBUrbTrace.cpp:346:                            Log((" %s - %s - %s", s_apszTransType[(pDesc->bmAttributes & 0x3)],
VBox/Devices/USB/VUSBUrbTrace.cpp:359:                            Log(("LANGIDs)\n"));
VBox/Devices/USB/VUSBUrbTrace.cpp:362:                                Log(("URB: %*s:       %04x: wLANGID[%#x] = %#06x\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:367:                                Log(("URB: %*s:       %04x: WARNING descriptor size is odd! extra byte: %02\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:373:                            Log(("STRING)\n"));
VBox/Devices/USB/VUSBUrbTrace.cpp:375:                                Log(("URB: %*s:       %04x: Length=%d String=%.*ls\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:378:                                Log(("URB: %*s:       %04x: Length=0!\n", s_cchMaxMsg, pszMsg, pb - pbData));
VBox/Devices/USB/VUSBUrbTrace.cpp:396:                        Log(("IF)\n"));
VBox/Devices/USB/VUSBUrbTrace.cpp:419:                        Log(("EP)\n"));
VBox/Devices/USB/VUSBUrbTrace.cpp:442:                        Log(("DEVQ)\n"));
VBox/Devices/USB/VUSBUrbTrace.cpp:467:                        Log(("OCFG)\n"));
VBox/Devices/USB/VUSBUrbTrace.cpp:476:                            Log((" %s - %s - %s", s_apszTransType[(pDesc->bmAttributes & 0x3)],
VBox/Devices/USB/VUSBUrbTrace.cpp:496:                        Log(("EP)\n"));
VBox/Devices/USB/VUSBUrbTrace.cpp:507:                        Log(("UNKNOWN-ignore)\n"));
VBox/Devices/USB/VUSBUrbTrace.cpp:511:                        Log(("UNKNOWN)!!!\n"));
VBox/Devices/USB/VUSBUrbTrace.cpp:523:                Log(("URB: %*s: DESC: %04x: bLength=%d bDescriptorType=%d - invalid length\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:551:        Log(("URB: %*s: SCSI: Tag=%#x DataTransferLength=%#x Flags=%#x Lun=%#x Length=%#x CDB=%.*Rhxs\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:558:                Log(("URB: %*s: SCSI: TEST_UNIT_READY LUN=%d Ctrl=%#RX8\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:562:                Log(("URB: %*s: SCSI: REQUEST_SENSE LUN=%d AlcLen=%#RX16 Ctrl=%#RX8\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:566:                Log(("URB: %*s: SCSI: INQUIRY EVPD=%d LUN=%d PgCd=%#RX8 AlcLen=%#RX8 Ctrl=%#RX8\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:570:                Log(("URB: %*s: SCSI: MODE_SENSE6 LUN=%d DBD=%d PC=%d PgCd=%#RX8 AlcLen=%#RX8 Ctrl=%#RX8\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:574:                Log(("URB: %*s: SCSI: MODE_SENSE10 LUN=%d DBD=%d PC=%d PgCd=%#RX8 AlcLen=%#RX16 Ctrl=%#RX8\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:579:                Log(("URB: %*s: SCSI: READ_CAPACITY\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:583:                Log(("URB: %*s: SCSI: READ10 RelAdr=%d FUA=%d DPO=%d LUN=%d LBA=%#RX32 Len=%#RX16 Ctrl=%#RX8\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:590:                Log(("URB: %*s: SCSI: READ12 RelAdr=%d FUA=%d DPO=%d LUN=%d LBA=%#RX32 Len=%#RX32 Ctrl=%#RX8\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:598:                Log(("URB: %*s: SCSI: READ LONG RelAdr=%d Correct=%d LUN=%d LBA=%#RX16 ByteLen=%#RX16 Ctrl=%#RX8\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:605:                Log(("URB: %*s: SCSI: WRITE10 RelAdr=%d EBP=%d FUA=%d DPO=%d LUN=%d LBA=%#RX32 Len=%#RX16 Ctrl=%#RX8\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:613:                Log(("URB: %*s: SCSI: WRITE12 RelAdr=%d EBP=%d FUA=%d DPO=%d LUN=%d LBA=%#RX32 Len=%#RX32 Ctrl=%#RX8\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:622:                Log(("URB: %*s: SCSI: WRITE LONG RelAdr=%d LUN=%d LBA=%#RX16 ByteLen=%#RX16 Ctrl=%#RX8\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:629:                Log(("URB: %*s: SCSI: SYNCHRONIZE_CACHE10\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:633:                Log(("URB: %*s: SCSI: REPORT_LUNS\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:637:                Log(("URB: %*s: SCSI: cmd=%#x\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:659:        Log(("URB: %*s: SCSI: Tag=%#x DataResidue=%#RX32 Status=%#RX8 %s\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:675:                Log(("URB: %*s: SCSI: RESPONSE: REQUEST_SENSE (%s)\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:677:                Log(("URB: %*s: SCSI: ErrCd=%#RX8 (%s) Seg=%#RX8 Filemark=%d EOM=%d ILI=%d\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:680:                Log(("URB: %*s: SCSI: SenseKey=%#x ASC=%#RX8 ASCQ=%#RX8 : %s\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:689:                Log(("URB: %*s: SCSI: RESPONSE: INQUIRY\n"
VBox/Devices/USB/VUSBUrbTrace.cpp:693:                Log(("URB: %*s: SCSI: ISOVer=%d ECMAVer=%d ANSIVer=%d\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:695:                Log(("URB: %*s: SCSI: AENC=%d TrmlOP=%d RespDataFmt=%d (%s) AddLen=%d\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:700:                Log(("URB: %*s: SCSI: RelAdr=%d WBus32=%d WBus16=%d Sync=%d Linked=%d CmdQue=%d SftRe=%d\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:705:                Log(("URB: %*s: SCSI: VendorId=%.8s\n", s_cchMaxMsg, pszMsg, &pb[8]));
VBox/Devices/USB/VUSBUrbTrace.cpp:708:                Log(("URB: %*s: SCSI: ProductId=%.16s\n", s_cchMaxMsg, pszMsg, &pb[16]));
VBox/Devices/USB/VUSBUrbTrace.cpp:711:                Log(("URB: %*s: SCSI: ProdRevLvl=%.4s\n", s_cchMaxMsg, pszMsg, &pb[32]));
VBox/Devices/USB/VUSBUrbTrace.cpp:713:                    Log(("URB: %*s: SCSI: VendorSpecific=%.*s\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:716:                    Log(("URB: %*s: SCSI: VendorParam=%.*Rhxs\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:722:                Log(("URB: %*s: SCSI: RESPONSE: READ_CAPACITY\n"
VBox/Devices/USB/VUSBUrbTrace.cpp:785:                Log(("URB: %*s: QUICKCAM: %s %#x (%d) %s '%s' (%#x)\n",
VBox/Devices/USB/VUSBUrbTrace.cpp:791:            Log(("URB: %*s: QUICKCAM: Unknown request: bRequest=%#x bmRequestType=%#x wValue=%#x wIndex=%#x: %.*Rhxs\n", s_cchMaxMsg, pszMsg,
VBox/Devices/USB/VUSBUrbTrace.cpp:794:            Log(("URB: %*s: QUICKCAM: Unknown request: bRequest=%#x bmRequestType=%#x wValue=%#x wIndex=%#x: (no data)\n", s_cchMaxMsg, pszMsg,
VBox/Devices/USB/VUSBSnifferUsbMon.cpp:146:        /* Log the setup packet for control requests, the status otherwise. */
VBox/Devices/USB/VUSBSnifferUsbMon.cpp:191:        /* Log the packet descriptors for isochronous URBs. */
VBox/Devices/USB/solaris/USBProxyDevice-solaris.cpp:45:/** Log Prefix. */
VBox/Devices/USB/vrdp/USBProxyDevice-vrdp.cpp:97:        Log(("usb-vrdp: remote device %p unplugged!!\n", pDevVrdp->pDevice));
VBox/Devices/USB/vrdp/USBProxyDevice-vrdp.cpp:117:        Log(("usb-vrdp: remote device %p unplugged!!\n", pDevVrdp->pDevice));
VBox/Devices/USB/vrdp/USBProxyDevice-vrdp.cpp:134:        Log(("usb-vrdp: remote device %p unplugged!!\n", pDevVrdp->pDevice));
VBox/Devices/USB/vrdp/USBProxyDevice-vrdp.cpp:151:        Log(("usb-vrdp: remote device %p unplugged!!\n", pDevVrdp->pDevice));
VBox/Devices/USB/vrdp/USBProxyDevice-vrdp.cpp:168:        Log(("usb-vrdp: remote device %p unplugged!!\n", pDevVrdp->pDevice));
VBox/Devices/USB/vrdp/USBProxyDevice-vrdp.cpp:185:        Log(("usb-vrdp: remote device %p unplugged!!\n", pDevVrdp->pDevice));
VBox/Devices/USB/vrdp/USBProxyDevice-vrdp.cpp:199:        Log(("usbproxy: isochronous transfers aren't implemented yet.\n"));
VBox/Devices/USB/vrdp/USBProxyDevice-vrdp.cpp:209:        Log(("usb-vrdp: remote device %p unplugged!!\n", pDevVrdp->pDevice));
VBox/Devices/USB/vrdp/USBProxyDevice-vrdp.cpp:239:        Log(("usb-vrdp: remote device %p unplugged!!\n", pDevVrdp->pDevice));
VBox/Devices/USB/VUSBSnifferVmx.cpp:154:        /* Log the data in the appropriate stage. */
VBox/Devices/USB/USBProxyDevice.cpp:101:            Log(("GetStdDescSync: pfnUrbReap failed, rc=%d\n", rc));
VBox/Devices/USB/USBProxyDevice.cpp:119:            Log(("GetStdDescSync: pfnUrbReap failed, pUrbReaped=%p\n", pUrbReaped));
VBox/Devices/USB/USBProxyDevice.cpp:125:            Log(("GetStdDescSync: Urb.enmStatus=%d\n", Urb.enmStatus));
VBox/Devices/USB/USBProxyDevice.cpp:136:                Log(("GetStdDescSync: Urb.cbData=%#x (min 4)\n", Urb.cbData));
VBox/Devices/USB/USBProxyDevice.cpp:145:                Log(("GetStdDescSync: Urb.cbData=%#x (min 1)\n", Urb.cbData));
VBox/Devices/USB/USBProxyDevice.cpp:151:        Log(("GetStdDescSync: got Urb.cbData=%u, cbDesc=%u cbHint=%u\n", Urb.cbData, cbDesc, cbHint));
VBox/Devices/USB/USBProxyDevice.cpp:157:            Log(("GetStdDescSync: Part descriptor, Urb.cbData=%u, cbDesc=%u cbHint=%u\n", Urb.cbData, cbDesc, cbHint));
VBox/Devices/USB/USBProxyDevice.cpp:160:                Log(("GetStdDescSync: cbHint=%u, Urb.abData=%u\n", cbHint, sizeof(Urb.abData)));
VBox/Devices/USB/USBProxyDevice.cpp:167:            Log(("GetStdDescSync: Descriptor length too short, cbDesc=%u, Urb.cbData=%u\n", cbDesc, Urb.cbData));
VBox/Devices/USB/USBProxyDevice.cpp:175:            Log(("GetStdDescSync: Descriptor length incorrect, cbDesc=%u, Urb.cbData=%u, cbHint=%u\n", cbDesc, Urb.cbData, cbHint));
VBox/Devices/USB/USBProxyDevice.cpp:192:            Log(("GetStdDescSync: Retrying %u/%u\n", cRetries, GET_DESC_RETRIES));
VBox/Devices/USB/USBProxyDevice.cpp:198:            Log(("GetStdDescSync: Retries exceeded %u/%u. Giving up.\n", cRetries, GET_DESC_RETRIES));
VBox/Devices/USB/USBProxyDevice.cpp:225:        Log(("usbProxyGetDeviceDesc: pProxyDev=%s: GetStdDescSync failed\n", pProxyDev->pUsbIns->pszName));
VBox/Devices/USB/USBProxyDevice.cpp:230:        Log(("usb-proxy: pProxyDev=%s: Corrupted device descriptor. bLength=%d\n", pProxyDev->pUsbIns->pszName, pIn->bLength));
VBox/Devices/USB/USBProxyDevice.cpp:474:        Log(("copy_config: GetStdDescSync failed\n"));
VBox/Devices/USB/USBProxyDevice.cpp:482:        Log(("copy_config: count_descriptors failed\n"));
VBox/Devices/USB/USBProxyDevice.cpp:487:        Log(("usb-proxy: config%u: bNumInterfaces %u != %u\n",
VBox/Devices/USB/USBProxyDevice.cpp:490:    Log(("usb-proxy: config%u: %u bytes id=%u ed=%u if=%u\n",
VBox/Devices/USB/USBProxyDevice.cpp:535:                    Log(("copy_interface(%d,,) failed\n", pIf - 1));
VBox/Devices/USB/USBProxyDevice.cpp:541:    Log(("usb-proxy: config%u: Corrupted configuration descriptor\n", idx));
VBox/Devices/USB/USBProxyDevice.cpp:565:                    Log(("usb-proxy: removing interface #%d (iIf=%d iAlt=%d) on config #%d (iCfg=%d)\n",
VBox/Devices/USB/USBProxyDevice.cpp:578:    Log(("usb-proxy: edited out %d interface(s).\n", cRemoved));
VBox/Devices/USB/USBProxyDevice.cpp:593:        Log(("usbProxyDevReset: pProxyDev=%s - ignoring reset request fMaskedIfs=%#x\n", pUsbIns->pszName, pProxyDev->fMaskedIfs));
VBox/Devices/USB/USBProxyDevice.cpp:779:    Log(("usbProxyDestruct: destroying pProxyDev=%s\n", pUsbIns->pszName));
VBox/Devices/USB/USBProxyDevice.cpp:938:        Log(("usbProxyConstruct: usbProxyGetDeviceDesc failed\n"));
VBox/Devices/USB/USBProxyDevice.cpp:958:        Log(("usbProxyConstruct: copy_config failed, i=%d\n", i));
VBox/Devices/USB/USBProxyDevice.cpp:1119:                            Log(("usb-proxy: pProxyDev=%s correcting wMaxPacketSize from %#x to %#x (mainly for vista)\n",
VBox/Devices/USB/USBProxyDevice.cpp:1135:        Log(("usb-proxy: %s correcting USB version 2.0 to 1.1 (to avoid Windows warning)\n", pUsbIns->pszName));
VBox/Devices/USB/USBProxyDevice.cpp:1174:                            Log(("usb-proxy: pProxyDev=%s async audio with bmAttr=%02X [%02X, %02X] on EP %02X\n",
VBox/Devices/USB/USBProxyDevice.cpp:1211:    Log(("usb-proxy: created pProxyDev=%s address '%s' fMaskedIfs=%#x (rc=%Rrc)\n",
VBox/Devices/USB/freebsd/USBProxyDevice-freebsd.cpp:151:        Log(("usbProxyFreeBSDDoIoCtl: ENXIO -> unplugged. pProxyDev=%s\n",
VBox/Devices/USB/freebsd/USBProxyDevice-freebsd.cpp:412:    Log(("usbProxyFreeBSDOpen(%p, %s) failed, rc=%d!\n",
VBox/Devices/USB/freebsd/USBProxyDevice-freebsd.cpp:448:    Log(("usbProxyFreeBSDInit: iActiveCfg=%d\n", pProxyDev->iActiveCfg));
VBox/Devices/USB/DrvVUSBRootHub.cpp:740:        Log(("vusb: pRh=%p: SUBMIT: Address %i not found!!!\n", pRh, pUrb->DstAddress));
VBox/Devices/USB/DrvVUSBRootHub.cpp:1367:    Log(("vusbRhConstruct: cPorts=%d\n", pThis->Hub.cPorts));
VBox/Devices/USB/DrvVUSBRootHub.cpp:1374:    Log(("vusbRhConstruct: fHcVersions=%u\n", pThis->fHcVersions));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:99:        Log(("usbproxy: device %x unplugged!!\n", pPriv->hDev));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:136:            Log(("usbProxyWinOpen: hDev=%p\n", pPriv->hDev));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:176:                        Log(("usbproxy: unable to claim device %x (%s)!!\n", pPriv->hDev, pszAddress));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:182:                    Log(("usbproxy: Version mismatch: %d.%d != %d.%d (cur)\n",
VBox/Devices/USB/win/USBProxyDevice-win.cpp:191:                Log(("usbproxy: last error %d\n", dwErr));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:200:            Log(("usbproxy: FAILED to open '%s'! last error %d\n", pszAddress, GetLastError()));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:225:    Log(("usbProxyWinClose: %p\n", pPriv->hDev));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:236:            Log(("usbproxy: usbProxyWinClose: DeviceIoControl %#x failed with %#x!!\n", pPriv->hDev, GetLastError()));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:260:    Log(("usbproxy: Reset %x\n", pPriv->hDev));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:279:        Log(("usbproxy: device %p unplugged!!\n", pPriv->hDev));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:300:    Log(("usbproxy: Set config of %p to %d\n", pPriv->hDev, cfg));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:345:    Log(("usbproxy: Select interface of %x to %d/%d\n", pPriv->hDev, iIf, setting));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:368:    Log(("usbproxy: Clear endpoint %d of %x\n", ep, pPriv->hDev));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:389:    Log(("usbproxy: Abort endpoint %d of %x\n", ep, pPriv->hDev));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:452:    Log(("usbproxy: Queue URB %p ep=%d cbData=%d abData=%p cIsocPkts=%d\n", pUrb, pUrb->EndPt, pUrb->cbData, pUrb->abData, pUrb->cIsocPkts));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:490:                Log(("usbproxy: device %p unplugged!!\n", pPriv->hDev));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:681:        Log(("usbproxy: pUrb=%p (#%d) ep=%d cbData=%d status=%d cIsocPkts=%d ready\n",
VBox/Devices/USB/win/USBProxyDevice-win.cpp:720:    Log(("usbproxy: Cancel urb %p, endpoint %x\n", pUrb, in.bEndpoint));
VBox/Devices/USB/win/USBProxyDevice-win.cpp:730:        Log(("usbproxy: device %x unplugged!!\n", pPriv->hDev));
VBox/Devices/USB/DevOHCI.cpp:1135:    Log(("ohci: root hub reset%s\n", fResetOnLinux ? " (reset on linux)" : ""));
VBox/Devices/USB/DevOHCI.cpp:1195:    Log(("ohci: %s reset%s\n", fNewMode == OHCI_USB_RESET ? "hardware" : "software",
VBox/Devices/USB/DevOHCI.cpp:2168:    Log(("ohciUnlinkIsocTdInList: Unlinking non-head ITD! TdAddr=%#010RX32 HeadTdAddr=%#010RX32 LastEdAddr=%#010RX32\n",
VBox/Devices/USB/DevOHCI.cpp:2191:    Log(("ohciUnlinkIsocTdInList: TdAddr=%#010RX32 wasn't found in the list!!! (cMax=%d)\n", TdAddr, cMax));
VBox/Devices/USB/DevOHCI.cpp:2200:    Log(("ohciUnlinkGeneralTdInList: Unlinking non-head TD! TdAddr=%#010RX32 HeadTdAddr=%#010RX32 LastEdAddr=%#010RX32\n",
VBox/Devices/USB/DevOHCI.cpp:2223:    Log(("ohciUnlinkGeneralTdInList: TdAddr=%#010RX32 wasn't found in the list!!! (cMax=%d)\n", TdAddr, cMax));
VBox/Devices/USB/DevOHCI.cpp:2378:                Log(("%s: ohciHasUrbBeenCanceled: iTd=%d cTds=%d TdAddr=%#010RX32 canceled (tail)! [iso]\n",
VBox/Devices/USB/DevOHCI.cpp:2395:                Log(("%s: ohciHasUrbBeenCanceled: iTd=%d cTds=%d TdAddr=%#010RX32 canceled! [iso]\n",
VBox/Devices/USB/DevOHCI.cpp:2418:                Log(("%s: ohciHasUrbBeenCanceled: iTd=%d cTds=%d TdAddr=%#010RX32 canceled (tail)!\n",
VBox/Devices/USB/DevOHCI.cpp:2431:                Log(("%s: ohciHasUrbBeenCanceled: iTd=%d cTds=%d TdAddr=%#010RX32 canceled!\n",
VBox/Devices/USB/DevOHCI.cpp:2464:            Log(("pUrb->enmStatus=%#x!!!\n", enmStatus));
VBox/Devices/USB/DevOHCI.cpp:2600:            Log(("DevOHCI: Taking untested code path at line %d...\n", __LINE__));
VBox/Devices/USB/DevOHCI.cpp:2643:        Log(("%s: ohciRhXferCompleteIsochronousURB: ITdAddr=%#010x EdAddr=%#010x SF=%#x (%#x) CC=%#x FC=%d "
VBox/Devices/USB/DevOHCI.cpp:2735:            Log(("%s: ohciRhXferCompleteGeneralURB: ED=%#010x TD=%#010x Age=%d enmStatus=%d cbTotal=%#x NewCbp=%#010RX32 dqic=%d\n",
VBox/Devices/USB/DevOHCI.cpp:2740:            Log(("%s: ohciRhXferCompleteGeneralURB: HALTED ED=%#010x TD=%#010x (age %d) pUrb->enmStatus=%d\n",
VBox/Devices/USB/DevOHCI.cpp:2762:                    Log(("pUrb->enmStatus=%#x!!!\n", pUrb->enmStatus));
VBox/Devices/USB/DevOHCI.cpp:2836:        Log(("%s: ohciRhXferCompletion: CANCELED {ED=%#010x cTds=%d TD0=%#010x age %d}\n",
VBox/Devices/USB/DevOHCI.cpp:2850:        Log(("%s: ohciRhXferCompletion: DROPPED {ED=%#010x cTds=%d TD0=%#010x age %d} because:%s%s%s%s%s!!!\n",
VBox/Devices/USB/DevOHCI.cpp:2918:        Log(("%s: ohciRhXferError: TdAddr0=%#x canceled!\n", pUrb->pszDesc, TdAddr));
VBox/Devices/USB/DevOHCI.cpp:2980:                    Log(("ohciServiceTd: Invalid direction!!!! Td.hwinfo=%#x Ed.hwdinfo=%#x\n", Td.hwinfo, pEd->hwinfo));
VBox/Devices/USB/DevOHCI.cpp:3023:    Log(("%s: ohciServiceTd: submitting TdAddr=%#010x EdAddr=%#010x cbData=%#x\n",
VBox/Devices/USB/DevOHCI.cpp:3033:    Log(("ohciServiceTd: failed submitting TdAddr=%#010x EdAddr=%#010x pUrb=%p!!\n",
VBox/Devices/USB/DevOHCI.cpp:3132:            Log(("ohciServiceTdMultiple: WARNING! Ed.hwdinfo=%#x bulk or interrupt EP shouldn't rely on the TD for direction...\n", pEd->hwinfo));
VBox/Devices/USB/DevOHCI.cpp:3138:                    Log(("ohciServiceTdMultiple: Invalid direction!!!! Head.Td.hwinfo=%#x Ed.hwdinfo=%#x\n", Head.Td.hwinfo, pEd->hwinfo));
VBox/Devices/USB/DevOHCI.cpp:3193:    Log(("%s: ohciServiceTdMultiple: submitting cbData=%#x EdAddr=%#010x cTds=%d TdAddr0=%#010x\n",
VBox/Devices/USB/DevOHCI.cpp:3202:    Log(("ohciServiceTdMultiple: failed submitting pUrb=%p cbData=%#x EdAddr=%#010x cTds=%d TdAddr0=%#010x - rc=%Rrc\n",
VBox/Devices/USB/DevOHCI.cpp:3315:            Log(("ohciServiceIsochronousTd: Invalid direction!!!! Ed.hwdinfo=%#x\n", pEd->hwinfo));
VBox/Devices/USB/DevOHCI.cpp:3332:        Log(("ITdAddr=%RX32 PSW%d.CC=%#x < 'Not Accessed'!\n", ITdAddr, R, pITd->aPSW[R] >> ITD_PSW_CC_SHIFT)); /* => Unrecoverable Error*/
VBox/Devices/USB/DevOHCI.cpp:3343:            Log(("ITdAddr=%RX32 PSW%d.offset=%#x < offPrev=%#x!\n", ITdAddr, iR, off, offPrev)); /* => Unrecoverable Error*/
VBox/Devices/USB/DevOHCI.cpp:3345:            Log(("ITdAddr=%RX32 PSW%d.CC=%#x < 'Not Accessed'!\n", ITdAddr, iR, PSW >> ITD_PSW_CC_SHIFT)); /* => Unrecoverable Error*/
VBox/Devices/USB/DevOHCI.cpp:3354:        Log(("ITdAddr=%RX32 offEnd=%#x < offPrev=%#x!\n", ITdAddr, offEnd, offPrev)); /* => Unrecoverable Error*/
VBox/Devices/USB/DevOHCI.cpp:3419:    Log(("%s: ohciServiceIsochronousTd: submitting cbData=%#x cIsocPkts=%d EdAddr=%#010x TdAddr=%#010x SF=%#x (%#x)\n",
VBox/Devices/USB/DevOHCI.cpp:3428:    Log(("ohciServiceIsochronousTd: failed submitting pUrb=%p cbData=%#x EdAddr=%#010x cTds=%d ITdAddr0=%#010x - rc=%Rrc\n",
VBox/Devices/USB/DevOHCI.cpp:3524:                Log(("ohciServiceIsochronousEndpoint: Failed unlinking old ITD.\n"));
VBox/Devices/USB/DevOHCI.cpp:3541:                Log(("ohciServiceIsochronousEndpoint: Failed unlinking old ITD.\n"));
VBox/Devices/USB/DevOHCI.cpp:3593:        Log(("ohciServiceBulkList: bulk_cur=%#010x before listprocessing!!! HCD have positioned us!!!\n", pThis->bulk_cur));
VBox/Devices/USB/DevOHCI.cpp:3693:        Log(("ohciUndoBulkList: bulk_cur=%#010x before list processing!!! HCD has positioned us!!!\n", pThis->bulk_cur));
VBox/Devices/USB/DevOHCI.cpp:3735:        Log(("ohciServiceCtrlList: ctrl_cur=%010x before list processing!!! HCD have positioned us!!!\n", pThis->ctrl_cur));
VBox/Devices/USB/DevOHCI.cpp:3903:        Log(("ohci: Writeback Done (%#010x) on frame %#x (age %#x)\n", hcca.done,
VBox/Devices/USB/DevOHCI.cpp:4082:        Log(("ohciStartOfFrame: skipping hcca part because hcca=%RX32 (our 'valid' range: %RX32-%RX32)\n",
VBox/Devices/USB/DevOHCI.cpp:4219:    Log(("ohci: %s: Bus started\n", pThis->PciDev.pszNameR3));
VBox/Devices/USB/DevOHCI.cpp:4244:    Log(("pThis: ohciBusResume fHardware=%RTbool RWE=%s\n",
VBox/Devices/USB/DevOHCI.cpp:4633:    Log(("HcPeriodCurrentED_w(%#010x) - old=%#010x new=%#010x (This is a read only register, only the linux guys don't respect that!)\n",
VBox/Devices/USB/DevOHCI.cpp:4789:        Log(("ohci: FrameInterval: %#010x -> %#010x\n", pThis->fi, val & OHCI_FMI_FI));
VBox/Devices/USB/DevOHCI.cpp:4960:        Log(("ohci: %s: invalid write to NDP or DT in roothub descriptor A!!! val=0x%.8x\n",
VBox/Devices/USB/DevOHCI.cpp:4996:        Log(("ohci: %s: unsupported write to root descriptor B!!! 0x%.8x -> 0x%.8x\n",
VBox/Devices/USB/DevOHCI.cpp:5211:     * Log it.
VBox/Devices/USB/DevOHCI.cpp:5389:        Log(("ohci: Trying to read register %u/%u!!!\n", iReg, NUM_OP_REGS(pThis)));
VBox/Devices/USB/DevOHCI.cpp:5420:        Log(("ohci: Trying to write to register %u/%u!!!\n", iReg, NUM_OP_REGS(pThis)));
VBox/Devices/USB/os2/USBProxyDevice-os2.cpp:544:    Log(("usbProxyOs2Open(%p, %s) failed, rc=%Rrc! urc=%d\n", pProxyDev, pszAddress, rc, urc)); NOREF(urc);
VBox/Devices/USB/os2/USBProxyDevice-os2.cpp:833:            Log(("usb-linux: Discard URB %p failed, errno=%d. pProxyDev=%s!!! (split)\n",
VBox/Devices/USB/os2/USBProxyDevice-os2.cpp:843:            Log(("usb-linux: Discard URB %p failed, errno=%d. pProxyDev=%s!!!\n",
VBox/Devices/USB/darwin/USBProxyDevice-darwin.cpp:575:            Log(("vusbProxyDarwinStatusToVUsbStatus: irc=%#x!!\n", irc));
VBox/Devices/USB/darwin/USBProxyDevice-darwin.cpp:920:                                        Log(("USB: Seized interface %#x (alt=%d prot=%#x class=%#x)\n",
VBox/Devices/USB/darwin/USBProxyDevice-darwin.cpp:1477:        Log(("usbProxyDarwinSetConfig: Set configuration -> %#x\n", irc));
VBox/Devices/USB/darwin/USBProxyDevice-darwin.cpp:1555:            Log(("usbProxyDarwinSetInterface: SET_INTERFACE(%d,%d) -> irc=%#x\n", iIf, iAlt, irc));
VBox/Devices/USB/darwin/USBProxyDevice-darwin.cpp:1759:                    Log(("%s: usbProxyDarwinUrbQueue: isoc: u64NextFrameNo=%RX64 FrameNo=%RX64 #Frames=%d j=%d (pipe=%d)\n",
VBox/Devices/USB/darwin/USBProxyDevice-darwin.cpp:1790:        Log(("%s: usbProxyDarwinUrbQueue: success\n", pUrb->pszDesc));
VBox/Devices/USB/darwin/USBProxyDevice-darwin.cpp:1799:            Log(("%s: usbProxyDarwinUrbQueue: pProxyDev=%s EndPt=%d cbData=%d - failed irc=%#x! (stall)\n",
VBox/Devices/USB/darwin/USBProxyDevice-darwin.cpp:1806:    Log(("%s: usbProxyDarwinUrbQueue: pProxyDev=%s EndPt=%d cbData=%d - failed irc=%#x!\n",
VBox/Devices/USB/darwin/USBProxyDevice-darwin.cpp:1954:            Log(("usbProxyDarwinUrbCancel: pProxyDev=%s pUrb=%p EndPt=%d - cannot find the interface / pipe!\n",
VBox/Devices/USB/darwin/USBProxyDevice-darwin.cpp:1961:        Log(("usbProxyDarwinUrbCancel: pProxyDev=%s pUrb=%p EndPt=%d -> %#x!\n",
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:185:        Log(("%s: Failed to create event semaphore for window handling.\n", __FUNCTION__));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:407:    Log(("CAPS: %s =\n%s\n", vmsvga3dGetCapString(idx3dCaps), vmsvga3dGet3dFormatString(result)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:429:    Log(("CAPS: %s =\n%s\n", vmsvga3dGetCapString(idx3dCaps), vmsvga3dGet3dFormatString(result)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:812:        Log(("CAPS: Unknown CAP %s\n", vmsvga3dGetCapString(idx3dCaps)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:818:        Log(("CAPS: Unexpected CAP %d\n", idx3dCaps));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:925://        Log(("CAPS: Unexpected CAP %d\n", idx3dCaps));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:930:    Log(("CAPS: %d=%s - %x\n", idx3dCaps, vmsvga3dGetCapString(idx3dCaps), *pu32Val));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:1331:    Log(("vmsvga3dSurfaceFlush: wait for draw to finish (sid=%x)\n", pSurface->id));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:1761:            Log(("Format not accepted -> try old method\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:1828:                Log(("Format not accepted -> try old method\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:1871:                Log(("Format not accepted -> try old method\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:1909:    Log(("vmsvga3dBackCreateTexture: sync texture\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:2039:        Log(("vmsvga3dBackCreateTexture: sync dirty texture from bounce buffer\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:2370:    Log(("vmsvga3dSurfaceBlitToScreen: dest=%d (%d,%d)(%d,%d) sid=%x (face=%d, mipmap=%d) (%d,%d)(%d,%d) cRects=%d\n", dest, destRect.left, destRect.top, destRect.right, destRect.bottom, src.sid, src.face, src.mipmap, srcRect.left, srcRect.top, srcRect.right, srcRect.bottom, cRects));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:2373:        Log(("vmsvga3dSurfaceBlitToScreen: clipping rect %d (%d,%d)(%d,%d)\n", i, pRect[i].left, pRect[i].top, pRect[i].right, pRect[i].bottom));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:2459:                Log(("vmsvga3dGenerateMipmaps invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:2500:    Log(("vmsvga3dGenerateMipmaps: sid=%x filter=%d\n", sid, filter));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:2513:            Log(("vmsvga3dGenerateMipmaps invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:2735:        Log(("SrcRect: (%d,%d)(%d,%d) DstRect: (%d,%d)(%d,%d)\n",
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:2769:    Log(("vmsvga3dContextDefine id %x\n", cid));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:2871:    Log(("vmsvga3dContextDefine: Backbuffer (%d,%d) count=%d format=%x\n", PresParam.BackBufferWidth, PresParam.BackBufferHeight, PresParam.BackBufferCount, PresParam.BackBufferFormat));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:2894:        Log(("vmsvga3dContextDestroy id %x\n", cid));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3062:                    Log(("vmsvga3dChangeMode: sync back data of surface sid=%x (fDirty=%d)\n", sid, pSurface->fDirty));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3081:                                Log(("vmsvga3dChangeMode: sync bounce buffer (level %d)\n", i));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3171:            Log(("vmsvga3dChangeMode: Resize window %x of context %d to (%d,%d)\n", pContext->hwnd, pContext->id, cs.cx, cs.cy));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3177:            Log(("vmsvga3dChangeMode: old viewport settings (%d,%d)(%d,%d) z=%d/%d\n", viewportOrg.X, viewportOrg.Y, viewportOrg.Width, viewportOrg.Height, (uint32_t)(viewportOrg.MinZ * 100.0), (uint32_t)(viewportOrg.MaxZ * 100.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3209:            Log(("vmsvga3dChangeMode: Backbuffer (%d,%d) count=%d format=%x\n", PresParam.BackBufferWidth, PresParam.BackBufferHeight, PresParam.BackBufferCount, PresParam.BackBufferFormat));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3221:                Log(("vmsvga3dChangeMode: changed viewport settings (%d,%d)(%d,%d) z=%d/%d\n", viewport.X, viewport.Y, viewport.Width, viewport.Height, (uint32_t)(viewport.MinZ * 100.0), (uint32_t)(viewport.MaxZ * 100.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3226:            Log(("vmsvga3dChangeMode: Recreate render targets BEGIN\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3243:            Log(("vmsvga3dChangeMode: Recreate render state BEGIN\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3251:            Log(("vmsvga3dChangeMode: Recreate render state END\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3254:            Log(("vmsvga3dChangeMode: Recreate texture state BEGIN\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3265:            Log(("vmsvga3dChangeMode: Recreate texture state END\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3293:    Log(("vmsvga3dSetTransform %x %s\n", cid, vmsvgaTransformToString(type)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3298:        Log(("vmsvga3dSetTransform invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3349:        Log(("vmsvga3dSetTransform: unknown type!!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3358:    Log(("Matrix [%d %d %d %d]\n", (int)(matrix[0] * 10.0), (int)(matrix[1] * 10.0), (int)(matrix[2] * 10.0), (int)(matrix[3] * 10.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3359:    Log(("       [%d %d %d %d]\n", (int)(matrix[4] * 10.0), (int)(matrix[5] * 10.0), (int)(matrix[6] * 10.0), (int)(matrix[7] * 10.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3360:    Log(("       [%d %d %d %d]\n", (int)(matrix[8] * 10.0), (int)(matrix[9] * 10.0), (int)(matrix[10] * 10.0), (int)(matrix[11] * 10.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3361:    Log(("       [%d %d %d %d]\n", (int)(matrix[12] * 10.0), (int)(matrix[13] * 10.0), (int)(matrix[14] * 10.0), (int)(matrix[15] * 10.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3375:    Log(("vmsvga3dSetZRange %x min=%d max=%d\n", cid, (uint32_t)(zRange.min * 100.0), (uint32_t)(zRange.max * 100.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3380:        Log(("vmsvga3dSetZRange invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3390:    Log(("vmsvga3dSetZRange: old viewport settings (%d,%d)(%d,%d) z=%d/%d\n", viewport.X, viewport.Y, viewport.Width, viewport.Height, (uint32_t)(viewport.MinZ * 100.0), (uint32_t)(viewport.MaxZ * 100.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3451:    Log(("vmsvga3dSetRenderState cid=%x cRenderStates=%d\n", cid, cRenderStates));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3456:        Log(("vmsvga3dSetRenderState invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3465:        Log(("vmsvga3dSetRenderState: state=%s (%d) val=%x\n", vmsvga3dGetRenderStateName(pRenderState[i].state), pRenderState[i].state, pRenderState[i].uintValue));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3531:            Log(("SVGA3D_RS_POINTSIZE: %d\n", (uint32_t) (pRenderState[i].floatValue * 100.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3537:            Log(("SVGA3D_RS_POINTSIZEMIN: %d\n", (uint32_t) (pRenderState[i].floatValue * 100.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3543:            Log(("SVGA3D_RS_POINTSIZEMAX: %d\n", (uint32_t) (pRenderState[i].floatValue * 100.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3691:            Log(("WARNING: SVGA3D_RS_LINEPATTERN %x not supported!!\n", pRenderState[i].uintValue));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:3819:            Log(("vmsvga3dSetRenderState: WARNING unsupported SVGA3D_RS_ZBIAS\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:4250:                Log(("vmsvga3dSetRenderTarget: sync dirty depth/stencil buffer\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:4265:                        Log(("vmsvga3dSetRenderTarget: sync dirty texture mipmap level %d (pitch %x vs %x)\n", i, LockedRect.Pitch, pRenderTarget->pMipmapLevels[i].cbSurfacePitch));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:4850:        Log(("Unsupported face %d!!\n", face));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:4884:    Log(("vmsvga3dSetLightData %x index=%d\n", cid, index));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:4905:        Log(("Unsupported light type!!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:4957:    Log(("vmsvga3dSetLightEnabled %x %d -> %d\n", cid, index, enabled));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:4982:    Log(("vmsvga3dSetViewPort %x (%d,%d)(%d,%d)\n", cid, pRect->x, pRect->y, pRect->w, pRect->h));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5013:    Log(("vmsvga3dSetClipPlane %x %d (%d,%d)(%d,%d)\n", cid, index, (unsigned)(plane[0] * 100.0), (unsigned)(plane[1] * 100.0), (unsigned)(plane[2] * 100.0), (unsigned)(plane[3] * 100.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5037:    Log(("vmsvga3dCommandClear %x clearFlag=%x color=%x depth=%d stencil=%x cRects=%d\n", cid, clearFlag, color, (uint32_t)(depth * 100.0), stencil, cRects));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5056:            Log(("vmsvga3dCommandClear: rect %d (%d,%d)(%d,%d)\n", i, pRect[i].x, pRect[i].y, pRect[i].x + pRect[i].w, pRect[i].y + pRect[i].h));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5145:        Log(("vmsvga3dDrawPrimitives: vertex sid=%x stream %d\n", sidVertex, idStream));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5146:        Log(("vmsvga3dDrawPrimitives: type=%s (%d) method=%s (%d) usage=%s (%d) usageIndex=%d stride=%d offset=%d\n", vmsvgaDeclType2String(pVertexDecl[iVertex].identity.type), pVertexDecl[iVertex].identity.type, vmsvgaDeclMethod2String(pVertexDecl[iVertex].identity.method), pVertexDecl[iVertex].identity.method, vmsvgaDeclUsage2String(pVertexDecl[iVertex].identity.usage), pVertexDecl[iVertex].identity.usage, pVertexDecl[iVertex].identity.usageIndex, pVertexDecl[iVertex].array.stride, pVertexDecl[iVertex].array.offset));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5154:            Log(("vmsvga3dDrawPrimitives: stride == 0! Can be valid\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5341:        Log(("Primitive %d: type %s\n", iPrimitive, vmsvga3dPrimitiveType2String(pRange[iPrimitive].primType)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5365:            Log(("vmsvga3dDrawPrimitives: index sid=%x\n", sidIndex));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5380:                Log(("vmsvga3dDrawPrimitives: create index buffer fDirty=%d\n", pIndexSurface->fDirty));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5400:                    Log(("vmsvga3dDrawPrimitives: sync index buffer\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5434:            Log(("DrawPrimitive %x primitivecount=%d index index bias=%d stride=%d\n", PrimitiveTypeD3D, pRange[iPrimitive].primitiveCount,  pRange[iPrimitive].indexBias, strideVertex));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5458:            Log(("DrawIndexedPrimitive %x startindex=%d numVertices=%d, primitivecount=%d index format=%d index bias=%d stride=%d\n", PrimitiveTypeD3D, pVertexDecl[0].rangeHint.first,  numVertices, pRange[iPrimitive].primitiveCount,  (pRange[iPrimitive].indexWidth == sizeof(uint16_t)) ? D3DFMT_INDEX16 : D3DFMT_INDEX32, pRange[iPrimitive].indexBias, strideVertex));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5485:            Log(("vmsvga3dDrawPrimitives: clear stream %d\n", i));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5831:        Log(("Primitive %d: type %s\n", iPrimitive, vmsvga3dPrimitiveType2String(pRange[iPrimitive].primType)));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5858:            Log(("vmsvga3dDrawPrimitives: index sid=%x\n", sidIndex));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5877:            Log(("DrawPrimitive %x primitivecount=%d index index bias=%d stride=%d\n",
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5908:            Log(("DrawIndexedPrimitive %x startindex=%d numVertices=%d, primitivecount=%d index format=%s index bias=%d stride=%d\n",
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5987:    Log(("vmsvga3dSetScissorRect %x (%d,%d)(%d,%d)\n", cid, pRect->x, pRect->y, pRect->w, pRect->h));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:5992:        Log(("vmsvga3dSetScissorRect invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:6021:    Log(("vmsvga3dShaderDefine %x shid=%x type=%s cbData=%x\n", cid, shid, (type == SVGA3D_SHADERTYPE_VS) ? "VERTEX" : "PIXEL", cbData));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:6045:        Log(("vmsvga3dShaderDefine invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:6103:        Log(("Shader disassembly:\n%s\n", pDisassembly->GetBufferPointer()));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:6139:    Log(("vmsvga3dShaderDestroy %x shid=%x type=%s\n", cid, shid, (type == SVGA3D_SHADERTYPE_VS) ? "VERTEX" : "PIXEL"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:6144:        Log(("vmsvga3dShaderDestroy invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:6189:    Log(("vmsvga3dShaderSet %x type=%s shid=%d\n", cid, (type == SVGA3D_SHADERTYPE_VS) ? "VERTEX" : "PIXEL", shid));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:6195:        Log(("vmsvga3dShaderSet invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:6262:    Log(("vmsvga3dShaderSetConst %x reg=%x type=%s ctype=%x\n", cid, reg, (type == SVGA3D_SHADERTYPE_VS) ? "VERTEX" : "PIXEL", ctype));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:6267:        Log(("vmsvga3dShaderSetConst invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-win.cpp:6274:        Log(("Constant %d: value=%x-%x-%x-%x\n", reg + i, pValues[i*4 + 0], pValues[i*4 + 1], pValues[i*4 + 2], pValues[i*4 + 3]));
VBox/Devices/Graphics/DevVGA_VBVA.cpp:186:        Log(("vbvaPartialRead: failed to (re)alocate memory for partial record!!! cbRecord 0x%08X\n",
VBox/Devices/Graphics/DevVGA_VBVA.cpp:819:    Log(("VBVACONTEXT dump: cViews %d\n", pCtx->cViews));
VBox/Devices/Graphics/DevVGA_VBVA.cpp:826:        Log(("                  view %d o 0x%x s 0x%x m 0x%x\n",
VBox/Devices/Graphics/DevVGA_VBVA.cpp:832:        Log(("                  screen %d @%d,%d s 0x%x l 0x%x %dx%d bpp %d f 0x%x\n",
VBox/Devices/Graphics/DevVGA_VBVA.cpp:843:        Log(("                  VBVA o 0x%x p %p\n",
VBox/Devices/Graphics/DevVGA_VBVA.cpp:847:        Log(("                  PR cb 0x%x p %p\n",
VBox/Devices/Graphics/DevVGA_VBVA.cpp:901:        Log(("VGA Command <<< Sync rc %d %#p, %d\n", pCommand->rc, pCommand, pCommand->enmCmd));
VBox/Devices/Graphics/DevVGA_VBVA.cpp:1064:    Log(("VGA Command >>> %#p, %d\n", pCommand, enmCmd));
VBox/Devices/Graphics/DevVGA_VBVA.cpp:1068:        Log(("VGA Command --- Going Async %#p, %d\n", pCommand, enmCmd));
VBox/Devices/Graphics/DevVGA_VBVA.cpp:1075:        Log(("VGA Command --- Trying Pend %#p, %d\n", pCommand, enmCmd));
VBox/Devices/Graphics/DevVGA_VBVA.cpp:1078:            Log(("VGA Command --- Can Pend %#p, %d\n", pCommand, enmCmd));
VBox/Devices/Graphics/DevVGA_VBVA.cpp:1083:        Log(("VGA Command --- Can NOT Pend %#p, %d\n", pCommand, enmCmd));
VBox/Devices/Graphics/DevVGA_VBVA.cpp:1086:        Log(("VGA Command --- Going Complete Sync rc %d %#p, %d\n", rc, pCommand, enmCmd));
VBox/Devices/Graphics/DevVGA_VBVA.cpp:1364:    Log(("VGA Command <<< Async rc %d %#p, %d\n", pCmd->rc, pCmd, pCmd->enmCmd));
VBox/Devices/Graphics/DevVGA_VBVA.cpp:2677:            Log(("Unsupported VBVA guest command %d (%#x)!!!\n", u16ChannelInfo, u16ChannelInfo));
VBox/Devices/Graphics/DevVGA.cpp:621:        Log(("VGA: following read ignored\n"));
VBox/Devices/Graphics/DevVGA.cpp:694:    Log(("VGA: read addr=0x%04x data=0x%02x\n", addr, val));
VBox/Devices/Graphics/DevVGA.cpp:702:    Log(("VGA: write addr=0x%04x data=0x%02x\n", addr, val));
VBox/Devices/Graphics/DevVGA.cpp:706:        Log(("VGA: previous write ignored\n"));
VBox/Devices/Graphics/DevVGA.cpp:913:    Log(("VBE: read index=0x%x val=0x%x\n", idxVbe, val));
VBox/Devices/Graphics/DevVGA.cpp:932:        Log(("VBE: Line pitch %d aligned to %d bytes\n", pitch, aligned_pitch));
VBox/Devices/Graphics/DevVGA.cpp:999:        Log(("VBE: write index=0x%x val=0x%x\n", pThis->vbe_index, val));
VBox/Devices/Graphics/DevVGA.cpp:1385:                Log(("vga: chain4: out of vmsvga VGA framebuffer bounds! addr=%#x\n", addr));
VBox/Devices/Graphics/DevVGA.cpp:1414:                Log(("vga: odd/even: out of vmsvga VGA framebuffer bounds! addr=%#x\n", addr));
VBox/Devices/Graphics/DevVGA.cpp:1541:            Log(("vga: latch: out of vmsvga VGA framebuffer bounds! addr=%#x\n", addr));
VBox/Devices/Graphics/DevVGA.cpp:2388:            Log(("Flush to display (%d,%d)(%d,%d)\n", 0, yUpdateRectTop, cxDisplay, y - yUpdateRectTop));
VBox/Devices/Graphics/DevVGA.cpp:2397:        Log(("Flush to display (%d,%d)(%d,%d)\n", 0, yUpdateRectTop, cxDisplay, y - yUpdateRectTop));
VBox/Devices/Graphics/DevVGA.cpp:2529:    Log(("w=%d h=%d v=%d line_offset=%d cr[0x09]=0x%02x cr[0x17]=0x%02x linecmp=%d sr[0x01]=0x%02x\n",
VBox/Devices/Graphics/DevVGA.cpp:2819:        Log(("vga_load: !is_vbe !!\n"));
VBox/Devices/Graphics/DevVGA.cpp:2835:        Log(("vga_load: is_vbe !!\n"));
VBox/Devices/Graphics/DevVGA.cpp:2938:        Log(("vgaIOPortWriteVBEData: VBE_DISPI_INDEX_ENABLE - Switching to host...\n"));
VBox/Devices/Graphics/DevVGA.cpp:2975://            Log(("vgaIOPortWriteVBEData: VBE_DISPI_INDEX_ENABLE & VBE_DISPI_ENABLED - Switching to host...\n"));
VBox/Devices/Graphics/DevVGA.cpp:3199:        Log(("vgaR3IOPortHGSMIRead: Port=%#x cb=%d\n", Port, cb));
VBox/Devices/Graphics/DevVGA.cpp:3693:            case '\r': Log(("vgabios: <return>\n")); break;
VBox/Devices/Graphics/DevVGA.cpp:3694:            case '\n': Log(("vgabios: <newline>\n")); break;
VBox/Devices/Graphics/DevVGA.cpp:3695:            case '\t': Log(("vgabios: <tab>\n")); break;
VBox/Devices/Graphics/DevVGA.cpp:3697:                Log(("vgabios: %c\n", u32));
VBox/Devices/Graphics/DevVGA.cpp:3701:            Log(("vgabios: "));
VBox/Devices/Graphics/DevVGA.cpp:3703:            Log(("%c", u32));
VBox/Devices/Graphics/DevVGA.cpp:3733:        Log(("vbeIOPortWriteVBEExtra: addr=%#RX32\n", u32));
VBox/Devices/Graphics/DevVGA.cpp:3737:        Log(("vbeIOPortWriteVBEExtra: Ignoring invalid cb=%d writes to the VBE Extra port!!!\n", cb));
VBox/Devices/Graphics/DevVGA.cpp:3756:        Log(("vbeIOPortReadVBEExtra: Requested number of 64k video banks\n"));
VBox/Devices/Graphics/DevVGA.cpp:3763:        Log(("vbeIOPortReadVBEExtra: Requested address is out of VBE data!!! Address=%#x(%d) cbVBEExtraData=%#x(%d)\n",
VBox/Devices/Graphics/DevVGA.cpp:3773:            Log(("vbeIOPortReadVBEExtra: cb=%#x %.*Rhxs\n", cb, cb, pu32));
VBox/Devices/Graphics/DevVGA.cpp:3780:            Log(("vbeIOPortReadVBEExtra: cb=%#x %.*Rhxs\n", cb, cb, pu32));
VBox/Devices/Graphics/DevVGA.cpp:3784:            Log(("vbeIOPortReadVBEExtra: Invalid cb=%d read from the VBE Extra port!!!\n", cb));
VBox/Devices/Graphics/DevVGA.cpp:4072:    Log(("vbeIOPortWriteCMDLogo: cb=%d u32=%#04x(%#04d) (byte)\n", cb, u32, u32));
VBox/Devices/Graphics/DevVGA.cpp:4148:                Log(("vbeIOPortWriteCMDLogo: invalid command %d\n", u32));
VBox/Devices/Graphics/DevVGA.cpp:4156:    Log(("vbeIOPortWriteCMDLogo: Ignoring invalid cb=%d writes to the VBE Extra port!!!\n", cb));
VBox/Devices/Graphics/DevVGA.cpp:4173:        Log(("vbeIOPortReadCMDLogo: Requested address is out of Logo data!!! offLogoData=%#x(%d) cbLogo=%#x(%d)\n",
VBox/Devices/Graphics/DevVGA.cpp:4188:    Log(("vbeIOPortReadCMDLogo: LogoOffset=%#x(%d) cb=%#x %.*Rhxs\n", pThis->offLogoData, pThis->offLogoData, cb, cb, pu32));
VBox/Devices/Graphics/DevVGA.cpp:5473:    Log(("vgaR3IORegionMap: iRegion=%d GCPhysAddress=%RGp cb=%RGp enmType=%d\n", iRegion, GCPhysAddress, cb, enmType));
VBox/Devices/Graphics/DevVGA.cpp:5995:                Log(("%s/%d: warning: no driver attached to LUN #0!\n", pDevIns->pReg->szName, pDevIns->iInstance));
VBox/Devices/Graphics/DevVGA.cpp:6229:    Log(("VGA: VRamSize=%#x fGCenabled=%RTbool fR0Enabled=%RTbool\n", pThis->vram_size, pThis->fGCEnabled, pThis->fR0Enabled));
VBox/Devices/Graphics/DevVGA.cpp:6234:    Log(("VMSVGA: VMSVGAEnabled   = %d\n", pThis->fVMSVGAEnabled));
VBox/Devices/Graphics/DevVGA.cpp:6242:    Log(("VMSVGA: VMSVGAFifoSize  = %#x (%'u)\n", pThis->svga.cbFIFO, pThis->svga.cbFIFO));
VBox/Devices/Graphics/DevVGA.cpp:6249:    Log(("VMSVGA: VMSVGA3dEnabled = %d\n", pThis->svga.f3DEnabled));
VBox/Devices/Graphics/DevVGA.cpp:6250:    Log(("VMSVGA: HostWindowId    = 0x%x\n", pThis->svga.u64HostWindowId));
VBox/Devices/Graphics/DevVGA.cpp:6346:        Log(("!!WARNING!!: pThis->dev.uDevFn=%d (ignore if testcase or not started by Main)\n", pThis->Dev.uDevFn));
VBox/Devices/Graphics/DevVGA.cpp:6614:            Log(("vgaConstruct: Failed to open VGA BIOS ROM file '%s', rc=%Rrc!\n", pThis->pszVgaBiosFile, rc));
VBox/Devices/Graphics/DevVGA.cpp:6793:        Log(("vgaR3Construct: cyReduction=%u\n", cyReduction));
VBox/Devices/Graphics/DevVGA.cpp:7156:            Log(("%s/%d: warning: no driver attached to LUN #0!\n", pDevIns->pReg->szName, pDevIns->iInstance));
VBox/Devices/Graphics/DevVGA-SVGA3d-cocoa.m:343:    Log(("OvlView(%p) vboxSetPos: (%d,%d)\n", (void *)self, (int)pos.x, (int)pos.y));
VBox/Devices/Graphics/DevVGA-SVGA3d-cocoa.m:354:    Log(("OvlView(%p) vboxSetSize: (%d,%d):\n", (void *)self, (int)size.width, (int)size.height));
VBox/Devices/Graphics/DevVGA-SVGA3d-cocoa.m:369:        Log(("OvlView(%p) vboxUpdateCtxIfNecessary: m_fUpdateCtx\n", (void *)self));
VBox/Devices/Graphics/DevVGA-SVGA3d-cocoa.m:383:        Log(("OvlView(%p) vboxClearBackBufferIfNecessary: m_cClears=%d\n", (void *)self, m_cClears));
VBox/Devices/Graphics/DevVGA-SVGA3d-cocoa.m:756:    Log(("vmsvga3dCocoaDestroyViewAndContext: view %p ref count=%d\n", (void *)pOvlView, [pOvlView retainCount]));
VBox/Devices/Graphics/DevVGA-SVGA3d-cocoa.m:760:    Log(("vmsvga3dCocoaDestroyViewAndContext: ctx  %p ref count=%d\n", (void *)pCtx, [pCtx retainCount]));
VBox/Devices/Graphics/DevVGA-SVGA3d-internal.h:1159:        Log(("vmsvga3dSurfaceCopy invalid context id!\n"));
VBox/Devices/Graphics/DevVGA_VDMA.cpp:459:    Log(("first = %d, free = %d\n", idxRecordFirst, idxRecordFree));
VBox/Devices/Graphics/DevVGA_VDMA.cpp:972:                Log(("cmd vbva not enabled (race)\n"));
VBox/Devices/Graphics/DevVGA_VDMA.cpp:981:        Log(("cmd vbva not enabled\n"));
VBox/Devices/Graphics/DevVGA_VDMA.cpp:1001:        Log(("VBoxVBVAExHCtlSubmit failed %Rrc\n", rc));
VBox/Devices/Graphics/DevVGA_VDMA.cpp:1440:        Log(("vdmaVBVACtlSubmitSync failed %Rrc\n", rc));
VBox/Devices/Graphics/DevVGA_VDMA.cpp:1613:        Log(("vdma VBVA is already disabled\n"));
VBox/Devices/Graphics/DevVGA_VDMA.cpp:3212:        Log(("vdmaVBVACtlSubmit failed %Rrc\n", rc));
VBox/Devices/Graphics/DevVGA_VDMA.cpp:3526:            Log(("vdmaVBVACtlSubmit failed %Rrc\n", rc));
VBox/Devices/Graphics/DevVGA_VDMA.cpp:3996:        Log(("vdmaVBVACtlSubmit failed %Rrc\n", rc));
VBox/Devices/Graphics/shaderlib/glsl_shader.c:56:#define WDLOG(_m) Log(_m)
VBox/Devices/Graphics/shaderlib/wine/include/winevt.h:1:/* Definitions for the Windows Event Log (wevtapi.dll)
VBox/Devices/Graphics/shaderlib/shaderapi.c:323:        Log(("Failed to allocate shader memory.\n"));
VBox/Devices/Graphics/shaderlib/shaderapi.c:330:        Log(("Failed to initialize vertex shader, hr %#x.\n", hr));
VBox/Devices/Graphics/shaderlib/shaderapi.c:339:    Log(("Created vertex shader %p.\n", object));
VBox/Devices/Graphics/shaderlib/shaderapi.c:357:        Log(("Failed to allocate shader memory.\n"));
VBox/Devices/Graphics/shaderlib/shaderapi.c:364:        Log(("Failed to initialize pixel shader, hr %#x.\n", hr));
VBox/Devices/Graphics/shaderlib/shaderapi.c:373:    Log(("Created pixel shader %p.\n", object));
VBox/Devices/Graphics/shaderlib/shaderapi.c:413:        Log(("App is setting the old shader over, nothing to do\n"));
VBox/Devices/Graphics/shaderlib/shaderapi.c:420:    Log(("(%p) : setting pShader(%p)\n", This, pShader));
VBox/Devices/Graphics/shaderlib/shaderapi.c:443:        Log(("App is setting the old shader over, nothing to do\n"));
VBox/Devices/Graphics/shaderlib/shaderapi.c:450:    Log(("(%p) : setting pShader(%p)\n", This, pShader));
VBox/Devices/Graphics/shaderlib/shaderapi.c:467:    Log(("(ShaderSetVertexShaderConstantB %p, srcData %p, start %d, count %d)\n", pShaderContext, srcData, start, count));
VBox/Devices/Graphics/shaderlib/shaderapi.c:471:        Log(("incorrect vertex shader const data: start(%u), srcData(0x%p), count(%u)", start, srcData, count));
VBox/Devices/Graphics/shaderlib/shaderapi.c:477:        Log(("Set BOOL constant %u to %s\n", start + i, srcData[i]? "true":"false"));
VBox/Devices/Graphics/shaderlib/shaderapi.c:496:    Log(("(ShaderSetVertexShaderConstantI %p, srcData %p, start %d, count %d)\n", pShaderContext, srcData, start, count));
VBox/Devices/Graphics/shaderlib/shaderapi.c:500:        Log(("incorrect vertex shader const data: start(%u), srcData(0x%p), count(%u)", start, srcData, count));
VBox/Devices/Graphics/shaderlib/shaderapi.c:522:    Log(("(ShaderSetVertexShaderConstantF %p, srcData %p, start %d, count %d)\n", pShaderContext, srcData, start, count));
VBox/Devices/Graphics/shaderlib/shaderapi.c:526:        Log(("incorrect vertex shader const data: start(%u), srcData(0x%p), count(%u)", start, srcData, count));
VBox/Devices/Graphics/shaderlib/shaderapi.c:549:    Log(("(ShaderSetPixelShaderConstantB %p, srcData %p, start %d, count %d)\n", pShaderContext, srcData, start, count));
VBox/Devices/Graphics/shaderlib/shaderapi.c:553:        Log(("incorrect pixel shader const data: start(%u), srcData(0x%p), count(%u)", start, srcData, count));
VBox/Devices/Graphics/shaderlib/shaderapi.c:559:        Log(("Set BOOL constant %u to %s\n", start + i, srcData[i]? "true":"false"));
VBox/Devices/Graphics/shaderlib/shaderapi.c:578:    Log(("(ShaderSetPixelShaderConstantI %p, srcData %p, start %d, count %d)\n", pShaderContext, srcData, start, count));
VBox/Devices/Graphics/shaderlib/shaderapi.c:582:        Log(("incorrect pixel shader const data: start(%u), srcData(0x%p), count(%u)", start, srcData, count));
VBox/Devices/Graphics/shaderlib/shaderapi.c:604:    Log(("(ShaderSetPixelShaderConstantF %p, srcData %p, start %d, count %d)\n", pShaderContext, srcData, start, count));
VBox/Devices/Graphics/shaderlib/shaderapi.c:608:        Log(("incorrect pixel shader const data: start(%u), srcData(0x%p), count(%u)", start, srcData, count));
VBox/Devices/Graphics/shaderlib/shaderapi.c:635:    Log(("ShaderSetPositionTransformed viewport (%d,%d) fPreTransformed=%d\n", cxViewPort, cyViewPort, fPreTransformed));
VBox/Devices/Graphics/HGSMI/HGSMIHost.cpp:1502:            Log(("Unsupported HGSMI guest command %d!!!\n",
VBox/Devices/Graphics/DevVGA-SVGA3d-savedstate.cpp:57:    Log(("vmsvga3dLoadReinitContext: Recreate render targets BEGIN [cid=%#x]\n", cid));
VBox/Devices/Graphics/DevVGA-SVGA3d-savedstate.cpp:71:    Log(("vmsvga3dLoadReinitContext: Recreate render targets END\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-savedstate.cpp:74:    Log(("vmsvga3dLoadReinitContext: Recreate render state BEGIN\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-savedstate.cpp:82:    Log(("vmsvga3dLoadReinitContext: Recreate render state END\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-savedstate.cpp:85:    Log(("vmsvga3dLoadReinitContext: Recreate texture state BEGIN\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-savedstate.cpp:96:    Log(("vmsvga3dLoadReinitContext: Recreate texture state END\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-savedstate.cpp:145:    Log(("vmsvga3dLoadReinitContext: returns [cid=%#x]\n", cid));
VBox/Devices/Graphics/DevVGA-SVGA3d-savedstate.cpp:461:                Log(("Surface sid=%x: load mipmap level %d with %x bytes data (present=%d).\n", sid, j, pMipmapLevel->cbSurface, fDataPresent));
VBox/Devices/Graphics/DevVGA-SVGA3d-savedstate.cpp:536:                Log(("Save pixelshader shid=%d with %x bytes code.\n", pShader->id, cbData));
VBox/Devices/Graphics/DevVGA-SVGA3d-savedstate.cpp:559:                Log(("Save vertex shader shid=%d with %x bytes code.\n", pShader->id, cbData));
VBox/Devices/Graphics/DevVGA-SVGA3d-savedstate.cpp:706:                    Log(("Surface sid=%d: save mipmap level %d with %x bytes data.\n", sid, i, pMipmapLevel->cbSurface));
VBox/Devices/Graphics/DevVGA-SVGA3d-savedstate.cpp:781:                                            Log(("vmsvga3dSaveExec invalid context id (%x - %x)!\n", cid, (cid >= pState->cContexts) ? -1 : pState->papContexts[cid]->id));
VBox/Devices/Graphics/DevVGA-SVGA3d-info.cpp:354:                                            Log(("vmsvga3dSurfaceUpdateHeapBuffers: invalid context id (%x - %x)!\n", cid, (cid >= pState->cContexts) ? -1 : pState->papContexts[cid]->id));
VBox/Devices/Graphics/DevVGA-SVGA3d-info.cpp:809: * Log printer for vmsvga3dAsciiPrint.
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:1246:    Log(("CAPS: %s =\n%s\n", vmsvga3dGetCapString(idx3dCaps), vmsvga3dGet3dFormatString(result)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:1259:    Log(("CAPS: %s =\n%s\n", vmsvga3dGetCapString(idx3dCaps), vmsvga3dGet3dFormatString(result)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:1518:        Log(("CAPS: Unknown CAP %s\n", vmsvga3dGetCapString(idx3dCaps)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:1524:        Log(("CAPS: Unexpected CAP %d\n", idx3dCaps));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:1529:    Log(("CAPS: %s - %x\n", vmsvga3dGetCapString(idx3dCaps), *pu32Val));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:2107:        Log(("vmsvga3dBackCreateTexture: sync dirty texture\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:2116:            Log(("vmsvga3dBackCreateTexture: sync dirty texture mipmap level %d (pitch %x)\n", i, pSurface->pMipmapLevels[i].cbSurfacePitch));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:2188:    Log(("src conv. (%d,%d)(%d,%d); dest conv (%d,%d)(%d,%d)\n", pSrcBox->x, D3D_TO_OGL_Y_COORD(pSrcSurface, pSrcBox->y + pSrcBox->h),
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:2458:            Log(("vmsvga3dSurfaceDMA: copy texture mipmap level %d (pitch %x)\n", uHostMipmap, pMipLevel->cbSurfacePitch));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:2521:                    Log(("Lock %s memory for rectangle (%d,%d)(%d,%d)\n",
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:2570:    Log(("vmsvga3dSurfaceBlitToScreen: dest=%d (%d,%d)(%d,%d) surface=%x (face=%d, mipmap=%d) (%d,%d)(%d,%d) cRects=%d\n", dest, destRect.left, destRect.top, destRect.right, destRect.bottom, src.sid, src.face, src.mipmap, srcRect.left, srcRect.top, srcRect.right, srcRect.bottom, cRects));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:2573:        Log(("vmsvga3dSurfaceBlitToScreen: clipping rect %d (%d,%d)(%d,%d)\n", i, pRect[i].left, pRect[i].top, pRect[i].right, pRect[i].bottom));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:2663:    Log(("vmsvga3dGenerateMipmaps: sid=%x filter=%d\n", sid, filter));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:2672:        Log(("vmsvga3dGenerateMipmaps: unknown src surface id=%x type=%d format=%d -> create texture\n", sid, pSurface->surfaceFlags, pSurface->format));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:2713:    Log(("vmsvga3dCommandPresent: sid=%x cRects=%d\n", sid, cRects));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:2715:        Log(("vmsvga3dCommandPresent: rectangle %d src=(%d,%d) (%d,%d)(%d,%d)\n", i, pRect[i].srcx, pRect[i].srcy, pRect[i].x, pRect[i].y, pRect[i].x + pRect[i].w, pRect[i].y + pRect[i].h));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:2863:        Log(("view port (%d,%d)(%d,%d)\n", srcViewPort.x, srcViewPort.y, srcViewPort.cx, srcViewPort.cy));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:2864:        Log(("vertex (%d,%d) (%d,%d) (%d,%d) (%d,%d)\n", vertexLeft, vertexBottom, vertexLeft, vertexTop, vertexRight, vertexTop, vertexRight, vertexBottom));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:2865:        Log(("texture (%d,%d) (%d,%d) (%d,%d) (%d,%d)\n", pRect[i].srcx, pSurface->pMipmapLevels[0].size.height - (pRect[i].srcy + pRect[i].h), pRect[i].srcx, pSurface->pMipmapLevels[0].size.height - pRect[i].srcy, pRect[i].srcx + pRect[i].w, pSurface->pMipmapLevels[0].size.height - pRect[i].srcy, pRect[i].srcx + pRect[i].w, pSurface->pMipmapLevels[0].size.height - (pRect[i].srcy + pRect[i].h)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3165:        Log(("SrcRect: (%d,%d)(%d,%d) DstRect: (%d,%d)(%d,%d)\n",
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3256:    Log(("vmsvga3dContextDefine id %x\n", cid));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3527:    Log(("vmsvga3dContextDestroyOgl id %x\n", cid));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3687:    Log(("vmsvga3dSetTransform cid=%x %s\n", cid, vmsvgaTransformToString(type)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3692:        Log(("vmsvga3dSetTransform invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3703:    Log(("Matrix [%d %d %d %d]\n", (int)(matrix[0] * 10.0), (int)(matrix[1] * 10.0), (int)(matrix[2] * 10.0), (int)(matrix[3] * 10.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3704:    Log(("       [%d %d %d %d]\n", (int)(matrix[4] * 10.0), (int)(matrix[5] * 10.0), (int)(matrix[6] * 10.0), (int)(matrix[7] * 10.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3705:    Log(("       [%d %d %d %d]\n", (int)(matrix[8] * 10.0), (int)(matrix[9] * 10.0), (int)(matrix[10] * 10.0), (int)(matrix[11] * 10.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3706:    Log(("       [%d %d %d %d]\n", (int)(matrix[12] * 10.0), (int)(matrix[13] * 10.0), (int)(matrix[14] * 10.0), (int)(matrix[15] * 10.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3741:        Log(("vmsvga3dSetTransform: unsupported SVGA3D_TRANSFORM_TEXTUREx transform!!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3759:        Log(("vmsvga3dSetTransform: unsupported SVGA3D_TRANSFORM_WORLDx transform!!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3763:        Log(("vmsvga3dSetTransform: unknown type!!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3794:    Log(("vmsvga3dSetZRange cid=%x min=%d max=%d\n", cid, (uint32_t)(zRange.min * 100.0), (uint32_t)(zRange.max * 100.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3799:        Log(("vmsvga3dSetZRange invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3936:    Log(("vmsvga3dSetRenderState cid=%x cRenderStates=%d\n", cid, cRenderStates));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3941:        Log(("vmsvga3dSetRenderState invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3950:        Log(("vmsvga3dSetRenderState: cid=%x state=%s (%d) val=%x\n", cid, vmsvga3dGetRenderStateName(pRenderState[i].state), pRenderState[i].state, pRenderState[i].uintValue));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3983:            Log(("vmsvga3dSetRenderState: WARNING: not applicable.\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:3993:            Log(("vmsvga3dSetRenderState: WARNING: not applicable.\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4010:            Log(("SVGA3D_RS_POINTSIZE: %d\n", (uint32_t) (pRenderState[i].floatValue * 100.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4016:            Log(("SVGA3D_RS_POINTSIZEMIN: %d\n", (uint32_t) (pRenderState[i].floatValue * 100.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4022:            Log(("SVGA3D_RS_POINTSIZEMAX: %d\n", (uint32_t) (pRenderState[i].floatValue * 100.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4029:            Log(("vmsvga3dSetRenderState: WARNING: not applicable.\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4198:            Log(("WARNING: SVGA3D_RS_LINEPATTERN %x not supported!!\n", pRenderState[i].uintValue));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4465:                Log(("vmsvga3dSetRenderState: WARNING unsupported SVGA3D_RS_STENCILENABLE2SIDED\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4529:            Log(("vmsvga3dSetRenderState: WARNING unsupported SVGA3D_RS_ZBIAS\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4582:            Log(("vmsvga3dSetRenderState: WARNING SVGA3D_RS_COLORWRITEENABLEx not supported!!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4626:            Log(("vmsvga3dSetRenderState: WARNING unsupported SVGA3D_WRAPx (x >= 3)\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4633:            Log(("vmsvga3dSetRenderState: WARNING not applicable!!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4643:            Log(("vmsvga3dSetRenderState: WARNING not applicable??!!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4769:    Log(("vmsvga3dSetRenderTarget cid=%x type=%x surface id=%x\n", cid, type, target.sid));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4774:        Log(("vmsvga3dSetRenderTarget invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4824:            Log(("vmsvga3dSetRenderTarget: create renderbuffer to be used as render target; surface id=%x type=%d format=%d\n", target.sid, pRenderTarget->surfaceFlags, pRenderTarget->internalFormatGL));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4873:            Log(("vmsvga3dSetRenderTarget: create texture to be used as render target; surface id=%x type=%d format=%d -> create texture\n", target.sid, pRenderTarget->surfaceFlags, pRenderTarget->format));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:4891:            Log(("vmsvga3dSetRenderTarget: WARNING: glCheckFramebufferStatus returned %x\n", status));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5081:    Log(("vmsvga3dSetTextureState %x cTextureState=%d\n", cid, cTextureStates));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5086:        Log(("vmsvga3dSetTextureState invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5099:        Log(("vmsvga3dSetTextureState: cid=%x stage=%d type=%s (%x) val=%x\n", cid, pTextureState[i].stage, vmsvga3dTextureStateToString(pTextureState[i].name), pTextureState[i].name, pTextureState[i].value));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5133:            Log(("vmsvga3dSetTextureState: bump mapping texture options not supported!!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5145:            Log(("vmsvga3dSetTextureState: colorop/alphaop not yet supported!!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5163:                Log(("SVGA3D_TS_BIND_TEXTURE: stage %d, texture surface id=%x replacing=%x\n",
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5183:                Log(("SVGA3D_TS_BIND_TEXTURE: stage %d, texture surface id=%x (%d,%d) replacing=%x\n",
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5189:                    Log(("CreateTexture (%d,%d) level=%d\n", pSurface->pMipmapLevels[0].mipmapSize.width, pSurface->pMipmapLevels[0].mipmapSize.height, pSurface->faces[0].numMipLevels));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5335:    Log(("vmsvga3dSetMaterial cid=%x face %d\n", cid, face));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5340:        Log(("vmsvga3dSetMaterial invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5388:    Log(("vmsvga3dSetLightData cid=%x index=%d type=%d\n", cid, index, pData->type));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5393:        Log(("vmsvga3dSetLightData invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5412:        Log(("vmsvga3dSetLightData: invalid negative attenuation values!!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5551:        Log(("Unsupported light type!!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5567:    Log(("vmsvga3dSetLightEnabled cid=%x %d -> %d\n", cid, index, enabled));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5572:        Log(("vmsvga3dSetLightEnabled invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5604:    Log(("vmsvga3dSetViewPort cid=%x (%d,%d)(%d,%d)\n", cid, pRect->x, pRect->y, pRect->w, pRect->h));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5609:        Log(("vmsvga3dSetViewPort invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5651:    Log(("vmsvga3dSetClipPlane cid=%x %d (%d,%d)(%d,%d)\n", cid, index, (unsigned)(plane[0] * 100.0), (unsigned)(plane[1] * 100.0), (unsigned)(plane[2] * 100.0), (unsigned)(plane[3] * 100.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5657:        Log(("vmsvga3dSetClipPlane invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5685:    Log(("vmsvga3dSetScissorRect cid=%x (%d,%d)(%d,%d)\n", cid, pRect->x, pRect->y, pRect->w, pRect->h));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5690:        Log(("vmsvga3dSetScissorRect invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5724:    Log(("vmsvga3dCommandClear cid=%x clearFlag=%x color=%x depth=%d stencil=%x cRects=%d\n", cid, clearFlag, color, (uint32_t)(depth * 100.0), stencil, cRects));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5729:        Log(("vmsvga3dCommandClear invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5770:            Log(("vmsvga3dCommandClear: rect %d (%d,%d)(%d,%d)\n", i, pRect[i].x, pRect[i].y, pRect[i].x + pRect[i].w, pRect[i].y + pRect[i].h));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5976:    Log(("vmsvga3dDrawPrimitives: vertex surface %x\n", sidVertex));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:5981:        Log(("vmsvga3dDrawPrimitives: create vertex buffer fDirty=%d size=%x bytes\n", pVertexSurface->fDirty, pVertexSurface->pMipmapLevels[0].cbSurface));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6021:        Log(("vmsvga3dDrawPrimitives: array index %d type=%s (%d) method=%s (%d) usage=%s (%d) usageIndex=%d stride=%d offset=%d\n", index, vmsvgaDeclType2String(pVertexDecl[iVertex].identity.type), pVertexDecl[iVertex].identity.type, vmsvgaDeclMethod2String(pVertexDecl[iVertex].identity.method), pVertexDecl[iVertex].identity.method, vmsvgaDeclUsage2String(pVertexDecl[iVertex].identity.usage), pVertexDecl[iVertex].identity.usage, pVertexDecl[iVertex].identity.usageIndex, pVertexDecl[iVertex].array.stride, pVertexDecl[iVertex].array.offset));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6115:            Log(("vmsvga3dDrawPrimitives: stride == 0! Can be valid\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6132:            Log(("vmsvga3dDrawPrimitivesCleanupVertexDecls: reset world and projection matrices after transformation reset (pre-transformed -> transformed)\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6211:    Log(("vmsvga3dDrawPrimitives cid=%x numVertexDecls=%d numRanges=%d, cVertexDivisor=%d\n", cid, numVertexDecls, numRanges, cVertexDivisor));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6224:        Log(("vmsvga3dDrawPrimitives invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6236:                Log(("ShaderSetPositionTransformed: (%d,%d)\n", pContext->state.RectViewPort.w, pContext->state.RectViewPort.h));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6291:        Log(("Primitive %d: type %s\n", iPrimitive, vmsvga3dPrimitiveType2String(pRange[iPrimitive].primType)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6313:            Log(("vmsvga3dDrawPrimitives: index surface %x\n", sidIndex));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6317:                Log(("vmsvga3dDrawPrimitives: create index buffer fDirty=%d size=%x bytes\n", pIndexSurface->fDirty, pIndexSurface->pMipmapLevels[0].cbSurface));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6353:            Log(("DrawPrimitive %x cPrimitives=%d cVertices=%d index index bias=%d\n", modeDraw, pRange[iPrimitive].primitiveCount, cVertices, pRange[iPrimitive].indexBias));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6379:            Log(("DrawIndexedPrimitive %x cPrimitives=%d cVertices=%d hint.first=%d hint.last=%d index offset=%d primitivecount=%d index width=%d index bias=%d\n", modeDraw, pRange[iPrimitive].primitiveCount, cVertices, pVertexDecl[0].rangeHint.first,  pVertexDecl[0].rangeHint.last,  pRange[iPrimitive].indexArray.offset, pRange[iPrimitive].primitiveCount,  pRange[iPrimitive].indexWidth, pRange[iPrimitive].indexBias));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6483:    Log(("vmsvga3dShaderDefine cid=%x shid=%x type=%s cbData=%x\n", cid, shid, (type == SVGA3D_SHADERTYPE_VS) ? "VERTEX" : "PIXEL", cbData));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6489:        Log(("vmsvga3dShaderDefine invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6548:        Log(("Shader disassembly:\n%s\n", pDisassembly->GetBufferPointer()));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6584:    Log(("vmsvga3dShaderDestroy cid=%x shid=%x type=%s\n", cid, shid, (type == SVGA3D_SHADERTYPE_VS) ? "VERTEX" : "PIXEL"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6589:        Log(("vmsvga3dShaderDestroy invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6636:    Log(("vmsvga3dShaderSet cid=%x type=%s shid=%d\n", cid, (type == SVGA3D_SHADERTYPE_VS) ? "VERTEX" : "PIXEL", shid));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6645:        Log(("vmsvga3dShaderSet invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6712:    Log(("vmsvga3dShaderSetConst cid=%x reg=%x type=%s cregs=%d ctype=%x\n", cid, reg, (type == SVGA3D_SHADERTYPE_VS) ? "VERTEX" : "PIXEL", cRegisters, ctype));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6717:        Log(("vmsvga3dShaderSetConst invalid context id!\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6731:                Log(("Constant %d: value=%d-%d-%d-%d\n", reg + i, (int)(pValuesF[i*4 + 0] * 100.0), (int)(pValuesF[i*4 + 1] * 100.0), (int)(pValuesF[i*4 + 2] * 100.0), (int)(pValuesF[i*4 + 3] * 100.0)));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6736:                Log(("Constant %d: value=%x-%x-%x-%x\n", reg + i, pValues[i*4 + 0], pValues[i*4 + 1], pValues[i*4 + 2], pValues[i*4 + 3]));
VBox/Devices/Graphics/DevVGA-SVGA3d-ogl.cpp:6740:                Log(("Constant %d: value=%x-%x-%x-%x\n", reg + i, pValues[i*4 + 0], pValues[i*4 + 1], pValues[i*4 + 2], pValues[i*4 + 3]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:6: *  - Log() for normal bits.
VBox/Devices/Graphics/DevVGA-SVGA.cpp:656:    Log(("vmsvgaPortSetViewPort: screen %d (%d,%d)(%d,%d)\n", idScreen, x, y, cx, cy));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:727:        Log(("vmsvgaWritePort: SVGA_ID_0 reg adj %#x -> %#x\n", pThis->svga.u32IndexReg, idxReg));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:970:        Log(("h=%d w=%d bpp=%d\n", pThis->pDrv->cy, pThis->pDrv->cx, pThis->pDrv->cBits));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1211:    Log(("vmsvgaReadPort index=%s (%d) val=%#x rc=%x\n", vmsvgaIndexToString(pThis, idxReg), idxReg, *pu32, rc));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1231:        Log(("vmsvgaChangeMode: BOGUS sEnable LFB mode and resize to (%d,%d) bpp=%d\n", pThis->svga.uWidth, pThis->svga.uHeight, pThis->svga.uBpp));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1240:        Log(("vmsvgaChangeMode: BOGUS sEnable LFB mode and resize to (%d,%d) bpp=%d\n", pThis->svga.uWidth, pThis->svga.uHeight, pThis->svga.uBpp));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1252:        Log(("vmsvgaChangeMode: nothing changed; ignore\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1256:    Log(("vmsvgaChangeMode: sEnable LFB mode and resize to (%d,%d) bpp=%d\n", pThis->svga.uWidth, pThis->svga.uHeight, pThis->svga.uBpp));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1343:        Log(("vmsvgaWritePort: SVGA_ID_0 reg adj %#x -> %#x\n", pThis->svga.u32IndexReg, idxReg));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1345:    Log(("vmsvgaWritePort index=%s (%d) val=%#x\n", vmsvgaIndexToString(pThis, idxReg), idxReg, u32));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1401:            Log(("configured=%d busy=%d\n", pThis->svga.fConfigured, pThis->svga.pFIFOR3[SVGA_FIFO_BUSY]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1403:            Log(("next %x stop %x\n", pFIFO[SVGA_FIFO_NEXT_CMD], pFIFO[SVGA_FIFO_STOP]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1518:            Log(("SVGA_REG_SYNC: SVGA_FIFO_BUSY=%d\n", pThis->svga.CTX_SUFF(pFIFO)[SVGA_FIFO_BUSY]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1531:            Log(("Sync ignored enabled=%d configured=%d\n", pThis->svga.fEnabled, pThis->svga.fConfigured));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1556:            Log(("SVGA_REG_IRQMASK: Trigger interrupt with status %x\n", pThis->svga.u32IrqStatus));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1676:            Log(("Defined new gmr %x numDescriptors=%d cbTotal=%x (%#x pages)\n",
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1707:        Log(("Write to deprecated register %x - val %x ignored\n", idxReg, u32));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1731:        Log(("Write to R/O register %x - val %x ignored\n", idxReg, u32));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1796:        Log(("Ignoring non-dword read at %x cb=%d\n", uPort, cb));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1811:        Log(("Ignoring BIOS port read\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1848:        Log(("Ignoring non-dword write at %x val=%x cb=%d\n", uPort, u32, cb));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1862:        Log(("Ignoring BIOS port write (val=%x)\n", u32));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1866:        Log(("vmsvgaIOWrite SVGA_IRQSTATUS_PORT %x: status %x -> %x\n", u32, pThis->svga.u32IrqStatus, pThis->svga.u32IrqStatus & ~u32));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1871:            Log(("vmsvgaIOWrite SVGA_IRQSTATUS_PORT: clearing IRQ\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1904:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_MIN = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1907:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_MAX = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1910:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_NEXT_CMD = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1913:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_STOP = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1916:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_CAPABILITIES = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1919:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_FLAGS = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1922:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_FENCE = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1925:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_HWVERSION = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1928:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_PITCHLOCK = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1931:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_CURSOR_ON = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1934:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_CURSOR_X = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1937:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_CURSOR_Y = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1940:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_CURSOR_COUNT = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1943:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_CURSOR_LAST_UPDATED = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1946:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_RESERVED = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1949:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_CURSOR_SCREEN_ID = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1952:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_DEAD = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1955:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_HWVERSION_REVISED = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1958:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_3D = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1961:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_LIGHTS = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1964:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_TEXTURES = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1967:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_CLIP_PLANES = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1970:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_VERTEX_SHADER_VERSION = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1973:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_VERTEX_SHADER = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1976:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_FRAGMENT_SHADER_VERSION = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1979:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_FRAGMENT_SHADER = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1982:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_RENDER_TARGETS = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1985:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_S23E8_TEXTURES = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1988:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_S10E5_TEXTURES = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1991:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_FIXED_VERTEXBLEND = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1994:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_D16_BUFFER_FORMAT = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:1997:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_D24S8_BUFFER_FORMAT = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2000:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_D24X8_BUFFER_FORMAT = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2003:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_QUERY_TYPES = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2006:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_TEXTURE_GRADIENT_SAMPLING = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2009:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_POINT_SIZE = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2012:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_SHADER_TEXTURES = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2015:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_TEXTURE_WIDTH = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2018:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_TEXTURE_HEIGHT = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2021:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_VOLUME_EXTENT = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2024:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_TEXTURE_REPEAT = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2027:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_TEXTURE_ASPECT_RATIO = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2030:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_TEXTURE_ANISOTROPY = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2033:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_PRIMITIVE_COUNT = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2036:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_VERTEX_INDEX = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2039:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_VERTEX_SHADER_INSTRUCTIONS = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2042:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_FRAGMENT_SHADER_INSTRUCTIONS = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2045:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_VERTEX_SHADER_TEMPS = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2048:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_FRAGMENT_SHADER_TEMPS = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2051:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_TEXTURE_OPS = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2054:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_X8R8G8B8 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2057:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_A8R8G8B8 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2060:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_A2R10G10B10 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2063:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_X1R5G5B5 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2066:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_A1R5G5B5 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2069:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_A4R4G4B4 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2072:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_R5G6B5 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2075:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_LUMINANCE16 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2078:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_LUMINANCE8_ALPHA8 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2081:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_ALPHA8 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2084:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_LUMINANCE8 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2087:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_Z_D16 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2090:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_Z_D24S8 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2093:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_Z_D24X8 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2096:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_DXT1 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2099:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_DXT2 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2102:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_DXT3 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2105:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_DXT4 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2108:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_DXT5 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2111:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_BUMPX8L8V8U8 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2114:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_A2W10V10U10 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2117:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_BUMPU8V8 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2120:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_Q8W8V8U8 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2123:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_CxV8U8 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2126:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_R_S10E5 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2129:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_R_S23E8 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2132:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_RG_S10E5 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2135:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_RG_S23E8 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2138:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_ARGB_S10E5 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2141:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_ARGB_S23E8 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2144:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_VERTEX_SHADER_TEXTURES = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2147:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_SIMULTANEOUS_RENDER_TARGETS = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2150:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_V16U16 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2153:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_G16R16 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2156:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_A16B16G16R16 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2159:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_UYVY = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2162:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_YUY2 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2165:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MULTISAMPLE_NONMASKABLESAMPLES = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2168:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MULTISAMPLE_MASKABLESAMPLES = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2171:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_ALPHATOCOVERAGE = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2174:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SUPERSAMPLE = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2177:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_AUTOGENMIPMAPS = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2180:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_NV12 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2183:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_AYUV = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2186:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_CONTEXT_IDS = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2189:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_MAX_SURFACE_IDS = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2192:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_Z_DF16 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2195:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_Z_DF24 = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2198:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_Z_D24S8_INT = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2201:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_BC4_UNORM = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2204:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS SVGA3D_DEVCAP_SURFACEFMT_BC5_UNORM = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2207:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_3D_CAPS_LAST = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2210:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_GUEST_3D_HWVERSION = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2213:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_FENCE_GOAL = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2216:        Log(("vmsvgaFIFOAccess [0x%x]: %s SVGA_FIFO_BUSY = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2219:        Log(("vmsvgaFIFOAccess [0x%x]: %s access at offset %x = %x\n", GCPhysOffset >> 2, (fWriteAccess) ? "WRITE" : "READ", GCPhysOffset, pFIFO[GCPhysOffset >> 2]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2288:    Log(("vmsvgaR3GMRAccessHandler: GMR access to page %RGp\n", GCPhys));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2394:    Log(("vmsvgaR3InstallNewCursor: cx=%d cy=%d xHot=%d yHot=%d fAlpha=%d cbData=%#x\n", cx, cy, xHot, yHot, fAlpha, cbData));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2711:            Log(("vmsvgaFIFOLoop: reset the fifo thread.\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2723:            Log(("vmsvgaFIFOLoop: terminate the fifo thread.\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2736:            Log(("vmsvgaFIFOLoop: VMSVGA_FIFO_EXTCMD_SAVESTATE.\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2747:            Log(("vmsvgaFIFOLoop: VMSVGA_FIFO_EXTCMD_LOADSTATE.\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2760:            Log(("vmsvgaFIFOLoop: VMSVGA_FIFO_EXTCMD_UPDATE_SURFACE_HEAP_BUFFERS sid=%#x\n", sid));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2809:        Log(("vmsvgaR3RunExtCmdOnFifoThread: uExtCmd=%d enmState=SUSPENDED\n", uExtCmd));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:2845:        Log(("vmsvgaR3RunExtCmdOnFifoThread: uExtCmd=%d enmState=RUNNING\n", uExtCmd));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3018:            Log(("Guest still copying (%x vs %x) current %x next %x stop %x loop %u; sleep a bit\n",
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3165:            Log(("vmsvgaFIFOLoop: timeout\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3171:        Log(("vmsvgaFIFOLoop: enabled=%d configured=%d busy=%d\n", pThis->svga.fEnabled, pThis->svga.fConfigured, pThis->svga.pFIFOR3[SVGA_FIFO_BUSY]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3172:        Log(("vmsvgaFIFOLoop: min  %x max  %x\n", pFIFO[SVGA_FIFO_MIN], pFIFO[SVGA_FIFO_MAX]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3173:        Log(("vmsvgaFIFOLoop: next %x stop %x\n", pFIFO[SVGA_FIFO_NEXT_CMD], pFIFO[SVGA_FIFO_STOP]));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3314:                    Log(("vmsvgaFIFOLoop: SVGA_CMD_FENCE %x\n", pCmdFence->fence));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3319:                        Log(("vmsvgaFIFOLoop: any fence irq\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3327:                        Log(("vmsvgaFIFOLoop: fence goal reached irq (fence=%x)\n", pCmdFence->fence));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3332:                    Log(("SVGA_CMD_FENCE is bogus when offFifoMin is %#x!\n", offFifoMin));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3344:                Log(("vmsvgaFIFOLoop: UPDATE (%d,%d)(%d,%d)\n", pUpdate->x, pUpdate->y, pUpdate->width, pUpdate->height));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3356:                Log(("vmsvgaFIFOLoop: CURSOR id=%d size (%d,%d) hotspot (%d,%d) andMaskDepth=%d xorMaskDepth=%d\n",
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3386:                Log(("vmsvgaFIFOLoop: ALPHA_CURSOR id=%d size (%d,%d) hotspot (%d,%d)\n", pCursor->id, pCursor->width, pCursor->height, pCursor->hotspotX, pCursor->hotspotY));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3433:                    Log(("vmsvgaFIFOLoop: ESCAPE (%x %x) VMWARE cmd=%x\n", pEscape->nsid, pEscape->size, cmd));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3443:                            Log(("SVGA_ESCAPE_VMWARE_VIDEO_SET_REGS: stream %x\n", pVideoCmd->header.streamId));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3445:                                Log(("SVGA_ESCAPE_VMWARE_VIDEO_SET_REGS: reg %x val %x\n", pVideoCmd->items[iReg].registerId, pVideoCmd->items[iReg].value));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3456:                            Log(("SVGA_ESCAPE_VMWARE_VIDEO_FLUSH: stream %x\n", pVideoCmd->streamId));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3462:                            Log(("SVGA_CMD_ESCAPE: Unknown vmware escape: %x\n", cmd));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3467:                    Log(("vmsvgaFIFOLoop: ESCAPE %x %x\n", pEscape->nsid, pEscape->size));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3476:                Log(("vmsvgaFIFOLoop: SVGA_CMD_DEFINE_GMR2 id=%x %x pages\n", pCmd->gmrId, pCmd->numPages));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3514:                Log(("vmsvgaFIFOLoop: SVGA_CMD_REMAP_GMR2 id=%x flags=%x offset=%x npages=%x\n", pCmd->gmrId, pCmd->flags, pCmd->offsetPages, pCmd->numPages));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3672:                Log(("vmsvgaFIFOLoop: SVGA_CMD_DEFINE_SCREEN id=%x flags=%x size=(%d,%d) root=(%d,%d)\n", pCmd->screen.id, pCmd->screen.flags, pCmd->screen.size.width, pCmd->screen.size.height, pCmd->screen.root.x, pCmd->screen.root.y));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3674:                    Log(("vmsvgaFIFOLoop: SVGA_CMD_DEFINE_SCREEN flags SVGA_SCREEN_HAS_ROOT\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3676:                    Log(("vmsvgaFIFOLoop: SVGA_CMD_DEFINE_SCREEN flags SVGA_SCREEN_IS_PRIMARY\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3678:                    Log(("vmsvgaFIFOLoop: SVGA_CMD_DEFINE_SCREEN flags SVGA_SCREEN_FULLSCREEN_HINT\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3680:                    Log(("vmsvgaFIFOLoop: SVGA_CMD_DEFINE_SCREEN flags SVGA_SCREEN_DEACTIVATE \n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3682:                    Log(("vmsvgaFIFOLoop: SVGA_CMD_DEFINE_SCREEN flags SVGA_SCREEN_BLANKING\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3699:                Log(("vmsvgaFIFOLoop: SVGA_CMD_DESTROY_SCREEN id=%x\n", pCmd->screenId));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3709:                Log(("vmsvgaFIFOLoop: SVGA_CMD_DEFINE_GMRFB gmr=%x offset=%x bytesPerLine=%x bpp=%d color depth=%d\n", pCmd->ptr.gmrId, pCmd->ptr.offset, pCmd->bytesPerLine, pCmd->format.s.bitsPerPixel, pCmd->format.s.colorDepth));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3723:                Log(("vmsvgaFIFOLoop: SVGA_CMD_BLIT_GMRFB_TO_SCREEN src=(%d,%d) dest id=%d (%d,%d)(%d,%d)\n", pCmd->srcOrigin.x, pCmd->srcOrigin.y, pCmd->destScreenId, pCmd->destRect.left, pCmd->destRect.top, pCmd->destRect.right, pCmd->destRect.bottom));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3781:                Log(("vmsvgaFIFOLoop: SVGA_CMD_BLIT_SCREEN_TO_GMRFB dest=(%d,%d) src id=%d (%d,%d)(%d,%d)\n", pCmd->destOrigin.x, pCmd->destOrigin.y, pCmd->srcScreenId, pCmd->srcRect.left, pCmd->srcRect.top, pCmd->srcRect.right, pCmd->srcRect.bottom));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3792:                Log(("vmsvgaFIFOLoop: SVGA_CMD_ANNOTATION_FILL red=%x green=%x blue=%x\n", pCmd->color.s.r, pCmd->color.s.g, pCmd->color.s.b));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:3803:                Log(("vmsvgaFIFOLoop: SVGA_CMD_ANNOTATION_COPY\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:4243:                    Log(("vmsvgaFIFOLoop: fifo progress irq\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:4250:                    Log(("vmsvgaFIFOLoop: Trigger interrupt with status %x\n", u32IrqStatus));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:4262:            Log(("vmsvgaFIFOLoop: emptied the FIFO next=%x stop=%x\n", pFIFO[SVGA_FIFO_NEXT_CMD], offCurrentCmd));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:4328:    Log(("vmsvgaGMRTransfer: gmr=%x offset=%x pitch=%d cbWidth=%d cHeight=%d; src offset=%d src pitch=%d\n",
VBox/Devices/Graphics/DevVGA-SVGA.cpp:4496:    Log(("vmsvgaFIFOLoopWakeUp\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:4512:        Log(("vmsvgaSetTraces: *not* allowed to disable dirty page tracking when the device is in legacy mode.\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:4521:        Log(("vmsvgaSetTraces: enable dirty page handling for the frame buffer only (%x bytes)\n", 0));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:4534:            Log(("vmsvgaSetTraces: enable frame buffer dirty page tracking. (%x bytes; vram %x)\n", cbFrameBuffer, pThis->vram_size));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:4543:            Log(("vmsvgaSetTraces: disable frame buffer dirty page tracking\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:4559:    Log(("vgasvgaR3IORegionMap: iRegion=%d GCPhysAddress=%RGp cb=%RGp enmType=%d\n", iRegion, GCPhysAddress, cb, enmType));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:4583:        Log(("vmsvgaR3IORegionMap: base port = %x\n", pThis->svga.BasePort));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:4609:                Log(("vmsvgaR3IORegionMap: GCPhysFIFO=%RGp cbFIFO=%#x\n", GCPhysAddress, pThis->svga.cbFIFO));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:4970:    Log(("vmsvgaReset\n"));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:5117:        Log(("%s: Failed to create event semaphore for FIFO handling.\n", __FUNCTION__));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:5125:        Log(("%s: Failed to create event semaphore for external fifo cmd handling.\n", __FUNCTION__));
VBox/Devices/Graphics/DevVGA-SVGA.cpp:5175:    Log(("VMSVGA: Maximum size (%d,%d)\n", pThis->svga.u32MaxWidth, pThis->svga.u32MaxHeight));
VBox/Devices/Graphics/DevVGA-SVGA3d-shared.cpp:105:        Log(("RegisterClass failed with %x\n", GetLastError()));
VBox/Devices/Graphics/DevVGA-SVGA3d-shared.cpp:208:            Log(("GetMessage failed with %x\n", GetLastError()));
VBox/Devices/Graphics/DevVGA-SVGA3d-shared.cpp:213:    Log(("vmsvga3dWindowThread: end loop\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d.cpp:66:    Log(("vmsvga3dSurfaceDefine: sid=%x surfaceFlags=%x format=%s (%x) multiSampleCount=%d autogenFilter=%d, cMipLevels=%d size=(%d,%d,%d)\n",
VBox/Devices/Graphics/DevVGA-SVGA3d.cpp:505:            Log(("Copy box (mem) %d (%d,%d,%d)(%d,%d,%d) dest (%d,%d)\n",
VBox/Devices/Graphics/DevVGA-SVGA3d.cpp:515:                Log(("Skip empty box\n"));
VBox/Devices/Graphics/DevVGA-SVGA3d.cpp:617:            Log(("Copy box (hw) %d (%d,%d,%d)(%d,%d,%d) dest (%d,%d)\n",
VBox/Devices/Graphics/DevVGA-SVGA3d.cpp:627:                Log(("Skip empty box\n"));
VBox/Devices/PC/DevPIC.cpp:167:    Log(("pic_set_irq1: irq=%d level=%d\n", irq, level));
VBox/Devices/PC/DevPIC.cpp:233:    Log(("pic_get_irq%d: mask=%x\n", pPic->idxPic, pPic->irr & ~pPic->imr));
VBox/Devices/PC/DevPIC.cpp:238:    Log(("pic_get_irq: priority=%x\n", priority));
VBox/Devices/PC/DevPIC.cpp:250:    Log(("pic_get_irq%d: cur_priority=%x pending=%d\n", pPic->idxPic,
VBox/Devices/PC/DevPIC.cpp:268:    Log(("pic_update_irq irq2=%d\n", irq2));
VBox/Devices/PC/DevPIC.cpp:290:                Log(("pic%d: imr=%x irr=%x padd=%d\n", i, pThis->aPics[i].imr, pThis->aPics[i].irr, pThis->aPics[i].priority_add));
VBox/Devices/PC/DevPIC.cpp:291:            Log(("pic: cpu_interrupt\n"));
VBox/Devices/PC/DevPIC.cpp:298:            Log(("pic_update_irq: irq 2 is active, but no interrupt is pending on the slave pic!!\n"));
VBox/Devices/PC/DevPIC.cpp:313:        Log(("pic_update_irq: no interrupt is pending!!\n"));
VBox/Devices/PC/DevPIC.cpp:337:    Log(("picSetIrq %d %d\n", iIrq, iLevel));
VBox/Devices/PC/DevPIC.cpp:405:                Log(("picGetInterrupt: spurious IRQ on slave controller, converted to IRQ15\n"));
VBox/Devices/PC/DevPIC.cpp:425:        Log(("picGetInterrupt: spurious IRQ on master controller, converted to IRQ7\n"));
VBox/Devices/PC/DevPIC.cpp:432:    Log(("picGetInterrupt: 0x%02x pending 0:%d 1:%d\n", intno, pic_get_irq(&pThis->aPics[0]), pic_get_irq(&pThis->aPics[1])));
VBox/Devices/PC/DevPIC.cpp:460:    Log(("pic_write: addr=0x%02x val=0x%02x\n", addr, val));
VBox/Devices/PC/DevPIC.cpp:503:                        Log(("pic_write: EOI prio=%d irq=%d\n", priority, irq));
VBox/Devices/PC/DevPIC.cpp:516:                    Log(("pic_write: EOI2 for irq %d\n", irq));
VBox/Devices/PC/DevPIC.cpp:526:                    Log(("pic_write: lowest priority %d (highest %d)\n", val & 7, pPic->priority_add));
VBox/Devices/PC/DevPIC.cpp:534:                    Log(("pic_write: EOI3 for irq %d\n", irq));
VBox/Devices/PC/DevPIC.cpp:561:                Log(("pic_write: set irq base to %x\n", pPic->irq_base));
VBox/Devices/PC/DevPIC.cpp:573:                Log(("pic_write: special_fully_nested_mode=%d auto_eoi=%d\n", pPic->special_fully_nested_mode, pPic->auto_eoi));
VBox/Devices/PC/DevPIC.cpp:636:    Log(("pic_read: addr=0x%02x val=0x%02x\n", addr1, ret));
VBox/Devices/PC/DevPIC.cpp:881:    Log(("DevPIC: fGCEnabled=%RTbool fR0Enabled=%RTbool\n", fGCEnabled, fR0Enabled));
VBox/Devices/PC/DevPcBios.cpp:284:                Log(("pcbios: %s\n", pThis->szMsg));
VBox/Devices/PC/DevPcBios.cpp:292:                Log(("pcbios: %s\n", pThis->szMsg));
VBox/Devices/PC/DevPcBios.cpp:527:                Log(("%s: LCHS=%d %d %d\n", __FUNCTION__, cLCHSCylinders, cLCHSHeads, cLCHSSectors));
VBox/Devices/PC/ipxe/src/util/hijack.c:82: * Log error message
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:679:    pseudo_bit_t	log_mpt_sz[0x00006];   /* Log (base 2) of the number of region/windows entries in the MPT table. */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:742:    pseudo_bit_t	log_num_of_qp[0x00005];/* Log base 2 of number of supported QPs */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:753:    pseudo_bit_t	log_num_of_ee[0x00005];/* Log base 2 of number of supported EEs. */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:763:    pseudo_bit_t	log_num_of_srq[0x00005];/* Log base 2 of number of supported SRQs. */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:771:    pseudo_bit_t	log_num_of_cq[0x00005];/* Log base 2 of number of supported CQs. */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:804:    pseudo_bit_t	log_num_eq[0x00004];   /* Log base 2 of number of supported EQs.
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:1480:    pseudo_bit_t	log_max_srqs[0x00005]; /* Log (base 2) of the number of SRQs to allocate (0 if no SRQs are required), valid only if srq bit is set. */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:1808:    pseudo_bit_t	log_cq_size[0x00005];  /* Log (base 2) of the CQ size (in entries) */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:2080:    pseudo_bit_t	log2_rsvd_qps[0x00004];/* Log (base 2) of the number of QPs reserved for firmware use
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:2088:    pseudo_bit_t	log2_rsvd_ees[0x00004];/* Log (base 2) of the number of EECs reserved for firmware use
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:2091:    pseudo_bit_t	log_max_srqs[0x00005]; /* Log base 2 of the maximum number of SRQs supported, valid only if SRQ bit is set.
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:2094:    pseudo_bit_t	log2_rsvd_srqs[0x00004];/* Log (base 2) of the number of reserved SRQs for firmware use
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:2100:    pseudo_bit_t	log2_rsvd_cqs[0x00004];/* Log (base 2) of the number of CQs reserved for firmware use
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:2112:    pseudo_bit_t	log_max_mpts[0x00006]; /* Log (base 2) of the maximum number of MPT entries (the number of Regions/Windows) */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:2118:    pseudo_bit_t	log2_rsvd_mrws[0x00004];/* Log (base 2) of the number of MPTs reserved for firmware use
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:2123:    pseudo_bit_t	log2_rsvd_mtts[0x00004];/* Log (base 2) of the number of MTT entries reserved for firmware use
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:2136:    pseudo_bit_t	log2_rsvd_rdbs[0x00004];/* Log (base 2) of the number of RDB entries reserved for firmware use
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25218_PRM.h:2676:    pseudo_bit_t	log_cq_size[0x00005];  /* Log (base 2) of the CQ size (in entries).
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:553:    pseudo_bit_t	log_dmpt_sz[0x00006];  /* Log (base 2) of the number of region/windows entries in the dMPT table. */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:624:    pseudo_bit_t	log_num_of_qp[0x00005];/* Log base 2 of number of supported QPs */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:636:    pseudo_bit_t	log_num_of_srq[0x00005];/* Log base 2 of number of supported SRQs. */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:644:    pseudo_bit_t	log_num_of_cq[0x00005];/* Log base 2 of number of supported CQs. */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:670:    pseudo_bit_t	log_num_of_eq[0x00005];/* Log base 2 of number of supported EQs.
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:680:    pseudo_bit_t	log_num_rd[0x00003];   /* Log (base 2) of the maximum number of RdmaRdC entries per QP. This denotes the maximum number of outstanding reads/atomics as a responder. */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:957:    pseudo_bit_t	log2_page_size[0x00006];/* Log (base 2) of MTT page size in units of 4KByte */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:1499:    pseudo_bit_t	log2_page_size[0x00006];/* Log (base 2) of MTT page size in units of 4KByte */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:1776:    pseudo_bit_t	log_cq_size[0x00005];  /* Log (base 2) of the CQ size (in entries) */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:2053:    pseudo_bit_t	log2_rsvd_qps[0x00004];/* Log (base 2) of the number of QPs reserved for firmware use
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:2069:    pseudo_bit_t	log2_rsvd_cqs[0x00004];/* Log (base 2) of the number of CQs reserved for firmware use
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:2083:    pseudo_bit_t	log_max_d_mpts[0x00006];/* Log (base 2) of the maximum number of data MPT entries (the number of Regions/Windows) */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:2089:    pseudo_bit_t	log2_rsvd_mrws[0x00004];/* Log (base 2) of the number of MPTs reserved for firmware use
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:2094:    pseudo_bit_t	log2_rsvd_mtts[0x00004];/* Log (base 2) of the number of MTT entries reserved for firmware use
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:2126:    pseudo_bit_t	log_drain_size[0x00008];/* Log (base 2) of minimum size of the NoDropVLDrain buffer, specified in 4Kpages units */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:2127:    pseudo_bit_t	log_max_msg[0x00005];  /* Log (base 2) of the maximum message size supported by the device */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:2438:    pseudo_bit_t	log_eq_size[0x00005];  /* Log (base 2) of the EQ size (in entries).  Maximum EQ size is 2^22 EQEs (max log_eq_size is 22) */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:2449:    pseudo_bit_t	log2_page_size[0x00006];/* Log (base 2) of MTT page size in units of 4KByte */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:2530:    pseudo_bit_t	mtt_rep[0x00004];      /* Log (base 2) of the number of time an MTT is replicated.E.g. for 64KB virtual blocks from 512B blocks, a replication factor of 2^7 is needed (MTT_REPLICATION_FACTOR=7).Up to 1MB of replicated block works */
VBox/Devices/PC/ipxe/src/drivers/infiniband/MT25408_PRM.h:2583:    pseudo_bit_t	log_cq_size[0x00005];  /* Log (base 2) of the CQ size (in entries).
VBox/Devices/PC/ipxe/src/drivers/net/phantom/phantom.c:471: * @v log		Log number
VBox/Devices/PC/ipxe/src/include/ipxe/console.h:123:/** Log messages */
VBox/Devices/PC/ipxe/src/include/syslog.h:54:/** Log all messages */
VBox/Devices/PC/ipxe/src/net/fcels.c:517:	/* Log in port */
VBox/Devices/PC/ipxe/src/net/fcels.c:780: * Log out individual peer or whole port as applicable
VBox/Devices/PC/ipxe/src/net/fcels.c:827:	/* Log out individual peer or whole port as applicable */
VBox/Devices/PC/ipxe/src/net/fcels.c:848:	/* Log out individual peer or whole port as applicable */
VBox/Devices/PC/ipxe/src/net/fcels.c:1039:	/* Log in ULP, if applicable */
VBox/Devices/PC/ipxe/src/net/fc.c:807:	/* Log out port, if necessary */
VBox/Devices/PC/ipxe/src/net/fc.c:927: * Log in Fibre Channel port
VBox/Devices/PC/ipxe/src/net/fc.c:957:	/* Log in, if applicable */
VBox/Devices/PC/ipxe/src/net/fc.c:998:	/* Log in to name server, if attached to a fabric */
VBox/Devices/PC/ipxe/src/net/fc.c:1029: * Log out Fibre Channel port
VBox/Devices/PC/ipxe/src/net/fc.c:1136:		/* Transport layer is not ready.  Log out port and
VBox/Devices/PC/ipxe/src/net/fc.c:1288: * Log in Fibre Channel peer
VBox/Devices/PC/ipxe/src/net/fc.c:1308:	/* Log in, if applicable */
VBox/Devices/PC/ipxe/src/net/fc.c:1337: * Log out Fibre Channel peer
VBox/Devices/PC/ipxe/src/net/fc.c:1644: * Log in Fibre Channel upper-layer protocol
VBox/Devices/PC/ipxe/src/net/fc.c:1680:	/* Log in, if applicable */
VBox/Devices/PC/ipxe/src/net/fc.c:1717: * Log out Fibre Channel upper-layer protocol
VBox/Devices/PC/ipxe/src/core/downloader.c:77:	/* Log download status */
VBox/Devices/PC/ipxe/contrib/vm/serial-console:16:    -l,--log FILE     Log output to file
VBox/Devices/PC/ipxe/contrib/vm/serial-console:61:Log all output (i.e. everything that is printed in the
VBox/Devices/PC/ipxe/contrib/vm/serial-console.1:144:\&    \-l,\-\-log FILE     Log output to file
VBox/Devices/PC/ipxe/contrib/vm/serial-console.1:181:Log all output (i.e. everything that is printed in the
VBox/Devices/PC/DevHPET.cpp:407:            Log(("wrap on timer %d: till=%u ticks=%lld diff64=%lld\n",
VBox/Devices/PC/DevHPET.cpp:460:            Log(("read HPET_TN_CFG on %d: %#x\n", iTimerNo, u32Value));
VBox/Devices/PC/DevHPET.cpp:465:            Log(("read HPET_TN_CFG+4 on %d: %#x\n", iTimerNo, u32Value));
VBox/Devices/PC/DevHPET.cpp:470:            Log(("read HPET_TN_CMP on %d: %#x (%#llx)\n", pHpetTimer->idxTimer, u32Value, pHpetTimer->u64Cmp));
VBox/Devices/PC/DevHPET.cpp:475:            Log(("read HPET_TN_CMP+4 on %d: %#x (%#llx)\n", pHpetTimer->idxTimer, u32Value, pHpetTimer->u64Cmp));
VBox/Devices/PC/DevHPET.cpp:480:            Log(("read HPET_TN_ROUTE on %d: %#x\n", iTimerNo, u32Value));
VBox/Devices/PC/DevHPET.cpp:527:            Log(("write HPET_TN_CFG: %d: %x\n", iTimerNo, u32NewValue));
VBox/Devices/PC/DevHPET.cpp:538:                Log(("setting timer %d to 32-bit mode\n", iTimerNo));
VBox/Devices/PC/DevHPET.cpp:555:            Log(("write HPET_TN_CFG + 4, useless\n"));
VBox/Devices/PC/DevHPET.cpp:561:            Log(("write HPET_TN_CMP on %d: %#x\n", iTimerNo, u32NewValue));
VBox/Devices/PC/DevHPET.cpp:578:            Log(("write HPET_TN_CMP + 4 on %d: %#x\n", iTimerNo, u32NewValue));
VBox/Devices/PC/DevHPET.cpp:597:            Log(("write HPET_TN_ROUTE\n"));
VBox/Devices/PC/DevHPET.cpp:601:            Log(("write HPET_TN_ROUTE + 4\n"));
VBox/Devices/PC/DevHPET.cpp:637:            Log(("read HPET_ID: %#x\n", u32Value));
VBox/Devices/PC/DevHPET.cpp:644:            Log(("read HPET_PERIOD: %#x\n", u32Value));
VBox/Devices/PC/DevHPET.cpp:651:            Log(("read HPET_CFG: %#x\n", u32Value));
VBox/Devices/PC/DevHPET.cpp:658:            Log(("read of HPET_CFG + 4: %#x\n", u32Value));
VBox/Devices/PC/DevHPET.cpp:676:            Log(("read HPET_COUNTER: %s part value %x (%#llx)\n",
VBox/Devices/PC/DevHPET.cpp:685:            Log(("read HPET_STATUS: %#x\n", u32Value));
VBox/Devices/PC/DevHPET.cpp:689:            Log(("invalid HPET register read: %x\n", idxReg));
VBox/Devices/PC/DevHPET.cpp:721:            Log(("write HPET_ID, useless\n"));
VBox/Devices/PC/DevHPET.cpp:729:            Log(("write HPET_CFG: %x (old %x)\n", u32NewValue, iOldValue));
VBox/Devices/PC/DevHPET.cpp:781:            Log(("write HPET_CFG + 4: %x -> %#llx\n", u32NewValue, pThis->u64HpetConfig));
VBox/Devices/PC/DevHPET.cpp:791:            Log(("write HPET_STATUS: %x -> ISR=%#llx\n", u32NewValue, pThis->u64Isr));
VBox/Devices/PC/DevHPET.cpp:798:            Log(("write HPET_STATUS + 4: %x\n", u32NewValue));
VBox/Devices/PC/DevHPET.cpp:808:            Log(("write HPET_COUNTER: %#x -> %llx\n", u32NewValue, pThis->u64HpetCounter));
VBox/Devices/PC/DevHPET.cpp:817:            Log(("write HPET_COUNTER + 4: %#x -> %llx\n", u32NewValue, pThis->u64HpetCounter));
VBox/Devices/PC/DevACPI.cpp:925:    Log(("acpiR3Port_PowerButtonPress: handled=%d status=%x\n", pThis->fPowerButtonHandled, pThis->pm1a_sts));
VBox/Devices/PC/DevACPI.cpp:1044:    Log(("acpi: uInterval = %RU64\n", uInterval));
VBox/Devices/PC/DevACPI.cpp:1085:    Log(("acpi: pm timer sts %#x (%d), en %#x (%d)\n",
VBox/Devices/PC/DevACPI.cpp:1209:    Log(("acpiR3BatIndexWrite: %#x (%#x)\n", u32, u32 >> 2));
VBox/Devices/PC/DevACPI.cpp:1290:    Log(("acpiR3SysInfoIndexWrite: %#x (%#x)\n", u32, u32 >> 2));
VBox/Devices/PC/DevACPI.cpp:1509:    Log(("acpiR3SysInfoDataRead: idx=%d val=%#x (%u) rc=%Rrc\n", uSystemInfoIndex, *pu32, *pu32, rc));
VBox/Devices/PC/DevACPI.cpp:1523:    Log(("addr=%#x cb=%d u32=%#x si=%#x\n", Port, cb, u32, pThis->uSystemInfoIndex));
VBox/Devices/PC/DevACPI.cpp:1573:    Log(("acpiR3Pm1aEnRead -> %#x\n", *pu32));
VBox/Devices/PC/DevACPI.cpp:1588:    Log(("acpiR3PM1aEnWrite: %#x (%#x)\n", u32, u32 & ~(RSR_EN | IGN_EN) & 0xffff));
VBox/Devices/PC/DevACPI.cpp:1614:    Log(("acpiR3Pm1aStsRead: %#x\n", *pu32));
VBox/Devices/PC/DevACPI.cpp:1629:    Log(("acpiR3PM1aStsWrite: %#x (%#x)\n", u32, u32 & ~(RSR_STS | IGN_STS) & 0xffff));
VBox/Devices/PC/DevACPI.cpp:1657:    Log(("acpiR3Pm1aCtlRead: %#x\n", *pu32));
VBox/Devices/PC/DevACPI.cpp:1672:    Log(("acpiR3PM1aCtlWrite: %#x (%#x)\n", u32, u32 & ~(RSR_CNT | IGN_CNT) & 0xffff));
VBox/Devices/PC/DevACPI.cpp:1718:    Log(("acpiR3PM1aCtlWrite: rc=%Rrc\n", rc));
VBox/Devices/PC/DevACPI.cpp:1761:    Log(("acpi: acpiPMTmrRead -> %#x\n", *pu32));
VBox/Devices/PC/DevACPI.cpp:1809:    Log(("acpiR3Gpe0StsRead: %#x\n", *pu32));
VBox/Devices/PC/DevACPI.cpp:1824:    Log(("acpiR3Gpe0StsWrite: %#x (%#x)\n", u32, pThis->gpe0_sts & ~u32));
VBox/Devices/PC/DevACPI.cpp:1849:    Log(("acpiR3Gpe0EnRead: %#x\n", *pu32));
VBox/Devices/PC/DevACPI.cpp:1864:    Log(("acpiR3Gpe0EnWrite: %#x\n", u32));
VBox/Devices/PC/DevACPI.cpp:1876:    Log(("acpiR3SmiWrite %#x\n", u32));
VBox/Devices/PC/DevACPI.cpp:1888:        Log(("acpiR3SmiWrite: %#x <- unknown value\n", u32));
VBox/Devices/PC/DevACPI.cpp:1899:    Log(("acpiR3ResetWrite: %#x\n", u32));
VBox/Devices/PC/DevACPI.cpp:1912:        Log(("acpiR3ResetWrite: %#x <- unknown value\n", u32));
VBox/Devices/PC/DevACPI.cpp:1928:            Log(("%#x\n", u32 & 0xff));
VBox/Devices/PC/DevACPI.cpp:1931:            Log(("%#6x\n", u32 & 0xffff));
VBox/Devices/PC/DevACPI.cpp:1934:            Log(("%#10x\n", u32));
VBox/Devices/PC/DevACPI.cpp:1951:            Log(("%c", u32 & 0xff));
VBox/Devices/PC/DevACPI.cpp:2084:    Log(("acpi: rebasing PM 0x%x -> 0x%x\n", pThis->uPmIoPortBase, NewIoPortBase));
VBox/Devices/PC/DevACPI.cpp:2350:    Log(("acpi: rebasing SMBus 0x%x -> 0x%x\n", pThis->uSMBusIoPortBase, NewIoPortBase));
VBox/Devices/PC/DevACPI.cpp:2782:        Log(("Setup RSDT: [%d] = %x\n", i, rsdt->u32Entry[i]));
VBox/Devices/PC/DevACPI.cpp:2810:        Log(("Setup XSDT: [%d] = %RX64\n", i, xsdt->u64Entry[i]));
VBox/Devices/PC/DevACPI.cpp:3252:    Log(("RSDP 0x%08X\n", apicR3FindRsdpSpace()));
VBox/Devices/PC/DevACPI.cpp:3254:    Log(("RSDT 0x%08X XSDT 0x%08X\n", GCPhysRsdt + addend, GCPhysXsdt + addend));
VBox/Devices/PC/DevACPI.cpp:3255:    Log(("FACS 0x%08X FADT (1.0) 0x%08X, FADT (2+) 0x%08X\n", GCPhysFacs + addend, GCPhysFadtAcpi1 + addend, GCPhysFadtAcpi2 + addend));
VBox/Devices/PC/DevACPI.cpp:3256:    Log(("DSDT 0x%08X", GCPhysDsdt + addend));
VBox/Devices/PC/DevACPI.cpp:3258:        Log((" MADT 0x%08X", GCPhysApic + addend));
VBox/Devices/PC/DevACPI.cpp:3260:        Log((" HPET 0x%08X", GCPhysHpet + addend));
VBox/Devices/PC/DevACPI.cpp:3262:        Log((" MCFG 0x%08X", GCPhysMcfg + addend));
VBox/Devices/PC/DevACPI.cpp:3264:        Log((" CUST 0x%08X", GCPhysCust + addend));
VBox/Devices/PC/DevACPI.cpp:3265:    Log((" SSDT 0x%08X", GCPhysSsdt + addend));
VBox/Devices/PC/DevACPI.cpp:3266:    Log(("\n"));
VBox/Devices/PC/DevACPI.cpp:3336:        Log(("acpi: ignore interrupt line settings: %d, we'll use hardcoded value %d\n", u32Value, SCI_INT));
VBox/Devices/PC/DevACPI.cpp:3469:        Log(("acpiResume: setting WAK_STS\n"));
VBox/Devices/PC/DevACPI.cpp:3848:                Log(("acpi: Attached CPU %u\n", i));
VBox/Devices/PC/DevACPI.cpp:3851:                Log(("acpi: CPU %u not attached yet\n", i));
VBox/Devices/PC/DevACPI.cpp:4109:       Log(("acpi: %s/%d: warning: no driver attached to LUN #0!\n",
VBox/Devices/PC/DevPit-i8254.cpp:452:                Log(("pit_set_gate: restarting mode %d\n", pChan->mode));
VBox/Devices/PC/DevPit-i8254.cpp:462:                Log(("pit_set_gate: restarting mode %d\n", pChan->mode));
VBox/Devices/PC/DevPit-i8254.cpp:490:            Log(("PIT: mode=%d count=%#x (%u) - %d.%02d Hz (ch=0)\n",
VBox/Devices/PC/DevPit-i8254.cpp:495:        Log(("PIT: mode=%d count=%#x (%u) - %d.%02d Hz (ch=%d)\n",
VBox/Devices/PC/DevPit-i8254.cpp:658:        Log(("pitIOPortRead: uPort=%#x cb=%x *pu32=unused!\n", uPort, cb));
VBox/Devices/PC/DevPit-i8254.cpp:886:        Log(("pitIOPortSpeakerRead: uPort=%#x cb=%x *pu32=%#x\n", uPort, cb, *pu32));
VBox/Devices/PC/DevPit-i8254.cpp:889:    Log(("pitIOPortSpeakerRead: uPort=%#x cb=%x *pu32=unused!\n", uPort, cb));
VBox/Devices/PC/DevPit-i8254.cpp:994:    Log(("pitIOPortSpeakerWrite: uPort=%#x cb=%x u32=%#x\n", uPort, cb, u32));
VBox/Devices/PC/DevPit-i8254.cpp:1160:    Log(("pitTimer\n"));
VBox/Devices/PC/DevLPC.cpp:91:    Log(("rcba_read at %llx\n", (uint64_t)addr));
VBox/Devices/PC/DevLPC.cpp:99:          Log(("rcba_read HPET_CONFIG_POINTER\n"));
VBox/Devices/PC/DevLPC.cpp:104:          Log(("rcba_read GCS\n"));
VBox/Devices/PC/DevLPC.cpp:108:          Log(("Unknown RCBA read\n"));
VBox/Devices/PC/DevLPC.cpp:118:    Log(("rcba_write %llx = %#x\n", (uint64_t)addr, value));
VBox/Devices/PC/DevLPC.cpp:124:          Log(("rcba_write GCS\n"));
VBox/Devices/PC/DevLPC.cpp:127:          Log(("Unknown RCBA write\n"));
VBox/Devices/PC/DevRTC.cpp:358:        Log(("CMOS: Read bank %d idx %#04x: %#04x\n", bank, pThis->cmos_index[bank], *pu32));
VBox/Devices/PC/DevRTC.cpp:388:        Log(("CMOS: Write bank %d idx %#04x: %#04x (old %#04x)\n", bank,
VBox/Devices/PC/DevRTC.cpp:1038:    Log(("CMOS bank 0: \n%16.128Rhxd\n", &pThis->cmos_data[0]));
VBox/Devices/PC/DevRTC.cpp:1039:    Log(("CMOS bank 1: \n%16.128Rhxd\n", &pThis->cmos_data[CMOS_BANK_SIZE]));
VBox/Devices/PC/DevRTC.cpp:1125:    Log(("RTC: Irq=%#x Base=%#x fRCEnabled=%RTbool fR0Enabled=%RTbool\n",
VBox/Devices/PC/DevDMA.cpp:281:        Log(("Bad size write to count register %#x (size %d, data %#x)\n",
VBox/Devices/PC/DevDMA.cpp:314:        Log(("Count read: port %#06x, reg %#04x, data %#x\n", port, reg, val));
VBox/Devices/PC/DevDMA.cpp:343:                Log(("DMA command %#x is not supported, ignoring!\n", u32));
VBox/Devices/PC/DevDMA.cpp:393:        Log(("dmaWriteCtl: port %#06x, chidx %d, data %#02x\n",
VBox/Devices/PC/DevDMA.cpp:399:        Log(("Bad size write to controller register %#x (size %d, data %#x)\n",
VBox/Devices/PC/DevDMA.cpp:454:        Log(("Ctrl read: port %#06x, reg %#04x, data %#x\n", port, reg, val));
VBox/Devices/PC/DevDMA.cpp:534:        Log(("Bad size write to page register %#x (size %d, data %#x)\n",
VBox/Devices/PC/DevDMA.cpp:584:        Log(("Bad size write to high page register %#x (size %d, data %#x)\n",
VBox/Devices/PC/DevDMA.cpp:761:        Log(("DMA verify transfer, ignoring write.\n"));
VBox/Devices/EFI/Firmware/IntelFrameworkPkg/Include/Guid/DataHubRecords.h:2777:/// Misc. System Event Log  - SMBIOS Type 15
VBox/Devices/EFI/Firmware/AppPkg/Applications/Sockets/TftpServer/TftpServer.c:1681:  //  Log the receive time
VBox/Devices/EFI/Firmware/IntelFrameworkModulePkg/IntelFrameworkModulePkg.dec:120:  #   TRUE  - Log StatusCode report into DataHub.<BR>
VBox/Devices/EFI/Firmware/IntelFrameworkModulePkg/IntelFrameworkModulePkg.dec:122:  # @Prompt Log StatusCode into DataHub
VBox/Devices/EFI/Firmware/IntelFrameworkModulePkg/Universal/DataHubDxe/DataHub.c:27:  Log data record into the data logging hub
VBox/Devices/EFI/Firmware/IntelFrameworkModulePkg/Universal/DataHubDxe/DataHub.c:33:  @param RawData                Data Log record as defined by DataRecordGuid
VBox/Devices/EFI/Firmware/IntelFrameworkModulePkg/Universal/DataHubDxe/DataHub.c:34:  @param RawDataSize            Size of Data Log data in bytes
VBox/Devices/EFI/Firmware/IntelFrameworkModulePkg/Universal/DataHubDxe/DataHub.c:108:  // Build Standard Log Header
VBox/Devices/EFI/Firmware/IntelFrameworkModulePkg/Universal/DataHubDxe/DataHub.c:157:  @param Head             Head of Data Log linked list.
VBox/Devices/EFI/Firmware/IntelFrameworkModulePkg/Universal/DataHubDxe/DataHub.h:77://  structure. Head pointer to the list is the Log member of
VBox/Devices/EFI/Firmware/IntelFrameworkModulePkg/Universal/StatusCode/DatahubStatusCodeHandlerDxe/DataHubStatusCodeWorker.c:282:  // Log DataRecord in Data Hub.
VBox/Devices/EFI/Firmware/IntelFrameworkModulePkg/Universal/StatusCode/DatahubStatusCodeHandlerDxe/DataHubStatusCodeWorker.c:315:    // Log DataRecord in Data Hub
VBox/Devices/EFI/Firmware/IntelFrameworkModulePkg/Universal/StatusCode/RuntimeDxe/DataHubStatusCodeWorker.c:296:  // Log DataRecord in Data Hub.
VBox/Devices/EFI/Firmware/IntelFrameworkModulePkg/Universal/StatusCode/RuntimeDxe/DataHubStatusCodeWorker.c:329:    // Log DataRecord in Data Hub
VBox/Devices/EFI/Firmware/MdePkg/Library/DxeRuntimeExtendedSalLib/ExtendedSalLib.c:530:  Wrapper for the EsalGetStateBufferFunctionId service of Extended SAL MCA Log Services Class.
VBox/Devices/EFI/Firmware/MdePkg/Library/DxeRuntimeExtendedSalLib/ExtendedSalLib.c:533:  MCA Log Services Class. See EsalGetStateBufferFunctionId of Extended SAL Specification.
VBox/Devices/EFI/Firmware/MdePkg/Library/DxeRuntimeExtendedSalLib/ExtendedSalLib.c:577:  Wrapper for the EsalSaveStateBufferFunctionId service of Extended SAL MCA Log Services Class.
VBox/Devices/EFI/Firmware/MdePkg/Library/DxeRuntimeExtendedSalLib/ExtendedSalLib.c:580:  MCA Log Services Class. See EsalSaveStateBufferFunctionId of Extended SAL Specification.
VBox/Devices/EFI/Firmware/MdePkg/Library/DxeExtendedSalLib/ExtendedSalLib.c:407:  Wrapper for the EsalGetStateBufferFunctionId service of Extended SAL MCA Log Services Class.
VBox/Devices/EFI/Firmware/MdePkg/Library/DxeExtendedSalLib/ExtendedSalLib.c:410:  MCA Log Services Class. See EsalGetStateBufferFunctionId of Extended SAL Specification.
VBox/Devices/EFI/Firmware/MdePkg/Library/DxeExtendedSalLib/ExtendedSalLib.c:454:  Wrapper for the EsalSaveStateBufferFunctionId service of Extended SAL MCA Log Services Class.
VBox/Devices/EFI/Firmware/MdePkg/Library/DxeExtendedSalLib/ExtendedSalLib.c:457:  MCA Log Services Class. See EsalSaveStateBufferFunctionId of Extended SAL Specification.
VBox/Devices/EFI/Firmware/MdePkg/Include/IndustryStandard/UefiTcgPlatform.h:84:/// Event Log Entry Structure Definition
VBox/Devices/EFI/Firmware/MdePkg/Include/IndustryStandard/SmBios.h:1334:/// System Event Log - Event Log Types.
VBox/Devices/EFI/Firmware/MdePkg/Include/IndustryStandard/SmBios.h:1366:/// System Event Log - Variable Data Format Types.
VBox/Devices/EFI/Firmware/MdePkg/Include/IndustryStandard/SmBios.h:1381:/// Event Log Type Descriptors
VBox/Devices/EFI/Firmware/MdePkg/Include/IndustryStandard/SmBios.h:1389:/// System Event Log (Type 15).
VBox/Devices/EFI/Firmware/MdePkg/Include/Library/ExtendedSalLib.h:150:  Wrapper for the EsalGetStateBufferFunctionId service of Extended SAL MCA Log Services Class.
VBox/Devices/EFI/Firmware/MdePkg/Include/Library/ExtendedSalLib.h:153:  MCA Log Services Class. See EsalGetStateBufferFunctionId of Extended SAL Specification.
VBox/Devices/EFI/Firmware/MdePkg/Include/Library/ExtendedSalLib.h:176:  Wrapper for the EsalSaveStateBufferFunctionId service of Extended SAL MCA Log Services Class.
VBox/Devices/EFI/Firmware/MdePkg/Include/Library/ExtendedSalLib.h:179:  MCA Log Services Class. See EsalSaveStateBufferFunctionId of Extended SAL Specification.
VBox/Devices/EFI/Firmware/MdePkg/Include/Protocol/TcgService.h:53:  about the TPM, and Event Log state information.
VBox/Devices/EFI/Firmware/MdePkg/Include/Protocol/TcgService.h:65:  @param  EventLogLastEntry      If the Event Log contains more than one entry,
VBox/Devices/EFI/Firmware/MdePkg/Include/Protocol/TcgService.h:112:  This service abstracts the capability to add an entry to the Event Log.
VBox/Devices/EFI/Firmware/MdePkg/Include/Protocol/TcgService.h:161:  This service abstracts the capability to do a hash operation on a data buffer, extend a specific TPM PCR with the hash result, and add an entry to the Event Log
VBox/Devices/EFI/Firmware/MdePkg/Include/Protocol/TcgService.h:172:                                 just placed in the Event Log. If the Event Log was
VBox/Devices/EFI/Firmware/MdePkg/Include/Protocol/TcgService.h:175:                                 the start of the Event Log.
VBox/Devices/EFI/Firmware/MdePkg/Include/Protocol/ExtendedSalServiceClasses.h:258:/// Extended SAL MCA Log Services Class
VBox/Devices/EFI/Firmware/MdePkg/Include/Protocol/TrEEProtocol.h:177:  The EFI_TREE_PROTOCOL Get Event Log function call allows a caller to
VBox/Devices/EFI/Firmware/MdePkg/Include/Protocol/TrEEProtocol.h:183:  @param[out] EventLogLastEntry  If the Event Log contains more than one entry, this is a pointer to the
VBox/Devices/EFI/Firmware/MdePkg/Include/Protocol/TrEEProtocol.h:185:  @param[out] EventLogTruncated  If the Event Log is missing at least one entry because an event would
VBox/Devices/EFI/Firmware/MdePkg/Include/Protocol/TrEEProtocol.h:187:                                 Otherwise, the value will be FALSE and the Event Log will be complete.
VBox/Devices/EFI/Firmware/VBoxPkg/VBoxAppleSim/Cpu.c:134:    // Log data in format some OSes like
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Common/EfiCompress.c:491:  Initialize String Info Log data structures
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Common/EfiCompress.c:633:  Insert string info for current position into the String Info Log
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Common/TianoCompress.c:507:  Initialize String Info Log data structures
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Common/TianoCompress.c:657:  Insert string info for current position into the String Info Log
VBox/Devices/EFI/Firmware/BaseTools/Source/C/Common/EfiUtilityMsgs.h:21:// Log message print Level
VBox/Devices/EFI/Firmware/BaseTools/Source/C/TianoCompress/TianoCompress.c:330:  Initialize String Info Log data structures
VBox/Devices/EFI/Firmware/BaseTools/Source/C/TianoCompress/TianoCompress.c:480:  Insert string info for current position into the String Info Log
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Common/EdkLogger.py:19:## Log level constants
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Common/EdkLogger.py:69:## Log debug message
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Common/EdkLogger.py:96:## Log verbose message
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Common/EdkLogger.py:103:## Log warning message
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Common/EdkLogger.py:148:## Log INFO message
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Common/EdkLogger.py:151:## Log ERROR message
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Common/EdkLogger.py:204:# Log information which should be always put out
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Object/Parser/InfLibraryClassesObject.py:21:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Object/Parser/InfPackagesObject.py:21:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Object/Parser/InfSoucesObject.py:23:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Object/Parser/InfPcdObject.py:23:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Object/Parser/InfPpiObject.py:25:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Object/Parser/InfGuidObject.py:25:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Object/Parser/InfDepexObject.py:21:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Object/Parser/InfMisc.py:19:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Object/Parser/InfBinaryObject.py:24:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Object/Parser/InfUserExtensionObject.py:21:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/PomAdapter/InfPomAlignment.py:22:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/PomAdapter/DecPomAlignment.py:27:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/PomAdapter/InfPomAlignmentMisc.py:22:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Logger/Log.py:38:# Log level constants
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Logger/Log.py:103:# Log INFO message
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Logger/Log.py:111:# Log information which should be always put out
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Logger/Log.py:116:## Log debug message
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Logger/Log.py:144:## Log verbose message
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Logger/Log.py:151:## Log warning message
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Logger/Log.py:198:## Log ERROR message
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/InstallPkg.py:45:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Core/IpiDb.py:26:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Core/DistributionPackageClass.py:27:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Core/DependencyRules.py:25:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Core/PackageFile.py:35:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/ReplacePkg.py:30:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/InventoryWs.py:28:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/MkPkg.py:43:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/UPT.py:32:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Xml/XmlParser.py:52:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Xml/XmlParserMisc.py:21:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Xml/IniToXml.py:24:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Library/Parsing.py:42:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Library/Misc.py:37:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Library/Xml/XmlRoutines.py:27:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Library/GlobalData.py:35:# Log file for invalid meta-data files during force removing
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Library/String.py:24:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Library/UniClassObject.py:24:from Logger import Log as EdkLogger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Library/CommentParsing.py:48:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/GenMetaFile/GenInfFile.py:40:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Parser/DecParser.py:18:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Parser/InfAsBuiltProcess.py:22:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Parser/InfDepexSectionParser.py:21:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Parser/InfGuidPpiProtocolSectionParser.py:21:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Parser/InfBinarySectionParser.py:21:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Parser/InfSourceSectionParser.py:21:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Parser/InfSectionParser.py:30:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Parser/InfPackageSectionParser.py:21:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Parser/InfLibrarySectionParser.py:21:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Parser/InfPcdSectionParser.py:21:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Parser/InfParser.py:36:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Parser/InfBuildOptionSectionParser.py:23:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/Parser/DecParserMisc.py:21:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/RmPkg.py:33:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/UnitTest/DecParserUnitTest.py:16:from Logger.Log import FatalError
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/UnitTest/InfBinarySectionTest.py:19:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/UnitTest/CommentGeneratingUnitTest.py:17:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/UPT/UnitTest/CommentParsingUnitTest.py:16:import Logger.Log as Logger
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Eot/EotGlobalData.py:44:# Log file for unmatched variables
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Eot/EotGlobalData.py:48:# Log file for all INF files
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Eot/EotGlobalData.py:52:# Log file for not dispatched PEIM/DRIVER
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Eot/EotGlobalData.py:56:# Log file for unmatched variables in function calling
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Eot/EotGlobalData.py:60:# Log file for order of dispatched PEIM/DRIVER
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Eot/EotGlobalData.py:64:# Log file for source files not found
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Eot/EotGlobalData.py:68:# Log file for found source files
VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Makefile:177:    $(BASE_TOOLS_PATH)\Source\Python\UPT\Logger\Log.py \
VBox/Devices/EFI/Firmware/MdeModulePkg/Core/Dxe/Gcd/Gcd.c:303:  @param  Alignment              Log base 2 of the boundary to align Value to
VBox/Devices/EFI/Firmware/MdeModulePkg/Universal/Network/Dhcp4Dxe/Dhcp4Option.h:33:#define DHCP_TAG_LOG_SERVER       7    // Log Server
VBox/Devices/EFI/Firmware/MdeModulePkg/Library/DxeCorePerformanceLib/DxeCorePerformanceLib.c:456:  // Dump PEI Log Entries to DXE Guage Data structure.
VBox/Devices/EFI/Firmware/MdeModulePkg/Bus/Pci/NvmExpressDxe/NvmExpressHci.h:354:  UINT8  Lpa;                 /* Log Page Attributes */
VBox/Devices/EFI/Firmware/MdeModulePkg/Bus/Pci/NvmExpressDxe/NvmExpressHci.h:355:  UINT8  Elpe;                /* Error Log Page Entries */
VBox/Devices/EFI/Firmware/MdeModulePkg/Bus/Pci/NvmExpressDxe/NvmExpressHci.h:552:// NvmExpress Admin Get Log Page Command
VBox/Devices/EFI/Firmware/MdeModulePkg/Bus/Pci/NvmExpressDxe/NvmExpressHci.h:558:  UINT32 Lid:8;               /* Log Page Identifier */
VBox/Devices/EFI/Firmware/MdeModulePkg/Bus/Pci/NvmExpressDxe/NvmExpressPassthru.c:151:          DEBUG ((EFI_D_VERBOSE, "Invalid Log Page\n"));
VBox/Devices/EFI/Firmware/MdeModulePkg/Include/Guid/FirmwarePerformance.h:117:// Log BOOT RECORD from SMM driver on boot time.
VBox/Devices/EFI/Firmware/OvmfPkg/Csm/CsmSupportLib/LegacyPlatform.c:482:      // Log all onboard controllers.
VBox/Devices/EFI/Firmware/OvmfPkg/SmbiosPlatformDxe/SmbiosPlatformDxe.c:107:    // Log the SMBIOS data for this structure
VBox/Devices/EFI/Firmware/StdLib/EfiSocketLib/Socket.c:4998:    //  Log the received data
VBox/Devices/EFI/Firmware/StdLib/EfiSocketLib/Tcp6.c:994:            //  Log the connection
VBox/Devices/EFI/Firmware/StdLib/EfiSocketLib/Tcp4.c:961:            //  Log the connection
VBox/Devices/EFI/Firmware/ShellPkg/Application/Shell/FileHandleWrappers.h:25:  SHELL_LINE_LIST   *Log;
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/QueryTable.c:1640:    L" Log Area Reset/Cleared"
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/QueryTable.c:3061:    L" System Event Log "
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/QueryTable.c:3826:  Display System Event Log (Type 15) types.
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/QueryTable.c:3843:  Display System Event Log (Type 15) format type.
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/QueryTable.c:3860:  Display System Event Log (Type 15) dw1.
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/QueryTable.c:3877:  Display System Event Log (Type 15) dw2.
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/QueryTable.c:3894:  Display System Event Log (Type 15) type.
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.h:38:  UINT8 CMOSAddress;    // Pre-boot Event Log Reset - CMOS Address
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.h:39:  UINT8 CMOSBitIndex;   // Pre-boot Event Log Reset - CMOS Bit Index
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.h:49:// System Event Log (Type 15)
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:187:  // Print Log Header Type1 Format info
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:343:  LOG_RECORD_FORMAT *Log;
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:346:  // Event Log Variable Data Format Types
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:356:  // Print Log info
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:359:  Log     = (LOG_RECORD_FORMAT *) LogData;
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:360:  while (Log != NULL && Log->Type != END_OF_LOG && Offset < LogAreaLength) {
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:362:    // Get a Event Log Record
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:364:    Log = (LOG_RECORD_FORMAT *) (LogData + Offset);
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:366:    if (Log != NULL) {
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:368:      // Display Event Log Record Information
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:370:      DisplaySELVarDataFormatType (Log->Type, SHOW_DETAIL);
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:371:      DisplaySELLogHeaderLen (Log->Length, SHOW_DETAIL);
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:373:      Offset += Log->Length;
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:375:      // Display Log Header Date/Time Fields
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:381:      if (Log != NULL && Log->Year >= 80 && Log->Year <= 99) {
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:383:      } else if (Log != NULL && Log->Year <= 79) {
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:393:        Log->Year,
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:394:        Log->Month,
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:395:        Log->Day,
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:396:        Log->Hour,
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:397:        Log->Minute,
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:398:        Log->Second
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:404:      if (Log->Length <= (sizeof (LOG_RECORD_FORMAT) - 1)) {
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:408:      ElVdfType = Log->LogVariableData[0];
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/EventLogInfo.c:409:      DisplayElVdfInfo (ElVdfType, Log->LogVariableData);
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/PrintInfo.c:529:  // System Event Log (Type 15)
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/PrintInfo.c:553:        // Display all Event Log type descriptors supported by system
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/PrintInfo.c:580:          // Display Event Log Header
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/PrintInfo.c:591:          // Display all Event Log data
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/QueryTable.h:435:  Display System Event Log (Type 15) types.
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/QueryTable.h:447:  Display System Event Log (Type 15) format type.
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/QueryTable.h:459:  Display System Event Log (Type 15) dw1.
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/QueryTable.h:471:  Display System Event Log (Type 15) dw2.
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/SmbiosView/QueryTable.h:483:  Display System Event Log (Type 15) type.
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/Compress.c:241:  Initialize String Info Log data structures.
VBox/Devices/EFI/Firmware/ShellPkg/Library/UefiShellDebug1CommandsLib/Compress.c:354:  Insert string info for current position into the String Info Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Library/DxeTpm2MeasureBootLib/DxeTpm2MeasureBootLib.c:359:  // Log the PE data
VBox/Devices/EFI/Firmware/SecurityPkg/Library/DxeTpmMeasureBootLib/DxeTpmMeasureBootLib.c:656:  // Log the PE data
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgPei/TcgPei.c:204:  added into the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:104:  0,                          // Log Area Max Length
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:105:  (EFI_PHYSICAL_ADDRESS) (SIZE_4GB - 1)  // Log Area Start Address
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:126:  0,                          // Log Area Max Length
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:127:  (EFI_PHYSICAL_ADDRESS) (SIZE_4GB - 1), // Log Area Start Address
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:386:  @param[in]  EventLogLastEntry  If the Event Log contains more than one entry, this is a pointer to the
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:424:  The EFI_TREE_PROTOCOL Get Event Log function call allows a caller to
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:430:  @param[out] EventLogLastEntry  If the Event Log contains more than one entry, this is a pointer to the
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:432:  @param[out] EventLogTruncated  If the Event Log is missing at least one entry because an event would
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:434:                                 Otherwise, the value will be FALSE and the Event Log will be complete.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:502:  // Dump Event Log for debug purpose
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:511:  Add a new entry to the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:513:  @param[in, out] EventLogPtr     Pointer to the Event Log data.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:514:  @param[in, out] LogSize         Size of the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:515:  @param[in]      MaxSize         Maximum size of the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:568:  Add a new entry to the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:665:  Add a new entry to the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:721:  and add an entry to the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:926:  Initialize the Event Log and log events passed from the PEI phase.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEDxe/TrEEDxe.c:946:  // 1. Create Log Area
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TpmComm.c:126:  Add a new entry to the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TpmComm.c:128:  @param[in, out] EventLogPtr   Pointer to the Event Log data.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TpmComm.c:129:  @param[in, out] LogSize       Size of the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TpmComm.c:130:  @param[in]      MaxSize       Maximum size of the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TcgDxe.c:86:  0,                          // Log Area Max Length
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TcgDxe.c:87:  (EFI_PHYSICAL_ADDRESS) (SIZE_4GB - 1)  // Log Area Start Address
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TcgDxe.c:108:  0,                          // Log Area Max Length
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TcgDxe.c:109:  (EFI_PHYSICAL_ADDRESS) (SIZE_4GB - 1), // Log Area Start Address
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TcgDxe.c:217:  about the TPM, and Event Log state information.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TcgDxe.c:229:  @param[out] EventLogLastEntry  If the Event Log contains more than one entry,
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TcgDxe.c:342:  Add a new entry to the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TcgDxe.c:382:  This service abstracts the capability to add an entry to the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TcgDxe.c:473:  and add an entry to the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TcgDxe.c:541:  extend a specific TPM PCR with the hash result, and add an entry to the Event Log
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TcgDxe.c:552:                                     just placed in the Event Log. If the Event Log was
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TcgDxe.c:555:                                     the start of the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TcgDxe.c:635:  Initialize the Event Log and log events passed from the PEI phase.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TpmComm.h:19:  Add a new entry to the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TpmComm.h:21:  @param[in, out] EventLogPtr   Pointer to the Event Log data.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TpmComm.h:22:  @param[in, out] LogSize       Size of the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TcgDxe/TpmComm.h:23:  @param[in]      MaxSize       Maximum size of the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEPei/TrEEPei.c:226:  Add a new entry to the Event Log.
VBox/Devices/EFI/Firmware/SecurityPkg/Tcg/TrEEPei/TrEEPei.c:277:  added into the Event Log.
VBox/Devices/EFI/DevEFI.cpp:559:    Log(("EFI_VARIABLE_OP_QUERY: %RTuuid::'%s'\n", &pThis->NVRAM.VarOpBuf.uuid, pThis->NVRAM.VarOpBuf.szName));
VBox/Devices/EFI/DevEFI.cpp:580:    Log(("EFI_VARIABLE_OP_QUERY_NEXT: pCurVar=%p\n", pThis->NVRAM.pCurVar));
VBox/Devices/EFI/DevEFI.cpp:598:    Log(("EFI_VARIABLE_OP_ADD: %RTuuid::'%s' fAttributes=%#x abValue=%.*Rhxs\n",
VBox/Devices/EFI/DevEFI.cpp:700:        Log(("nvramWriteVariableOpAdd: Too many variabled.\n"));
VBox/Devices/EFI/DevEFI.cpp:704:     * Log the value of bugcheck variables.
VBox/Devices/EFI/DevEFI.cpp:1338:                Log(("EFI: Image name overflow\n"));
VBox/Devices/EFI/DevEFI.cpp:1342:    Log(("EFI: Unknown image event: %#x (cb=%d)\n", u32, cb));
VBox/Devices/EFI/DevEFI.cpp:1548:                        Log(("EFI: Unknown panic command: %#x (cb=%d)\n", u32, cb));
VBox/Devices/EFI/DevEFI.cpp:1559:                Log(("EFI: Invalid variable op %#x\n", u32));
VBox/Devices/EFI/DevEFI.cpp:1592:            Log(("EFI: Write to reserved port %RTiop: %#x (cb=%d)\n", Port, u32, cb));
VBox/Devices/EFI/DevFlash.cpp:493:    Log(("Read %zu bytes from file (asked for %u)\n.", cbRead, pThis->cbFlashSize));
VBox/Devices/EFI/DevSmc.cpp:650:    Log(("scmKeyPutDollarNumber: %#x -> %#x\n", pThis->bDollaryNumber, pCurKey->Value.ab[0]));
VBox/Devices/EFI/DevSmc.cpp:670:    Log(("scmKeyPutShutdownReason: %#x -> %#x\n", pThis->bShutdownReason, pCurKey->Value.ab[0]));
VBox/Devices/EFI/DevSmc.cpp:689:    Log(("scmKeyPutNinjaTimerAction: %#x -> %#x\n", pThis->bNinjaActionTimerJob, pCurKey->Value.ab[0]));
VBox/Devices/EFI/DevSmc.cpp:763:                Log(("smcKeyGetByName: key=%4.4s getter failed! bRc=%#x\n", &uKeyValueLog, bRc));
VBox/Devices/EFI/DevSmc.cpp:767:                Log(("smcKeyGetByName: key=%4.4s is not readable!\n", &uKeyValueLog));
VBox/Devices/EFI/DevSmc.cpp:773:            Log(("smcKeyGetByName: Wrong value size; user=%#x smc=%#x key=%4.4s !\n",
VBox/Devices/EFI/DevSmc.cpp:780:        Log(("smcKeyGetByName: Key not found! key=%4.4s size=%#x\n", &uKeyValueLog, pThis->CurKey.cbValue));
VBox/Devices/EFI/DevSmc.cpp:806:        Log(("smcKeyGetByIndex: %#x -> %c%c%c%c\n", iKey,
VBox/Devices/EFI/DevSmc.cpp:812:        Log(("smcKeyGetByIndex: Key out or range: %#x, max %#x\n", iKey, RT_ELEMENTS(g_aSmcKeys) - SMC_KEYIDX_FIRST_ENUM));
VBox/Devices/EFI/DevSmc.cpp:849:        Log(("smcKeyGetAttrByName: key=%4.4s getter failed! bRc=%#x\n", &uKeyValueLog, bRc));
VBox/Devices/EFI/DevSmc.cpp:853:        Log(("smcKeyGetAttrByName: Key not found! key=%4.4s size=%#x\n", &uKeyValueLog, pThis->CurKey.cbValue));
VBox/Devices/EFI/DevSmc.cpp:898:                Log(("smcRegData_r: Reading too much or at wrong time during SMC_CMD_GET_KEY_INFO!  bState=%#x offValue=%#x\n",
VBox/Devices/EFI/DevSmc.cpp:921:                Log(("smcRegData_r: Reading too much or at wrong time during SMC_CMD_GET_KEY_INFO!  bState=%#x offValue=%#x\n",
VBox/Devices/EFI/DevSmc.cpp:939:                Log(("smcRegData_r: Reading too much or at wrong time during GET_KEY_BY_INDEX!  bState=%#x offValue=%#x\n",
VBox/Devices/EFI/DevSmc.cpp:947:            Log(("smcRegData_r: Attempting to read data during PUT_KEY!\n"));
VBox/Devices/EFI/DevSmc.cpp:954:            Log(("smcRegData_r: Unknown command attempts reading data\n"));
VBox/Devices/EFI/DevSmc.cpp:1012:                    Log(("smcRegData_w: Guest attempts to get/put too many value bytes: %#x (max %#x)!\n",
VBox/Devices/EFI/DevSmc.cpp:1032:                Log(("smcRegData_w: Writing too much data on %s command!\n", pThis->bCmd == SMC_CMD_PUT_KEY ? "put" : "get"));
VBox/Devices/EFI/DevSmc.cpp:1063:                Log(("smcRegData_w: Writing data beyond 5th byte on get %s command!\n",
VBox/Devices/EFI/DevSmc.cpp:1071:            Log(("smcRegData_w: Unknown command %#x!\n", bValue));
VBox/Devices/EFI/DevSmc.cpp:1105:            Log(("SMC: Unknown command %#x!\n", bValue));
VBox/Devices/EFI/DevSmc.cpp:1130:    Log(("smcRegGen_w: %#04x: %#x -> %#x (write)\n", uReg, pThis->u.abRegsRW[uReg], bValue));
VBox/Devices/EFI/DevSmc.cpp:1145:    Log(("smcRegGen_r: %#04x: %#x (read)\n", uReg, pThis->u.abRegsRW[uReg]));
VBox/Devices/EFI/DevSmc.cpp:1161:    Log(("SMC: %#04x: Writing %#x to unknown register!\n", uReg, bValue));
VBox/Devices/EFI/DevSmc.cpp:1176:    Log(("SMC: %#04x: Reading from unknown register!\n", uReg));
VBox/Devices/Serial/DrvHostSerial.cpp:701:                    Log(("rc=%d revents=%#x,%#x errno=%p %s\n", rc, aFDs[0].revents, aFDs[1].revents, err, strerror(err)));
VBox/Devices/Serial/DrvHostSerial.cpp:790:                Log(("HostSerial#%d: Detected break\n"));
VBox/Devices/Serial/DrvHostSerial.cpp:825:            Log(("Read %d bytes.\n", cbRemaining));
VBox/Devices/Serial/DevSerial.cpp:320:        Log(("serial_update_irq %d 1\n", pThis->irq));
VBox/Devices/Serial/DevSerial.cpp:327:        Log(("serial_update_irq %d 0\n", pThis->irq));
VBox/Devices/Serial/DevSerial.cpp:387:    Log(("speed=%d parity=%c data=%d stop=%d\n", speed, parity, data_bits, stop_bits));
VBox/Devices/Serial/DevSerial.cpp:541:                    Log(("serial_ioport_write: Set break %d\n", break_enable));
VBox/Devices/Serial/DevSerial.cpp:596:                Log(("serial_io_port_read: read 0x%X\n", pThis->rbr));
VBox/Devices/Serial/DevSerial.cpp:757:    Log(("%s: pInterface=%p newStatusLines=%u\n", __FUNCTION__, pInterface, newStatusLines));
VBox/Devices/Serial/DevSerial.cpp:808:    Log(("%s: pInterface=%p\n", __FUNCTION__, pInterface));
VBox/Devices/Serial/DevSerial.cpp:1266:    Log(("DevSerial: instance %d iobase=%04x irq=%d\n", iInstance, io_base, irq_lvl));
VBox/Devices/Serial/DrvNamedPipe.cpp:215:                    Log(("drvNamedPipePoll: ReadFile returned %d (%Rrc)\n", uError, rc));
VBox/Devices/Serial/DrvNamedPipe.cpp:229:                Log(("drvNamedPipePoll: FileRead returned %Rrc fShutdown=%d\n", rc, pThis->fShutdown));
VBox/Devices/Serial/DrvNamedPipe.cpp:290:                    Log(("drvNamedPipePoll: Write completed with %d (%Rrc)\n", uErr, rc));
VBox/Devices/Serial/DrvNamedPipe.cpp:330:                    Log(("drvNamedPipePoll: Read completed with %d (%Rrc)\n", uErr, rc));
VBox/Devices/Serial/DrvNamedPipe.cpp:545:                    Log(("drvNamedPipeWrite: WriteFile returned %d (%Rrc)\n", uError, rc));
VBox/Devices/Network/DrvNAT.cpp:503:        Log(("drvNATNetowrkUp_AllocBuf: returns VERR_NET_NO_NETWORK\n"));
VBox/Devices/Network/DrvNAT.cpp:520:            Log(("drvNATNetowrkUp_AllocBuf: drops over-sized frame (%u bytes), returns VERR_INVALID_PARAMETER\n",
VBox/Devices/Network/DrvNAT.cpp:542:            Log(("drvNATNetowrkUp_AllocBuf: drops over-sized frame (%u bytes), returns VERR_INVALID_PARAMETER\n",
VBox/Devices/Network/slirp/libalias/alias_db.c:427:/* Log file control */
VBox/Devices/Network/slirp/hostres.c:644:        /* Log: what kind of address did we get?! */
VBox/Devices/Network/slirp/hostres.c:651:        /* Log: shouldn't happen */
VBox/Devices/Network/slirp/ip_output.c:181:                Log(("NAT: packet was droppped\n"));
VBox/Devices/Network/slirp/ip_output.c:225:        Log(("NAT:ip:frag: mhlen = %d\n", mhlen));
VBox/Devices/Network/slirp/ip_output.c:259:            Log(("NAT:ip:frag: alloc = %d\n", len));
VBox/Devices/Network/slirp/ip_output.c:261:            Log(("NAT:ip:frag: m_copydata(m0 = %p,off = %d, len = %d,)\n", m0, off, len));
VBox/Devices/Network/slirp/ip_output.c:266:            Log(("NAT:ip:frag: m_copyback(m = %p,, len = %d,)\n", m, len));
VBox/Devices/Network/slirp/ip_output.c:287:        Log(("NAT:ip:frag: m_adj(m(m_len:%d) = %p, len = %d)\n", m->m_len, m, mhlen + firstlen - (u_int16_t)ip->ip_len));
VBox/Devices/Network/slirp/ip_output.c:309:                Log(("NAT: packet was droppped\n"));
VBox/Devices/Network/slirp/ip_output.c:327:                Log(("NAT:ip:frag: if_encap(,,m(m_len = %d) = %p,0)\n", m->m_len, m));
VBox/Devices/Network/slirp/bootp.c:294:    Log(("NAT: DHCP: bp_file:%s\n", &rbp->bp_file));
VBox/Devices/Network/slirp/bootp.c:297:    Log(("NAT: DHCP: bp_yiaddr:%RTnaipv4\n", rbp->bp_yiaddr.s_addr));
VBox/Devices/Network/slirp/bootp.c:299:    Log(("NAT: DHCP: bp_siaddr:%RTnaipv4\n", rbp->bp_siaddr.s_addr));
VBox/Devices/Network/slirp/bootp.c:305:    Log(("NAT: DHCP: s_addr:%RTnaipv4\n", saddr.s_addr));
VBox/Devices/Network/slirp/bootp.c:610:                Log(("no address left\n"));
VBox/Devices/Network/slirp/bootp.c:796:                Log(("NAT: RFC2132_REQ_ADDR not found\n"));
VBox/Devices/Network/slirp/cksum.c:156:        Log(("cksum: out of data: len = %d\n", len));
VBox/Devices/Network/slirp/socket.c:380:                Log(("NAT:%s: error in WSAIoctl: %d\n", RT_GCC_EXTENSION __PRETTY_FUNCTION__, errno));
VBox/Devices/Network/slirp/socket.c:559:            Log(("Didn't send all data urgently XXXXX\n"));
VBox/Devices/Network/slirp/socket.c:1262:       Log(("send_icmp_to_guest: ICMP header is too small to understand which type/subtype of the datagram\n"));
VBox/Devices/Network/slirp/socket.c:1267:    Log(("ICMP:received msg(t:%d, c:%d)\n", icp->icmp_type, icp->icmp_code));
VBox/Devices/Network/slirp/socket.c:1282:        Log(("send_icmp_to_guest: NAT accept ICMP_{ECHOREPLY, TIMXCEED, UNREACH} the minimum size is 64 (see rfc792)\n"));
VBox/Devices/Network/slirp/socket.c:1296:            Log(("send_icmp_to_guest: NAT accept ICMP_{TIMXCEED, UNREACH} the minimum size of ipheader + 64 bit of data (see rfc792)\n"));
VBox/Devices/Network/slirp/socket.c:1305:        Log(("NAT: Can't find the corresponding packet for the received ICMP\n"));
VBox/Devices/Network/slirp/socket.c:1323:            Log(("NAT: we haven't found echo for this reply\n"));
VBox/Devices/Network/slirp/socket.c:1335:            Log(("NAT: ECHO(%d) lenght doesn't match ECHOREPLY(%d)\n",
VBox/Devices/Network/slirp/socket.c:1406:        Log(("sorecvfrom_icmp_unix: 1 - step can't read IP datagramm (would block)\n"));
VBox/Devices/Network/slirp/socket.c:1425:        Log(("sorecvfrom_icmp_unix: 1 - step can't read IP datagramm\n"));
VBox/Devices/Network/slirp/socket.c:1435:        Log(("sorecvfrom_icmp_unix: 1 - step IP isn't IPv4\n"));
VBox/Devices/Network/slirp/socket.c:1451:        Log(("sorecvfrom_icmp_unix: 1 - step can't allocate enought room for datagram\n"));
VBox/Devices/Network/slirp/socket.c:1463:        Log(("sorecvfrom_icmp_unix: 2 - step can't read IP body (would block expected:%d)\n",
VBox/Devices/Network/slirp/socket.c:1471:        Log(("sorecvfrom_icmp_unix: 2 - step read of the rest of datagramm is fallen (errno:%d, len:%d expected: %d)\n",
VBox/Devices/Network/slirp/slirp_dns.c:51:        Log(("NAT: error %lu occurred on capacity detection operation\n", ret));
VBox/Devices/Network/slirp/slirp_dns.c:56:        Log(("NAT: Win socket API returns non capacity\n"));
VBox/Devices/Network/slirp/slirp_dns.c:63:        Log(("NAT: No memory available\n"));
VBox/Devices/Network/slirp/slirp_dns.c:69:        Log(("NAT: error %lu occurred on fetching adapters info\n", ret));
VBox/Devices/Network/slirp/slirp_dns.c:95:                Log(("NAT: Can't allocate buffer for DNS entry\n"));
VBox/Devices/Network/slirp/slirp_dns.c:100:            Log(("NAT: adding %RTnaipv4 to DNS server list\n", InAddr));
VBox/Devices/Network/slirp/slirp_dns.c:135:                    Log(("NAT: not enough memory\n"));
VBox/Devices/Network/slirp/slirp_dns.c:141:                Log(("NAT: adding domain name %s to search list\n", pDomain->dd_pszDomain));
VBox/Devices/Network/slirp/slirp.c:359:        Log(("NAT: DHCP server initialization failed\n"));
VBox/Devices/Network/slirp/slirp.c:410:            Log(("NAT: LibAlias default rule wasn't initialized\n"));
VBox/Devices/Network/slirp/slirp.c:582:    Log(("\n"
VBox/Devices/Network/slirp/slirp.c:592:    Log(("\n"
VBox/Devices/Network/slirp/slirp.c:1382:        Log(("NAT: packet having size %d has been ignored\n", m->m_len));
VBox/Devices/Network/slirp/slirp.c:1415:            Log(("NAT: Unsupported protocol %x\n", proto));
VBox/Devices/Network/slirp/slirp.c:1470:        Log(("NAT: if_encap's recived the chain, dropping...\n"));
VBox/Devices/Network/slirp/slirp.c:1865:        Log(("NAT: Can't alloc mbuf for ARP request\n"));
VBox/Devices/Network/slirp/slirp.c:1925:        Log(("NAT: Can't allocate arp cache entry\n"));
VBox/Devices/Network/slirp/debug.c:95:    Log(("nat: PACKET DUMPED:\n%.*Rhxd\n", n, dat));
VBox/Devices/Network/slirp/ip_icmp.c:317:                    Log(("Have found %R[natsock]\n", icm->im_so));
VBox/Devices/Network/slirp/ip_icmp.c:320:                Log(("Have found nothing\n"));
VBox/Devices/Network/slirp/ip_icmp.c:359:                Log(("trying:%R[natsock] against %RTnaipv4:%d lport=%d hlport=%d\n",
VBox/Devices/Network/slirp/ip_icmp.c:372:            Log(("NAT:ICMP: unsupported protocol(%d)\n", ip->ip_p));
VBox/Devices/Network/slirp/ip_icmp.c:397:            Log(("NAT:ICMP: disconnected %R[natsock]\n", so));
VBox/Devices/Network/slirp/ip_icmp.c:404:            Log(("NAT:ICMP: no saved mbuf for %R[natsock]\n", so));
VBox/Devices/Network/slirp/ip_icmp.c:416:        Log(("NAT:ICMP: for %R[natsock]\n", so));
VBox/Devices/Network/slirp/ip_icmp.c:524:                        Log(("NAT: not enought memory to allocate the buffer\n"));
VBox/Devices/Network/slirp/ip_icmp.c:541:                    Log(("NAT/ICMP: try to set TTL(%d)\n", ttl));
VBox/Devices/Network/slirp/ip_icmp.c:545:                        Log(("NAT: Error (%s) occurred while setting TTL attribute of IP packet\n",
VBox/Devices/Network/DevE1000.cpp:191:#  define E1kLog(a)               Log(a)
VBox/Devices/Network/DevE1000.cpp:1031:    char                    szPrf[8];                /**< Log prefix, e.g. E1000#1. */
VBox/Devices/Network/DevE1000.cpp:6979:/* -=-=-=-=- Debug Info + Log Types -=-=-=-=- */
VBox/Devices/Network/DevE1000.cpp:7295:    Log(("%s e1kR3Detach:\n", pThis->szPrf));
VBox/Devices/Network/DevE1000.cpp:7371:        Log(("%s No attached driver!\n", pThis->szPrf));
VBox/Devices/Network/DevPCNet.cpp:709:        Log(("pcnetTmdLoad: own bit flipped while reading!!\n"));
VBox/Devices/Network/DevPCNet.cpp:807:        Log(("pcnetRmdLoad: own bit flipped while reading!!\n"));
VBox/Devices/Network/DevPCNet.cpp:901:    Log(("#%d packet dhost=%02x:%02x:%02x:%02x:%02x:%02x, "          \
VBox/Devices/Network/DevPCNet.cpp:1026:    Log(("#%d packet dhost=%02x:%02x:%02x:%02x:%02x:%02x, "
VBox/Devices/Network/DevPCNet.cpp:1042:    Log(("#%d padr_bcast result=%d\n", PCNET_INST_NR, result));
VBox/Devices/Network/DevPCNet.cpp:1119:    Log(("#%d pcnetHandleRingWritePf: write to %#010x\n", PCNET_INST_NR, GCPhysFault));
VBox/Devices/Network/DevPCNet.cpp:1168:    Log(("#%d pcnetHandleRingWrite: write to %#010x\n", PCNET_INST_NR, GCPhys));
VBox/Devices/Network/DevPCNet.cpp:1203:    Log(("#%d pcnetSoftReset:\n", PCNET_INST_NR));
VBox/Devices/Network/DevPCNet.cpp:1285:        Log(("#%d user int\n", PCNET_INST_NR));
VBox/Devices/Network/DevPCNet.cpp:1299:        Log(("#%d user int\n", PCNET_INST_NR));
VBox/Devices/Network/DevPCNet.cpp:1324:        Log(("#%d INTA=%d\n", PCNET_INST_NR, iISR));
VBox/Devices/Network/DevPCNet.cpp:1338:    Log(("pcnetUpdateRingHandlers TD %RX32 size %#x -> %RX32 ?size? %#x\n", pThis->TDRAPhysOld, pThis->cbTDRAOld, pThis->GCTDRA, pcnetTdraAddr(pThis, 0)));
VBox/Devices/Network/DevPCNet.cpp:1339:    Log(("pcnetUpdateRingHandlers RX %RX32 size %#x -> %RX32 ?size? %#x\n", pThis->RDRAPhysOld, pThis->cbRDRAOld, pThis->GCRDRA, pcnetRdraAddr(pThis, 0)));
VBox/Devices/Network/DevPCNet.cpp:1419:    Log(("#%d pcnetInit: init_addr=%#010x\n", PCNET_INST_NR, PHYSADDR(pThis, CSR_IADR(pThis))));
VBox/Devices/Network/DevPCNet.cpp:1446:        Log(("#%d initblk.rlen=%#04x, initblk.tlen=%#04x\n",
VBox/Devices/Network/DevPCNet.cpp:1454:        Log(("#%d initblk.rlen=%#04x, initblk.tlen=%#04x\n",
VBox/Devices/Network/DevPCNet.cpp:1521:    Log(("#%d pcnetStart:\n", PCNET_INST_NR));
VBox/Devices/Network/DevPCNet.cpp:1538:    Log(("#%d pcnetStop:\n", PCNET_INST_NR));
VBox/Devices/Network/DevPCNet.cpp:1800:    Log(("#%d pcnetReceiveNoSync: size=%d\n", PCNET_INST_NR, cbToRecv));
VBox/Devices/Network/DevPCNet.cpp:1987:                Log(("#%d: Overflow by %ubytes\n", PCNET_INST_NR, cbToRecv));
VBox/Devices/Network/DevPCNet.cpp:1998:            Log(("#%d RCVRC=%d CRDA=%#010x\n", PCNET_INST_NR,
VBox/Devices/Network/DevPCNet.cpp:2289:    Log(("#%d pcnetTransmit: Signaling send error. swstyle=%#x\n",
VBox/Devices/Network/DevPCNet.cpp:2302:    Log(("#%d pcnetTransmit: Signaling send error. swstyle=%#x\n",
VBox/Devices/Network/DevPCNet.cpp:2405:            Log(("#%d pcnetAsyncTransmit: stp&enp: cb=%d xmtrc=%#x\n", PCNET_INST_NR, cb, CSR_XMTRC(pThis)));
VBox/Devices/Network/DevPCNet.cpp:2548:                    Log(("#%d pcnetAsyncTransmit: stp: cb=%d xmtrc=%#x-%#x\n", PCNET_INST_NR,
VBox/Devices/Network/DevPCNet.cpp:2579:            Log(("#%d pcnetAsyncTransmit: guest is giving us shit!\n", PCNET_INST_NR));
VBox/Devices/Network/DevPCNet.cpp:2770:    Log(("#%d pcnetCSRWriteU16: rap=%d val=%#06x\n", PCNET_INST_NR, u32RAP, val));
VBox/Devices/Network/DevPCNet.cpp:2787:                Log(("#%d CSR0: old=%#06x new=%#06x\n", PCNET_INST_NR, pThis->aCSR[0], csr0));
VBox/Devices/Network/DevPCNet.cpp:2792:                    Log(("#%d pcnetCSRWriteU16: pcnetInit requested => HC\n", PCNET_INST_NR));
VBox/Devices/Network/DevPCNet.cpp:2878:                Log(("#%d: promiscuous mode changed to %d\n", PCNET_INST_NR, !!(val & 0x8000)));
VBox/Devices/Network/DevPCNet.cpp:2901:                Log(("#%d: WRITE CSR%d, %#06x !!\n", PCNET_INST_NR, u32RAP, val));
VBox/Devices/Network/DevPCNet.cpp:2908:            Log(("#%d: WRITE CSR%d, %#06x => GCRDRA=%08x (alt init)\n", PCNET_INST_NR, u32RAP, val, pThis->GCRDRA));
VBox/Devices/Network/DevPCNet.cpp:2919:                Log(("#%d: WRITE CSR%d, %#06x !!\n", PCNET_INST_NR, u32RAP, val));
VBox/Devices/Network/DevPCNet.cpp:2926:            Log(("#%d: WRITE CSR%d, %#06x => GCTDRA=%08x (alt init)\n", PCNET_INST_NR, u32RAP, val, pThis->GCTDRA));
VBox/Devices/Network/DevPCNet.cpp:2943:                Log(("#%d: WRITE CSR%d, %#06x !!\n", PCNET_INST_NR, u32RAP, val));
VBox/Devices/Network/DevPCNet.cpp:2946:            Log(("#%d: WRITE CSR%d, %#06x (hacked %#06x) (alt init)\n", PCNET_INST_NR,
VBox/Devices/Network/DevPCNet.cpp:3006:    Log(("#%d pcnetCSRReadU16: rap=%d val=%#06x\n", PCNET_INST_NR, u32RAP, val));
VBox/Devices/Network/DevPCNet.cpp:3027:                    Log(("#%d Bad SWSTYLE=%#04x\n", PCNET_INST_NR, val & 0xff));
VBox/Devices/Network/DevPCNet.cpp:3046:            Log(("#%d BCR_SWS=%#06x\n", PCNET_INST_NR, val));
VBox/Devices/Network/DevPCNet.cpp:3073:            Log(("#%d pcnet: mii write %d <- %#x\n", PCNET_INST_NR, pThis->aBCR[BCR_MIIADDR] & 0x1f, val));
VBox/Devices/Network/DevPCNet.cpp:3192:    Log(("#%d pcnet: mii read %d -> %#x\n", PCNET_INST_NR, miiaddr, val));
VBox/Devices/Network/DevPCNet.cpp:3290:    Log(("#%d pcnetAPROMWriteU8: addr=%#010x val=%#04x\n", PCNET_INST_NR, addr, val));
VBox/Devices/Network/DevPCNet.cpp:3299:    Log(("#%d pcnetAPROMReadU8: addr=%#010x val=%#04x\n", PCNET_INST_NR, addr, val));
VBox/Devices/Network/DevPCNet.cpp:3327:        Log(("#%d pcnetIOPortAPromRead: Port=%RTiop cb=%d BCR_DWIO !!\n", PCNET_INST_NR, Port, cb));
VBox/Devices/Network/DevPCNet.cpp:3379:        Log(("#%d pcnetIoportWriteU8: addr=%#010x val=%#06x BCR_DWIO !!\n", PCNET_INST_NR, addr, val));
VBox/Devices/Network/DevPCNet.cpp:3401:        Log(("#%d pcnetIoportReadU8: addr=%#010x val=%#06x BCR_DWIO !!\n", PCNET_INST_NR, addr, val & 0xff));
VBox/Devices/Network/DevPCNet.cpp:3436:        Log(("#%d pcnetIoportWriteU16: addr=%#010x val=%#06x BCR_DWIO !!\n", PCNET_INST_NR, addr, val));
VBox/Devices/Network/DevPCNet.cpp:3474:        Log(("#%d pcnetIoportReadU16: addr=%#010x val=%#06x BCR_DWIO !!\n", PCNET_INST_NR, addr, val & 0xffff));
VBox/Devices/Network/DevPCNet.cpp:3519:        Log(("#%d pcnetIoportWriteU32: addr=%#010x val=%#010x !BCR_DWIO !!\n", PCNET_INST_NR, addr, val));
VBox/Devices/Network/DevPCNet.cpp:3557:        Log(("#%d pcnetIoportReadU32: addr=%#010x val=%#010x !BCR_DWIO !!\n", PCNET_INST_NR, addr, val));
VBox/Devices/Network/DevPCNet.cpp:3850:            Log(("#%d pcnetTimerRestore: Clearing ERR and CERR after load. cLinkDownReported=%d\n",
VBox/Devices/Network/DevPCNet.cpp:3857:        Log(("#%d pcnetTimerRestore: cLinkDownReported=%d, wait another 1500ms...\n",
VBox/Devices/Network/DevPCNet.cpp:4547:            Log(("PCNet#%d: Received giant frame %zu, max %u. (Further giants will be reported at level5.)\n",
VBox/Devices/Network/DevPCNet.cpp:4709:    Log(("#%d pcnetDetach:\n", PCNET_INST_NR));
VBox/Devices/Network/DevPCNet.cpp:4772:        Log(("#%d No attached driver!\n", PCNET_INST_NR));
VBox/Devices/Network/DevPCNet.cpp:4931:    Log(("#%d Link up delay is set to %u seconds\n",
VBox/Devices/Network/DevPCNet.cpp:5124:        Log(("No attached driver!\n"));
VBox/Devices/Network/DrvTAP.cpp:457:                Log(("rc=%d revents=%#x,%#x errno=%p %s\n", rc, aFDs[0].revents, aFDs[1].revents, errno, strerror(errno)));
VBox/Devices/Network/DrvTAP.cpp:994:    Log(("drvTAPContruct: %d (from fd)\n", (intptr_t)pThis->hFileDevice));
VBox/Devices/Network/lwip-new/vbox/include/arch/cc.h:56:#define LWIP_PLATFORM_DIAG(x) Log(x)
VBox/Devices/Network/SrvIntNetR0.cpp:1114: * @param   pszMsg          Log message.
VBox/Devices/Network/SrvIntNetR0.cpp:1126:            Log(("intnetR0IfAddrCacheDeleteIt: hIf=%#x MAC=%.6Rhxs IPv4 deleted #%d  %RTnaipv4 %s\n",
VBox/Devices/Network/SrvIntNetR0.cpp:1130:            Log(("intnetR0IfAddrCacheDeleteIt: hIf=%#x MAC=%.6Rhxs IPv6 deleted #%d %RTnaipv6 %s\n",
VBox/Devices/Network/SrvIntNetR0.cpp:1134:            Log(("intnetR0IfAddrCacheDeleteIt: hIf=%RX32 MAC=%.6Rhxs type=%d #%d %.*Rhxs %s\n",
VBox/Devices/Network/SrvIntNetR0.cpp:1178: * @param   pszMsg          Log message.
VBox/Devices/Network/SrvIntNetR0.cpp:1207: * @param   pszMsg          Log message.
VBox/Devices/Network/SrvIntNetR0.cpp:1231: * @param   pszMsg          Log message.
VBox/Devices/Network/SrvIntNetR0.cpp:1431:                Log(("%s: spoofing attempt for %RTnaipv4\n",
VBox/Devices/Network/SrvIntNetR0.cpp:1435:                Log(("%s: spoofing attempt for %RTnaipv6\n",
VBox/Devices/Network/SrvIntNetR0.cpp:1439:                Log(("%s: spoofing attempt for %.*Rhxs (type %d)\n",
VBox/Devices/Network/SrvIntNetR0.cpp:1457:        Log(("intnetR0IfAddrCacheAddIt: type=%d replacing %.*Rhxs\n",
VBox/Devices/Network/SrvIntNetR0.cpp:1475:            Log(("intnetR0IfAddrCacheAddIt: hIf=%#x MAC=%.6Rhxs IPv4 added #%d %RTnaipv4 %s\n",
VBox/Devices/Network/SrvIntNetR0.cpp:1479:            Log(("intnetR0IfAddrCacheAddIt: hIf=%#x MAC=%.6Rhxs IPv6 added #%d %RTnaipv6 %s\n",
VBox/Devices/Network/SrvIntNetR0.cpp:1483:            Log(("intnetR0IfAddrCacheAddIt: hIf=%#x MAC=%.6Rhxs type=%d added #%d %.*Rhxs %s\n",
VBox/Devices/Network/SrvIntNetR0.cpp:1504: * @param   pszMsg      Log message.
VBox/Devices/Network/SrvIntNetR0.cpp:1544: * @param   pszMsg      Log message.
VBox/Devices/Network/SrvIntNetR0.cpp:2277:     * Log it.
VBox/Devices/Network/SrvIntNetR0.cpp:2410:        Log(("intnetR0TrunkIfSnoopDhcp: bad ip header\n"));
VBox/Devices/Network/SrvIntNetR0.cpp:2656:            Log(("intnetR0IfSnoopIPv4SourceAddr: bad ip header\n"));
VBox/Devices/Network/SrvIntNetR0.cpp:2682:                Log(("intnetR0IfSnoopIPv4SourceAddr: bad ip header (dhcp)\n"));
VBox/Devices/Network/SrvIntNetR0.cpp:2842:    Log(("intnetR0IfSend: overflow cb=%d hIf=%RX32\n", pSG->cbTotal, pIf->hIf));
VBox/Devices/Network/SrvIntNetR0.cpp:3557:                Log(("intnetR0NetworkEditDhcpFromIntNet: cleared ip_tos (was %#04x); ip_sum=%#06x -> %#06x\n",
VBox/Devices/Network/SrvIntNetR0.cpp:3754:                Log(("intnetshareduni: failed to read ip_dst! cbTotal=%#x\n", pSG->cbTotal));
VBox/Devices/Network/SrvIntNetR0.cpp:3765:                Log(("intnetshareduni: failed to read ip6_dst! cbTotal=%#x\n", pSG->cbTotal));
VBox/Devices/Network/SrvIntNetR0.cpp:3777:                Log(("intnetshareduni: failed to read ipx_dstnet! cbTotal=%#x\n", pSG->cbTotal));
VBox/Devices/Network/SrvIntNetR0.cpp:4296:        Log(("IntNetR0IfSetPromiscuousMode: returns VERR_INVALID_HANDLE\n"));
VBox/Devices/Network/SrvIntNetR0.cpp:4316:            Log(("IntNetR0IfSetPromiscuousMode: hIf=%RX32: Changed from %d -> %d (%d)\n",
VBox/Devices/Network/SrvIntNetR0.cpp:4397:        Log(("IntNetR0IfSetMacAddress: returns VERR_INVALID_HANDLE\n"));
VBox/Devices/Network/SrvIntNetR0.cpp:4416:            Log(("IntNetR0IfSetMacAddress: hIf=%RX32: Changed from %.6Rhxs -> %.6Rhxs\n",
VBox/Devices/Network/SrvIntNetR0.cpp:4436:            Log(("IntNetR0IfSetMacAddress: pfnNotifyMacAddress hIf=%RX32\n", hIf));
VBox/Devices/Network/SrvIntNetR0.cpp:4571:        Log(("IntNetR0IfSetActive: returns VERR_INVALID_HANDLE\n"));
VBox/Devices/Network/SrvIntNetR0.cpp:4649:        Log(("IntNetR0IfWait: returns VERR_INVALID_HANDLE\n"));
VBox/Devices/Network/SrvIntNetR0.cpp:4660:        Log(("IntNetR0IfWait: returns VERR_SEM_DESTROYED\n"));
VBox/Devices/Network/SrvIntNetR0.cpp:4747:        Log(("IntNetR0IfAbortWait: returns VERR_INVALID_HANDLE\n"));
VBox/Devices/Network/SrvIntNetR0.cpp:4763:        Log(("IntNetR0IfAbortWait: returns VERR_SEM_DESTROYED\n"));
VBox/Devices/Network/SrvIntNetR0.cpp:4888:    Log(("intnetR0IfDestruct: pvObj=%p pIf=%p pIntNet=%p hIf=%RX32\n", pvObj, pIf, pIntNet, pIf->hIf));
VBox/Devices/Network/SrvIntNetR0.cpp:5199:                        Log(("intnetR0NetworkCreateIf: pfnConnectInterface hIf=%RX32\n", pIf->hIf));
VBox/Devices/Network/SrvIntNetR0.cpp:5210:                        Log(("intnetR0NetworkCreateIf: returns VINF_SUCCESS *phIf=%RX32 cbSend=%u cbRecv=%u cbBuf=%u\n",
VBox/Devices/Network/SrvIntNetR0.cpp:5601:        Log(("%s: %s %RTnaipv4\n",
VBox/Devices/Network/SrvIntNetR0.cpp:5608:        Log(("%s: %s %RTnaipv6\n",
VBox/Devices/Network/SrvIntNetR0.cpp:5615:        Log(("%s: unexpected address type %d\n", __FUNCTION__, enmType));
VBox/Devices/Network/SrvIntNetR0.cpp:5867:                    Log(("intnetR0NetworkCreateTrunkIf: VINF_SUCCESS - pszName=%s szTrunk=%s%s Network=%s\n",
VBox/Devices/Network/SrvIntNetR0.cpp:5909:    Log(("intnetR0NetworkDestruct: pvObj=%p pNetwork=%p pIntNet=%p %s\n", pvObj, pNetwork, pIntNet, pNetwork->szName));
VBox/Devices/Network/DevE1000Phy.cpp:45:# define PhyLog(a)               Log(a)
VBox/Devices/Network/DrvVDE.cpp:428:                Log(("rc=%d revents=%#x,%#x errno=%p %s\n", rc, aFDs[0].revents, aFDs[1].revents, errno, strerror(errno)));
VBox/Devices/Network/DevEEPROM.cpp:24:#define E1kLog(a)               Log(a)
VBox/Devices/Network/testcase/tstIntNet-1.cpp:181:     * Log it.
VBox/Devices/Network/DrvIntNet.cpp:227:    Log(("drvR3IntNetUpdateMacAddress: %.*Rhxs rc=%Rrc\n", sizeof(SetMacAddressReq.Mac), &SetMacAddressReq.Mac, rc));
VBox/Devices/Network/DrvIntNet.cpp:255:    Log(("drvR3IntNetSetActive: fActive=%d rc=%Rrc\n", fActive, rc));
VBox/Devices/Network/DrvIntNet.cpp:791:                                        Log(("drvR3IntNetRecvRun: drvR3IntNetRecvWaitForSpace -> %Rrc; iSeg=%u cSegs=%u\n", rc, iSeg, cSegs));
VBox/Devices/Network/DrvIntNet.cpp:1774:    Log(("IntNet%d: hIf=%RX32 '%s'\n", pDrvIns->iInstance, pThis->hIf, pThis->szNetwork));
VBox/Devices/Network/DevVirtioNet.cpp:327:    Log(("%s %s packet #%d (%d bytes):\n",
VBox/Devices/Network/DevVirtioNet.cpp:437:        Log(("%s vnetIoCb_GetConfig: Read beyond the config structure is attempted (offCfg=%#x cb=%x).\n", INSTANCE(pThis), offCfg, cb));
VBox/Devices/Network/DevVirtioNet.cpp:449:        Log(("%s vnetIoCb_SetConfig: Write beyond the config structure is attempted (offCfg=%#x cb=%x).\n", INSTANCE(pThis), offCfg, cb));
VBox/Devices/Network/DevVirtioNet.cpp:467:    Log(("%s Reset triggered\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:483:    Log(("%s vnetIoCb_Reset: Link is %s\n", INSTANCE(pThis), pThis->fCableConnected ? "up" : "down"));
VBox/Devices/Network/DevVirtioNet.cpp:516:        Log(("%s Waking up Out-of-RX-space semaphore\n",  INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:560:        Log(("%s vnetTempLinkDown: Link is down temporarily\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:580:    Log(("%s vnetLinkUpTimer: Link is up\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:606:    Log(("%s Driver became ready, waking up RX thread...\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:725:        Log(("%s vnetNetworkDown_WaitReceiveAvail: waiting cMillies=%u...\n", INSTANCE(pThis), cMillies));
VBox/Devices/Network/DevVirtioNet.cpp:888:            Log(("%s vnetHandleRxPacket: Suddenly there is no space in receive queue!\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:894:            Log(("%s vnetHandleRxPacket: No writable descriptors in receive queue!\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:910:                    Log(("%s vnetHandleRxPacket: The first descriptor does match the header size!\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:939:            Log(("%s vnetHandleRxPacket: Failed to write merged RX buf header: %Rrc\n", INSTANCE(pThis), rc));
VBox/Devices/Network/DevVirtioNet.cpp:946:        Log(("%s vnetHandleRxPacket: Packet did not fit into RX queue (packet size=%u)!\n", INSTANCE(pThis), cb));
VBox/Devices/Network/DevVirtioNet.cpp:1070:    Log(("%s vnetSetLinkState: enmState=%d\n", INSTANCE(pThis), enmState));
VBox/Devices/Network/DevVirtioNet.cpp:1088:            Log(("%s Link is up\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:1097:            Log(("%s Link is down\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:1112:    Log(("%s Receive buffers has been added, waking up receive thread.\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:1290:        Log(("%s Ignoring transmit requests from non-existent driver (status=0x%x).\n", INSTANCE(pThis), pThis->VPCI.uStatus));
VBox/Devices/Network/DevVirtioNet.cpp:1296:        Log(("%s Ignoring transmit requests while cable is disconnected.\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:1333:            Log(("%s vnetQueueTransmit: The first segment is not the header! (%u < 2 || %u != %u).\n",
VBox/Devices/Network/DevVirtioNet.cpp:1496:    Log(("%s vnetControlRx: uCommand=%u fOn=%u\n", INSTANCE(pThis), pCtlHdr->u8Command, fOn));
VBox/Devices/Network/DevVirtioNet.cpp:1524:        Log(("%s vnetControlMac: Segment layout is wrong (u8Command=%u nOut=%u cb1=%u cb2=%u)\n",
VBox/Devices/Network/DevVirtioNet.cpp:1536:        Log(("%s vnetControlMac: The unicast mac segment is too small (nMacs=%u cb=%u)\n",
VBox/Devices/Network/DevVirtioNet.cpp:1543:        Log(("%s vnetControlMac: MAC table is too big, have to use promiscuous mode (nMacs=%u)\n", INSTANCE(pThis), nMacs));
VBox/Devices/Network/DevVirtioNet.cpp:1554:        Log(("%s vnetControlMac: unicast macs:\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:1556:            Log(("         %RTmac\n", &pThis->aMacFilter[i]));
VBox/Devices/Network/DevVirtioNet.cpp:1567:        Log(("%s vnetControlMac: The multicast mac segment is too small (nMacs=%u cb=%u)\n",
VBox/Devices/Network/DevVirtioNet.cpp:1574:        Log(("%s vnetControlMac: MAC table is too big, have to use allmulti mode (nMacs=%u)\n", INSTANCE(pThis), nMacs));
VBox/Devices/Network/DevVirtioNet.cpp:1585:        Log(("%s vnetControlMac: multicast macs:\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:1587:            Log(("         %RTmac\n",
VBox/Devices/Network/DevVirtioNet.cpp:1603:        Log(("%s vnetControlVlan: Segment layout is wrong (u8Command=%u nOut=%u cb=%u)\n",
VBox/Devices/Network/DevVirtioNet.cpp:1614:        Log(("%s vnetControlVlan: VLAN ID is out of range (VID=%u)\n", INSTANCE(pThis), u16Vid));
VBox/Devices/Network/DevVirtioNet.cpp:1618:    Log(("%s vnetControlVlan: uCommand=%u VID=%u\n", INSTANCE(pThis), pCtlHdr->u8Command, u16Vid));
VBox/Devices/Network/DevVirtioNet.cpp:1645:            Log(("%s vnetQueueControl: The first 'out' segment is not the header! (%u < 1 || %u < %u).\n",
VBox/Devices/Network/DevVirtioNet.cpp:1652:            Log(("%s vnetQueueControl: The last 'in' segment is too small to hold the acknowledge! (%u < 1 || %u < %u).\n",
VBox/Devices/Network/DevVirtioNet.cpp:1676:            Log(("%s Processed control message %u, ack=%u.\n", INSTANCE(pThis), CtlHdr.u8Class, u8Ack));
VBox/Devices/Network/DevVirtioNet.cpp:1756:    Log(("%s State has been saved\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:1910:    Log(("%s vnetDetach:\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:1974:        Log(("%s No attached driver!\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:2036:    Log(("%s Destroying instance\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:2076:    Log(("%s Constructing new instance\n", INSTANCE(pThis)));
VBox/Devices/Network/DevVirtioNet.cpp:2104:    Log(("%s Link up delay is set to %u seconds\n",
VBox/Devices/Network/DevVirtioNet.cpp:2195:        Log(("%s This adapter is not attached to any network!\n", INSTANCE(pThis)));
VBox/Devices/Input/PS2M.cpp:799:            Log(("Unsupported command 0x%02X!\n", cmd));
VBox/Devices/Input/PS2M.cpp:1058:        Log(("%s/%d: warning: no driver attached to LUN #1!\n", pDevIns->pReg->szName, pDevIns->iInstance));
VBox/Devices/Input/UsbKbd.cpp:505:    Log(("usbHidCompleteStall/#%u: pUrb=%p:%s: %s\n", pThis->pUsbIns->iInstance, pUrb, pUrb->pszDesc, pszWhy));
VBox/Devices/Input/UsbKbd.cpp:528:    Log(("usbHidCompleteOk/#%u: pUrb=%p:%s cbData=%#zx\n", pThis->pUsbIns->iInstance, pUrb, pUrb->pszDesc, cbData));
VBox/Devices/Input/UsbKbd.cpp:794:        Log(("usbHidUrbReap/#%u: pUrb=%p:%s\n", pUsbIns->iInstance, pUrb, pUrb->pszDesc));
VBox/Devices/Input/UsbKbd.cpp:854:            Log(("usbHidHandleIntrDevToHost: Entering STATUS\n"));
VBox/Devices/Input/UsbKbd.cpp:864:            Log(("usbHidHandleIntrDevToHost: Entering READY\n"));
VBox/Devices/Input/UsbKbd.cpp:886:            Log(("usbHidHandleIntrDevToHost: enmState=%d cbData=%#x\n", pThis->enmState, pUrb->cbData));
VBox/Devices/Input/UsbKbd.cpp:915:                                Log(("usbHid: GET_DESCRIPTOR DT_STRING wValue=%#x wIndex=%#x\n", pSetup->wValue, pSetup->wIndex));
VBox/Devices/Input/UsbKbd.cpp:918:                                Log(("usbHid: GET_DESCRIPTOR, huh? wValue=%#x wIndex=%#x\n", pSetup->wValue, pSetup->wIndex));
VBox/Devices/Input/UsbKbd.cpp:935:                                Log(("usbHidKbd: GET_DESCRIPTOR DT_IF_HID_DESCRIPTOR wValue=%#x wIndex=%#x cbCopy=%#x\n", pSetup->wValue, pSetup->wIndex, cbCopy));
VBox/Devices/Input/UsbKbd.cpp:947:                                Log(("usbHid: GET_DESCRIPTOR DT_IF_HID_REPORT wValue=%#x wIndex=%#x cbCopy=%#x\n", pSetup->wValue, pSetup->wIndex, cbCopy));
VBox/Devices/Input/UsbKbd.cpp:953:                                Log(("usbHid: GET_DESCRIPTOR, huh? wValue=%#x wIndex=%#x\n", pSetup->wValue, pSetup->wIndex));
VBox/Devices/Input/UsbKbd.cpp:960:                        Log(("usbHid: Bad GET_DESCRIPTOR req: bmRequestType=%#x\n", pSetup->bmRequestType));
VBox/Devices/Input/UsbKbd.cpp:972:                    Log(("usbHid: Bad GET_STATUS req: wLength=%#x\n", pSetup->wLength));
VBox/Devices/Input/UsbKbd.cpp:981:                        Log(("usbHid: GET_STATUS (device)\n"));
VBox/Devices/Input/UsbKbd.cpp:994:                        Log(("usbHid: GET_STATUS (interface) invalid, wIndex=%#x\n", pSetup->wIndex));
VBox/Devices/Input/UsbKbd.cpp:1006:                        Log(("usbHid: GET_STATUS (endpoint) invalid, wIndex=%#x\n", pSetup->wIndex));
VBox/Devices/Input/UsbKbd.cpp:1011:                        Log(("usbHid: Bad GET_STATUS req: bmRequestType=%#x\n", pSetup->bmRequestType));
VBox/Devices/Input/UsbKbd.cpp:1022:        Log(("usbHid: Implement standard request: bmRequestType=%#x bRequest=%#x wValue=%#x wIndex=%#x wLength=%#x\n",
VBox/Devices/Input/UsbKbd.cpp:1037:                        Log(("usbHid: SET_IDLE wValue=%#x wIndex=%#x\n", pSetup->wValue, pSetup->wIndex));
VBox/Devices/Input/UsbKbd.cpp:1053:                        Log(("usbHid: GET_IDLE wValue=%#x wIndex=%#x, returning %#x\n", pSetup->wValue, pSetup->wIndex, pThis->bIdle));
VBox/Devices/Input/UsbKbd.cpp:1067:                        Log(("usbHid: SET_REPORT wValue=%#x wIndex=%#x wLength=%#x\n", pSetup->wValue, pSetup->wIndex, pSetup->wLength));
VBox/Devices/Input/UsbKbd.cpp:1076:        Log(("usbHid: Unimplemented class request: bmRequestType=%#x bRequest=%#x wValue=%#x wIndex=%#x wLength=%#x\n",
VBox/Devices/Input/UsbKbd.cpp:1083:        Log(("usbHid: Unknown control msg: bmRequestType=%#x bRequest=%#x wValue=%#x wIndex=%#x wLength=%#x\n",
VBox/Devices/Input/UsbKbd.cpp:1251:    Log(("usbHidConstruct/#%u:\n", iInstance));
VBox/Devices/Input/DevPS2.cpp:270:    Log(("kbd: read status=0x%02x\n", val));
VBox/Devices/Input/DevPS2.cpp:282:    Log(("kbd: write cmd=0x%02x\n", val));
VBox/Devices/Input/DevPS2.cpp:393:        Log(("kbd: reading non-standard RAM addr %#x\n", val & 0x1f));
VBox/Devices/Input/DevPS2.cpp:396:        Log(("kbd: unsupported keyboard cmd=0x%02x\n", val));
VBox/Devices/Input/DevPS2.cpp:422:    Log(("kbd: read data=0x%02x\n", val));
VBox/Devices/Input/DevPS2.cpp:446:    Log(("kbd: write data=0x%02x\n", val));
VBox/Devices/Input/DevPS2.cpp:604:        Log(("kbd_load: %d keyboard queue items discarded from old saved state\n", u32));
VBox/Devices/Input/DevPS2.cpp:618:        Log(("kbd_load: %d mouse event queue items discarded from old saved state\n", u32));
VBox/Devices/Input/DevPS2.cpp:629:        Log(("kbd_load: %d mouse command queue items discarded from old saved state\n", u32));
VBox/Devices/Input/DevPS2.cpp:973:    Log(("pckbd: fGCEnabled=%RTbool fR0Enabled=%RTbool\n", fGCEnabled, fR0Enabled));
VBox/Devices/Input/PS2K.cpp:688:    Log(("Typematic delay %u ms, repeat period %u ms\n",
VBox/Devices/Input/PS2K.cpp:1070:            Log(("Typematic delay %u ms, key %02X\n", pThis->uTypematicDelay, u8HidCode));
VBox/Devices/Input/PS2K.cpp:1086:            Log(("Typematic action cleared for key %02X\n", u8HidCode));
VBox/Devices/Input/PS2K.cpp:1353:        Log(("%s/%d: warning: no driver attached to LUN #0!\n", pDevIns->pReg->szName, pDevIns->iInstance));
VBox/Devices/Input/PS2K.cpp:1525:    Log(("KbdThrottleEnabled=%u\n", fThrottleEnabled));
VBox/Devices/Bus/DevPciMerge1.cpp.h:178:                    Log(("PCI: Relocating '%s' from %u.%u to %u.%u.\n", pMovePciDev->pszNameR3, uPciDevNo, uMoveFun, uMoveToDevNo, uMoveFun));
VBox/Devices/Bus/DevPciMerge1.cpp.h:210:    Log(("PCI: Registered device %d function %d (%#x) '%s'.\n",
VBox/Devices/Bus/DevPCI.cpp:1228:    Log(("PCI: fUseIoApic=%RTbool fGCEnabled=%RTbool fR0Enabled=%RTbool\n", fUseIoApic, fGCEnabled, fR0Enabled));
VBox/Devices/Bus/DevPCI.cpp:1620:    Log(("PCI: fGCEnabled=%RTbool fR0Enabled=%RTbool\n", fGCEnabled, fR0Enabled));
VBox/Devices/Bus/MsiCommon.cpp:182:                                Log(("msi: mask updated bit %d@%x (%d)\n", iBitNum, uAddr, maskUpdated));
VBox/Devices/Bus/MsiCommon.cpp:188:                                    Log(("msi: notify earlier masked pending vector: %d\n", uVector));
VBox/Devices/Bus/MsiCommon.cpp:194:                                Log(("msi: mask vector: %d\n", uVector));
VBox/Devices/Bus/DevPciIch9.cpp:1214:                    pDev->pszNameR3, pDev->Int.s.CTX_SUFF(pDevIns)->iInstance, off, pbDstConfig[off], pbSrcConfig[off])); /** @todo make this Log() later. */
VBox/Devices/Bus/DevPciIch9.cpp:1518:    Log(("Set region address: %02x:%02x.%d region %d address=%RX64%s\n",
VBox/Devices/Bus/DevPciIch9.cpp:1531:    Log(("BIOS init bridge: %02x:%02x.%d\n", pBus->iBus, pBridge->uDevFn >> 3, pBridge->uDevFn & 7));
VBox/Devices/Bus/DevPciIch9.cpp:1857:    Log(("BIOS init bridge (prefetch): %02x:%02x.%d use64bit=%d dryrun=%d\n", pBus->iBus, pBridge->uDevFn >> 3, pBridge->uDevFn & 7, fUse64Bit, fDryrun));
VBox/Devices/Bus/DevPciIch9.cpp:1907:        Log(("BIOS init device (prefetch): %02x:%02x.%d\n", pBus->iBus, uDevFn >> 3, uDevFn & 7));
VBox/Devices/Bus/DevPciIch9.cpp:1947:        Log(("BIOS init device: %02x:%02x.%d\n", pBus->iBus, uDevFn >> 3, uDevFn & 7));
VBox/Devices/Bus/DevPciIch9.cpp:1996:            Log(("Using pin %d and IRQ %d for device %02x:%02x.%d\n",
VBox/Devices/Bus/DevPciIch9.cpp:2023:            Log(("BIOS init prefetchable memory behind bridge: %02x:%02x.%d\n", pChildBus->iBus, pBridge->uDevFn >> 3, pBridge->uDevFn & 7));
VBox/Devices/Bus/DevPciIch9.cpp:2154:    Log(("cbBelow4GB: %#RX32, uPciBiosMmio: %#RX64, cbAbove4GB: %#RX64, uPciBiosMmio64=%#RX64\n",
VBox/Devices/Bus/DevPciIch9.cpp:2962:    Log(("PCI: fUseIoApic=%RTbool fGCEnabled=%RTbool fR0Enabled=%RTbool\n", fUseIoApic, fGCEnabled, fR0Enabled));
VBox/Devices/Bus/DevPciIch9.cpp:3345:    Log(("PCI: fGCEnabled=%RTbool fR0Enabled=%RTbool\n", fGCEnabled, fR0Enabled));
VBox/Devices/Audio/AudioMixBuffer.cpp:1280:    Log(("%s: %*s[%s] %s: offRead=%RU32, offWrite=%RU32, cMixed=%RU32 -> %RU32/%RU32\n",
VBox/Devices/Audio/AudioMixBuffer.cpp:1363:    Log(("%s: Children: %zu\n", pszFunc, cChildren));
VBox/Devices/Audio/DrvHostDSound.cpp:55: * Debug logging still uses the common Log* macros from IPRT.
VBox/Devices/Audio/DrvAudioCommon.cpp:879:    Log(("uHz=%RU32, cChannels=%RU8, cBits=%RU8%s",
VBox/Devices/Audio/DevHDA.cpp:735:            Log(("hdaR3CmdSync/CORB: read %RGp LB %#x (%Rrc)\n", pThis->u64CORBBase, pThis->cbCorbBuf, rc));
VBox/Devices/Audio/DevHDA.cpp:747:            Log(("hdaR3CmdSync/RIRB: phys read %RGp LB %#x (%Rrc)\n", pThis->u64RIRBBase, pThis->pu64RirbBuf, rc));
VBox/Devices/Audio/DevHDA.cpp:769:                Log((" %s%08x", pszPrefix, pThis->pu32CorbBuf[i + j]));
VBox/Devices/Audio/DevHDA.cpp:772:            Log(("\n"));
VBox/Devices/Audio/DevHDA.cpp:787:                Log((" %s%016lx", prefix, pThis->pu64RirbBuf[i + j]));
VBox/Devices/Audio/DevHDA.cpp:789:            Log(("\n"));
VBox/Devices/Audio/DevHDA.cpp:3117:     * Log the outcome.
VBox/Devices/Audio/DevHDA.cpp:3137:        Log(("hdaWriteReg: Warning: Access to %s is blocked while controller is in reset mode\n", g_aHdaRegMap[idxRegDsc].abbrev));
VBox/Devices/Audio/DevHDA.cpp:3164:            Log(("hdaWriteReg: Warning: Access to %s is blocked! %R[sdctl]\n", g_aHdaRegMap[idxRegDsc].abbrev, uSDCTL));
VBox/Devices/Audio/DevIchAc97.cpp:1904:    Log(("-> fMuted=%RTbool, lVol=%RU8, rVol=%RU8\n", fCtlMuted, lVol, rVol));
VBox/Devices/Parallel/DevParallel.cpp:451:                        Log(("Read data lines 0x%X\n", pThis->regData));
VBox/Devices/Parallel/DevParallel.cpp:493:                    Log(("Read EPP address 0x%X\n", pThis->regEppAddr));
VBox/Devices/Parallel/DevParallel.cpp:507:                    Log(("Read EPP data 0x%X\n", pThis->regEppData));
VBox/Devices/testcase/tstDevicePdmDevHlp.cpp:588:    Log(("pdmR3DevHlp_PhysRead: caller='%s'/%d: returns %Rrc\n", pDevIns->pReg->szName, pDevIns->iInstance, rc));
VBox/Devices/testcase/tstDevicePdmDevHlp.cpp:603:    Log(("pdmR3DevHlp_PhysWrite: caller='%s'/%d: returns %Rrc\n", pDevIns->pReg->szName, pDevIns->iInstance, rc));
VBox/Devices/testcase/tstDevicePdmDevHlp.cpp:619:    Log(("pdmR3DevHlp_PhysGCPhys2CCPtr: caller='%s'/%d: returns %Rrc\n", pDevIns->pReg->szName, pDevIns->iInstance, rc));
VBox/Devices/testcase/tstDevicePdmDevHlp.cpp:635:    Log(("pdmR3DevHlp_PhysGCPhys2CCPtrReadOnly: caller='%s'/%d: returns %Rrc\n", pDevIns->pReg->szName, pDevIns->iInstance, rc));
VBox/Devices/testcase/tstDevicePdmDevHlp.cpp:649:    Log(("pdmR3DevHlp_PhysReleasePageMappingLock: caller='%s'/%d: returns void\n", pDevIns->pReg->szName, pDevIns->iInstance));
VBox/Devices/Storage/DrvRamDisk.cpp:839:        /* Log the error. */
VBox/Devices/Storage/DrvHostBase-win.cpp:344:            Log(("DrvHostFloppy: IOCTL_DISK_GET_DRIVE_GEOMETRY(%s) failed, LastError=%d rc=%Rrc\n",
VBox/Devices/Storage/UsbMsd.cpp:933:    Log(("usbMsdCompleteStall/#%u: pUrb=%p:%s: %s\n", pThis->pUsbIns->iInstance, pUrb, pUrb->pszDesc, pszWhy));
VBox/Devices/Storage/UsbMsd.cpp:956:    Log(("usbMsdCompleteOk/#%u: pUrb=%p:%s cbData=%#zx\n", pThis->pUsbIns->iInstance, pUrb, pUrb->pszDesc, cbData));
VBox/Devices/Storage/UsbMsd.cpp:992:            Log(("usbMsdResetWorker: pResetUrb is already %p:%s - stalling\n", pThis->pResetUrb, pThis->pResetUrb->pszDesc));
VBox/Devices/Storage/UsbMsd.cpp:1000:            Log(("usbMsdResetWorker: Setting pResetUrb to %p:%s\n", pThis->pResetUrb, pThis->pResetUrb->pszDesc));
VBox/Devices/Storage/UsbMsd.cpp:1006:        Log(("usbMsdResetWorker: Waiting for completion...\n"));
VBox/Devices/Storage/UsbMsd.cpp:1019:            Log(("usbMsdResetWorker: Didn't complete, ditching the current request (%p)!\n", pReq));
VBox/Devices/Storage/UsbMsd.cpp:1078:    Log(("usbMsdLun0IoReqCompleteNotify: pReq=%p dCBWTag=%#x iScsiReqStatus=%u \n", pReq, pReq->Cbw.dCBWTag, pReq->iScsiReqStatus));
VBox/Devices/Storage/UsbMsd.cpp:1093:            Log(("usbMsdLun0IoReqCompleteNotify: Entering STATUS\n"));
VBox/Devices/Storage/UsbMsd.cpp:1098:            Log(("usbMsdLun0IoReqCompleteNotify: Entering DATA_TO_HOST\n"));
VBox/Devices/Storage/UsbMsd.cpp:1116:        Log(("usbMsdLun0IoReqCompleteNotify: freeing %p\n", pReq));
VBox/Devices/Storage/UsbMsd.cpp:1503:        Log(("usbMsdUrbReap/#%u: pUrb=%p:%s\n", pUsbIns->iInstance, pUrb, pUrb->pszDesc));
VBox/Devices/Storage/UsbMsd.cpp:1552:    Log(("%s: Entering EXECUTING (dCBWTag=%#x).\n", pszCaller, pReq->Cbw.dCBWTag));
VBox/Devices/Storage/UsbMsd.cpp:1601:                Log(("usbMsd: Bad CBW: cbData=%#x < min=%#x\n", pUrb->cbData, RT_UOFFSETOF(USBCBW, CBWCB[1]) ));
VBox/Devices/Storage/UsbMsd.cpp:1606:                Log(("usbMsd: CBW: Invalid dCBWSignature value: %#x\n", pCbw->dCBWSignature));
VBox/Devices/Storage/UsbMsd.cpp:1609:            Log(("usbMsd: CBW: dCBWTag=%#x dCBWDataTransferLength=%#x bmCBWFlags=%#x bCBWLun=%#x bCBWCBLength=%#x  cbData=%#x fShortNotOk=%RTbool\n",
VBox/Devices/Storage/UsbMsd.cpp:1613:                Log(("usbMsd: CBW: Bad bmCBWFlags value: %#x\n", pCbw->bmCBWFlags));
VBox/Devices/Storage/UsbMsd.cpp:1619:                Log(("usbMsd: CBW: Bad bCBWLun value: %#x\n", pCbw->bCBWLun));
VBox/Devices/Storage/UsbMsd.cpp:1624:                Log(("usbMsd: CBW: Bad bCBWCBLength value: %#x\n", pCbw->bCBWCBLength));
VBox/Devices/Storage/UsbMsd.cpp:1629:                Log(("usbMsd: CBW: Mismatching cbData and bCBWCBLength values: %#x vs. %#x (%#x)\n",
VBox/Devices/Storage/UsbMsd.cpp:1635:                Log(("usbMsd: CBW: dCBWDataTransferLength is too large: %#x (%u)\n",
VBox/Devices/Storage/UsbMsd.cpp:1670:                    Log(("usbMsd: Failed sending SCSI request to driver: %Rrc\n", rc));
VBox/Devices/Storage/UsbMsd.cpp:1676:                Log(("usbMsdHandleBulkHostToDev: Entering DATA_FROM_HOST.\n"));
VBox/Devices/Storage/UsbMsd.cpp:1692:                Log(("usbMsd: Too much data: cbData=%#x offBuf=%#x dCBWDataTransferLength=%#x cbLeft=%#x\n",
VBox/Devices/Storage/UsbMsd.cpp:1706:                    Log(("usbMsd: Failed sending SCSI request to driver: %Rrc\n", rc));
VBox/Devices/Storage/UsbMsd.cpp:1758:                Log(("usbMsd: Requested more data that we've got; cbData=%#x offBuf=%#x dCBWDataTransferLength=%#x cbLeft=%#x\n",
VBox/Devices/Storage/UsbMsd.cpp:1767:                Log(("usbMsdHandleBulkDevToHost: Entering STATUS\n"));
VBox/Devices/Storage/UsbMsd.cpp:1780:                Log(("usbMsd: Unexpected status request size: %#x (expected %#x), fShortNotOK=%RTbool\n", pUrb->cbData, sizeof(USBCSW), pUrb->fShortNotOk));
VBox/Devices/Storage/UsbMsd.cpp:1803:            Log(("usbMsd: CSW: dCSWTag=%#x bCSWStatus=%d dCSWDataResidue=%#x\n",
VBox/Devices/Storage/UsbMsd.cpp:1806:            Log(("usbMsdHandleBulkDevToHost: Entering READY\n"));
VBox/Devices/Storage/UsbMsd.cpp:1821:                Log(("usbMsdHandleBulkDevToHost: DATA_FROM_HOST; cbData=%#x -> stall\n", pUrb->cbData));
VBox/Devices/Storage/UsbMsd.cpp:1830:                Log(("usbMsd: Failed sending SCSI request to driver: %Rrc\n", rc));
VBox/Devices/Storage/UsbMsd.cpp:1849:            Log(("usbMsdHandleBulkDevToHost: enmState=READ(%d) (cbData=%#x)\n", pReq->enmState, pUrb->cbData));
VBox/Devices/Storage/UsbMsd.cpp:1853:            Log(("usbMsdHandleBulkDevToHost: enmState=%d cbData=%#x\n", pReq->enmState, pUrb->cbData));
VBox/Devices/Storage/UsbMsd.cpp:1875:                    Log(("usbMsd: Bad GET_DESCRIPTOR req: bmRequestType=%#x\n", pSetup->bmRequestType));
VBox/Devices/Storage/UsbMsd.cpp:1884:                        Log(("usbMsd: GET_DESCRIPTOR DT_STRING wValue=%#x wIndex=%#x\n", pSetup->wValue, pSetup->wIndex));
VBox/Devices/Storage/UsbMsd.cpp:1887:                        Log(("usbMsd: GET_DESCRIPTOR DT_DEVICE_QUALIFIER wValue=%#x wIndex=%#x\n", pSetup->wValue, pSetup->wIndex));
VBox/Devices/Storage/UsbMsd.cpp:1894:                        Log(("usbMsd: GET_DESCRIPTOR DT_BOS wValue=%#x wIndex=%#x\n", pSetup->wValue, pSetup->wIndex));
VBox/Devices/Storage/UsbMsd.cpp:1901:                        Log(("usbMsd: GET_DESCRIPTOR, huh? wValue=%#x wIndex=%#x\n", pSetup->wValue, pSetup->wIndex));
VBox/Devices/Storage/UsbMsd.cpp:1912:        Log(("usbMsd: Implement standard request: bmRequestType=%#x bRequest=%#x wValue=%#x wIndex=%#x wLength=%#x\n",
VBox/Devices/Storage/UsbMsd.cpp:1924:        Log(("usbMsdHandleDefaultPipe: Bulk-Only Mass Storage Reset\n"));
VBox/Devices/Storage/UsbMsd.cpp:1939:        Log(("usbMsd: Unknown control msg: bmRequestType=%#x bRequest=%#x wValue=%#x wIndex=%#x wLength=%#x\n",
VBox/Devices/Storage/UsbMsd.cpp:2255:    Log(("usbMsdConstruct/#%u:\n", iInstance));
VBox/Devices/Storage/DevFdc.cpp:74:#  define FLOPPY_DPRINTF(...) Log(("floppy: " __VA_ARGS__))
VBox/Devices/Storage/DevAHCI.cpp:857:     Log(("R3 P%u: %M", pAhciPort->iLUN, _LogRelRemoveParentheseis a))
VBox/Devices/Storage/DevAHCI.cpp:860:     do { Log(("R3 P%u: ", pAhciPort->iLUN)); Log(a); } while(0)
VBox/Devices/Storage/DevAHCI.cpp:867:     Log(("R0 P%u: %M", pAhciPort->iLUN, _LogRelRemoveParentheseis a))
VBox/Devices/Storage/DevAHCI.cpp:870:     do { Log(("R0 P%u: ", pAhciPort->iLUN)); Log(a); } while(0)
VBox/Devices/Storage/DevAHCI.cpp:877:     Log(("GC P%u: %M", pAhciPort->iLUN, _LogRelRemoveParentheseis a))
VBox/Devices/Storage/DevAHCI.cpp:880:     do { Log(("GC P%u: ", pAhciPort->iLUN)); Log(a); } while(0)
VBox/Devices/Storage/DevAHCI.cpp:890:    Log(("%s: Clearing interrupt\n", __FUNCTION__));
VBox/Devices/Storage/DevAHCI.cpp:899:    Log(("P%u: %s: Setting interrupt\n", iPort, __FUNCTION__));
VBox/Devices/Storage/DevAHCI.cpp:919:                    Log(("P%u: %s: Fire interrupt\n", iPort, __FUNCTION__));
VBox/Devices/Storage/DevAHCI.cpp:934:                Log(("P%u: %s: Fire interrupt\n", iPort, __FUNCTION__));
VBox/Devices/Storage/DevAHCI.cpp:1614:    Log(("%s: read regHbaVs=%#010x\n", __FUNCTION__, pAhci->regHbaVs));
VBox/Devices/Storage/DevAHCI.cpp:1625:    Log(("%s: read regHbaPi=%#010x\n", __FUNCTION__, pAhci->regHbaPi));
VBox/Devices/Storage/DevAHCI.cpp:1636:    Log(("%s: write u32Value=%#010x\n", __FUNCTION__, u32Value));
VBox/Devices/Storage/DevAHCI.cpp:1663:                    Log(("%s: Interrupt status of port %u set -> Set interrupt again\n", __FUNCTION__, i));
VBox/Devices/Storage/DevAHCI.cpp:1680:        Log(("%s: Not clearing interrupt: u32PortsInterrupted=%#010x\n", __FUNCTION__, pAhci->u32PortsInterrupted));
VBox/Devices/Storage/DevAHCI.cpp:1708:    Log(("%s: read regHbaIs=%#010x u32PortsInterrupted=%#010x\n", __FUNCTION__, pAhci->regHbaIs, u32PortsInterrupted));
VBox/Devices/Storage/DevAHCI.cpp:1713:    Log(("%s:", __FUNCTION__));
VBox/Devices/Storage/DevAHCI.cpp:1718:            Log((" P%d", i));
VBox/Devices/Storage/DevAHCI.cpp:1720:    Log(("\n"));
VBox/Devices/Storage/DevAHCI.cpp:1734:    Log(("%s: write u32Value=%#010x\n"
VBox/Devices/Storage/DevAHCI.cpp:1770:    Log(("%s: read regHbaCtrl=%#010x\n"
VBox/Devices/Storage/DevAHCI.cpp:1785:    Log(("%s: read regHbaCap=%#010x\n"
VBox/Devices/Storage/DevAHCI.cpp:1806:    Log(("%s: write u32Value=%#010x\n"
VBox/Devices/Storage/DevAHCI.cpp:1831:    Log(("%s: read regHbaCccCtl=%#010x\n"
VBox/Devices/Storage/DevAHCI.cpp:1846:    Log(("%s: write u32Value=%#010x\n", __FUNCTION__, u32Value));
VBox/Devices/Storage/DevAHCI.cpp:1859:    Log(("%s: read regHbaCccPorts=%#010x\n", __FUNCTION__, pAhci->regHbaCccPorts));
VBox/Devices/Storage/DevAHCI.cpp:1862:    Log(("%s:", __FUNCTION__));
VBox/Devices/Storage/DevAHCI.cpp:1867:            Log((" P%d", i));
VBox/Devices/Storage/DevAHCI.cpp:1869:    Log(("\n"));
VBox/Devices/Storage/DevAHCI.cpp:1882:    Log(("%s: Write denied!!! iReg=%u u32Value=%#010x\n", __FUNCTION__, iReg, u32Value));
VBox/Devices/Storage/DevAHCI.cpp:3745:            /* Log the error. */
VBox/Devices/Storage/DevAHCI.cpp:5430:    Log(("ahciR3Suspend\n"));
VBox/Devices/Storage/DevAHCI.cpp:5467:    Log(("%s:\n", __FUNCTION__));
VBox/Devices/Storage/DevAHCI.cpp:5600:    Log(("%s:\n", __FUNCTION__));
VBox/Devices/Storage/DevAHCI.cpp:5665:    Log(("%s:\n", __FUNCTION__));
VBox/Devices/Storage/DevAHCI.cpp:5811:    Log(("achiR3PowerOff\n"));
VBox/Devices/Storage/DevAHCI.cpp:5839:        Log(("%s: Destruct every port\n", __FUNCTION__));
VBox/Devices/Storage/DevAHCI.cpp:5892:    Log(("%s: fGCEnabled=%d\n", __FUNCTION__, fGCEnabled));
VBox/Devices/Storage/DevAHCI.cpp:5898:    Log(("%s: fR0Enabled=%d\n", __FUNCTION__, fR0Enabled));
VBox/Devices/Storage/DevAHCI.cpp:5904:    Log(("%s: cPortsImpl=%u\n", __FUNCTION__, pThis->cPortsImpl));
VBox/Devices/Storage/DevAHCI.cpp:5923:    Log(("%s: cCmdSlotsAvail=%u\n", __FUNCTION__, pThis->cCmdSlotsAvail));
VBox/Devices/Storage/DevAHCI.cpp:6007:        Log(("%s: Failed to create critical section.\n", __FUNCTION__));
VBox/Devices/Storage/DevAHCI.cpp:6144:                Log(("%s: Failed to configure the %s.\n", __FUNCTION__, pszName));
VBox/Devices/Storage/DrvHostBase.cpp:73:            Log(("%s-%d: drvHostBaseRead: drvHostBaseReadOs(%#llx, %p, %#x) -> %Rrc ('%s')\n",
VBox/Devices/Storage/DrvHostBase.cpp:121:                Log(("%s-%d: drvHostBaseWrite: drvHostBaseWriteOs(%#llx, %p, %#x) -> %Rrc ('%s')\n",
VBox/Devices/Storage/DrvHostBase.cpp:616:                Log(("%s-%d: drvHostBaseIoReqRead: drvHostBaseReadOs(%#llx, %p, %#x) -> %Rrc ('%s')\n",
VBox/Devices/Storage/DrvHostBase.cpp:623:            Log(("%s-%d: drvHostBaseIoReqRead: drvHostBaseBufferRetain(%#llx, %p, %#x) -> %Rrc ('%s')\n",
VBox/Devices/Storage/DrvHostBase.cpp:678:                    Log(("%s-%d: drvHostBaseIoReqWrite: drvHostBaseWriteOs(%#llx, %p, %#x) -> %Rrc ('%s')\n",
VBox/Devices/Storage/DrvHostBase.cpp:827:        Log(("drvHostBaseUnmount: Locked\n"));
VBox/Devices/Storage/DrvHostBase.cpp:1432:    Log(("%s-%d: pszDevice='%s' (%s) cMilliesPoller=%d fReadOnlyConfig=%d fLocked=%d fBIOSVisible=%d Uuid=%RTuuid\n",
VBox/Devices/Storage/DrvVD.cpp:2588:        Log(("drvvdUnmount: Not mounted\n"));
VBox/Devices/Storage/DrvVD.cpp:2593:        Log(("drvvdUnmount: Locked\n"));
VBox/Devices/Storage/DrvVD.cpp:2606:    Log(("drvblockUnmount: success\n"));
VBox/Devices/Storage/DrvVD.cpp:2622:    Log(("drvblockLock: %d -> %d\n", pThis->fLocked, true));
VBox/Devices/Storage/DrvVD.cpp:2631:    Log(("drvblockUnlock: %d -> %d\n", pThis->fLocked, false));
VBox/Devices/Storage/DrvVD.cpp:2960:        /* Log the error. */
VBox/Devices/Storage/DrvHostBase-darwin.cpp:184:                    Log(("%s-%d: calling DADiskClaim on '%s'.\n", pDrvIns->pReg->szName, pDrvIns->iInstance, szName));
VBox/Devices/Storage/DrvHostBase-darwin.cpp:195:                        Log(("%s-%d: calling DADiskUnmount on '%s'.\n", pDrvIns->pReg->szName, pDrvIns->iInstance, szName));
VBox/Devices/Storage/DrvHostBase-darwin.cpp:205:                            Log(("%s-%d: unmount succeed - retrying.\n", pDrvIns->pReg->szName, pDrvIns->iInstance));
VBox/Devices/Storage/DrvHostBase-darwin.cpp:208:                        Log(("%s-%d: umount => rc32=%d & rcDA=%#x\n", pDrvIns->pReg->szName, pDrvIns->iInstance, rc32, rcDA));
VBox/Devices/Storage/DrvHostBase-darwin.cpp:214:                        Log(("%s-%d: claim => rc32=%d & rcDA=%#x\n", pDrvIns->pReg->szName, pDrvIns->iInstance, rc32, rcDA));
VBox/Devices/Storage/DrvHostBase-darwin.cpp:220:                    Log(("%s-%d: failed to open disk '%s'!\n", pDrvIns->pReg->szName, pDrvIns->iInstance, szName));
VBox/Devices/Storage/DrvHostBase-darwin.cpp:227:                Log(("%s-%d: failed to create DA session!\n", pDrvIns->pReg->szName, pDrvIns->iInstance));
VBox/Devices/Storage/VBoxSCSI.cpp:209:                    Log(("%s: Command ready for processing\n", __FUNCTION__));
VBox/Devices/Storage/DrvHostDVD.cpp:77:    Log(("%s: sense=%#x (%s) asc=%#x ascq=%#x (%s)\n", __FUNCTION__, pabATAPISense[2] & 0x0f, SCSISenseText(pabATAPISense[2] & 0x0f),
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:713:        Log(("%s: cReplySize=%u\n", __FUNCTION__, pThis->cReplySize));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1033:        Log(("Message request function: %s\n", g_apszMPTFunctionNames[pMessageHdr->u8Function]));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1035:        Log(("Message request function: <unknown>\n"));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1446:                    Log(("%s: Doorbell function finished\n", __FUNCTION__));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1586:            Log(("%s: Returning address %#x\n", __FUNCTION__, u32));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1724:        Log(("lsilogicIOPortWrite: Ignoring misaligned write - offReg=%#x u32=%#x cb=%#x\n", offReg, u32, cb));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1770:        Log(("lsilogicMMIOWrite: Non-DWORD write access - offReg=%#x u32=%#x cb=%#x\n", offReg, u32, cb));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1777:        Log(("lsilogicIOPortWrite: Ignoring misaligned write - offReg=%#x u32=%#x cb=%#x\n", offReg, u32, cb));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1837:                Log(("%s: Dumping info for SIMPLE SG entry:\n", __FUNCTION__));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1838:                Log(("%s: u24Length=%u\n", __FUNCTION__, pSGEntry->Simple32.u24Length));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1839:                Log(("%s: fEndOfList=%d\n", __FUNCTION__, pSGEntry->Simple32.fEndOfList));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1840:                Log(("%s: f64BitAddress=%d\n", __FUNCTION__, pSGEntry->Simple32.f64BitAddress));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1841:                Log(("%s: fBufferContainsData=%d\n", __FUNCTION__, pSGEntry->Simple32.fBufferContainsData));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1842:                Log(("%s: fLocalAddress=%d\n", __FUNCTION__, pSGEntry->Simple32.fLocalAddress));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1843:                Log(("%s: fEndOfBuffer=%d\n", __FUNCTION__, pSGEntry->Simple32.fEndOfBuffer));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1844:                Log(("%s: fLastElement=%d\n", __FUNCTION__, pSGEntry->Simple32.fLastElement));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1845:                Log(("%s: u32DataBufferAddressLow=%u\n", __FUNCTION__, pSGEntry->Simple32.u32DataBufferAddressLow));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1848:                    Log(("%s: u32DataBufferAddressHigh=%u\n", __FUNCTION__, pSGEntry->Simple64.u32DataBufferAddressHigh));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1849:                    Log(("%s: GCDataBufferAddress=%RGp\n", __FUNCTION__,
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1854:                    Log(("%s: GCDataBufferAddress=%RGp\n", __FUNCTION__, pSGEntry->Simple32.u32DataBufferAddressLow));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1860:                Log(("%s: Dumping info for CHAIN SG entry:\n", __FUNCTION__));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1861:                Log(("%s: u16Length=%u\n", __FUNCTION__, pSGEntry->Chain.u16Length));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1862:                Log(("%s: u8NExtChainOffset=%d\n", __FUNCTION__, pSGEntry->Chain.u8NextChainOffset));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1863:                Log(("%s: f64BitAddress=%d\n", __FUNCTION__, pSGEntry->Chain.f64BitAddress));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1864:                Log(("%s: fLocalAddress=%d\n", __FUNCTION__, pSGEntry->Chain.fLocalAddress));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1865:                Log(("%s: u32SegmentAddressLow=%u\n", __FUNCTION__, pSGEntry->Chain.u32SegmentAddressLow));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1866:                Log(("%s: u32SegmentAddressHigh=%u\n", __FUNCTION__, pSGEntry->Chain.u32SegmentAddressHigh));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1868:                    Log(("%s: GCSegmentAddress=%RGp\n", __FUNCTION__,
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1871:                    Log(("%s: GCSegmentAddress=%RGp\n", __FUNCTION__, pSGEntry->Chain.u32SegmentAddressLow));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:1968:            Log(("%s: Reading SG entry from %RGp\n", __FUNCTION__, GCPhysSgEntryNext));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2116:        Log(("%s: u8TargetID=%d\n", __FUNCTION__, pSCSIIORequest->u8TargetID));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2117:        Log(("%s: u8Bus=%d\n", __FUNCTION__, pSCSIIORequest->u8Bus));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2118:        Log(("%s: u8ChainOffset=%d\n", __FUNCTION__, pSCSIIORequest->u8ChainOffset));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2119:        Log(("%s: u8Function=%d\n", __FUNCTION__, pSCSIIORequest->u8Function));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2120:        Log(("%s: u8CDBLength=%d\n", __FUNCTION__, pSCSIIORequest->u8CDBLength));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2121:        Log(("%s: u8SenseBufferLength=%d\n", __FUNCTION__, pSCSIIORequest->u8SenseBufferLength));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2122:        Log(("%s: u8MessageFlags=%d\n", __FUNCTION__, pSCSIIORequest->u8MessageFlags));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2123:        Log(("%s: u32MessageContext=%#x\n", __FUNCTION__, pSCSIIORequest->u32MessageContext));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2125:            Log(("%s: u8LUN[%d]=%d\n", __FUNCTION__, i, pSCSIIORequest->au8LUN[i]));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2126:        Log(("%s: u32Control=%#x\n", __FUNCTION__, pSCSIIORequest->u32Control));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2128:            Log(("%s: u8CDB[%d]=%d\n", __FUNCTION__, i, pSCSIIORequest->au8CDB[i]));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2129:        Log(("%s: u32DataLength=%#x\n", __FUNCTION__, pSCSIIORequest->u32DataLength));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2130:        Log(("%s: u32SenseBufferLowAddress=%#x\n", __FUNCTION__, pSCSIIORequest->u32SenseBufferLowAddress));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2309:        /* Log the CDB too  */
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2881:    Log(("Address form %d\n", uAddressForm));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2887:        Log(("PHY number %d\n", u8PhyNumber));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2898:        Log(("PHY index %d\n", u16Index));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2945:    Log(("Address form %d\n", uAddressForm));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2951:        Log(("Get next handle %#x\n", u16Handle));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2973:        Log(("u8TargetID=%d u8Bus=%d\n", u8TargetID, u8Bus));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:2986:        Log(("Handle %#x\n", u16Handle));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:3040:    Log(("Extended page requested:\n"));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:3041:    Log(("u8ExtPageType=%#x\n", pConfigurationReq->u8ExtPageType));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:3042:    Log(("u8ExtPageLength=%d\n", pConfigurationReq->u16ExtPageLength));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:3105:    Log(("GuestRequest:\n"));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:3106:    Log(("u8Action=%#x\n", pConfigurationReq->u8Action));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:3107:    Log(("u8PageType=%#x\n", u8PageType));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:3108:    Log(("u8PageNumber=%d\n", pConfigurationReq->u8PageNumber));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:3109:    Log(("u8PageLength=%d\n", pConfigurationReq->u8PageLength));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:3110:    Log(("u8PageVersion=%d\n", pConfigurationReq->u8PageVersion));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:3189:        Log(("Page not found\n"));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:5153:    Log(("lsilogicR3Suspend\n"));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:5164:    Log(("lsilogicR3Resume\n"));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:5187:    Log(("%s:\n", __FUNCTION__));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:5324:    Log(("lsilogicR3PowerOff\n"));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:5389:    Log(("%s: fGCEnabled=%d\n", __FUNCTION__, pThis->fGCEnabled));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:5395:    Log(("%s: fR0Enabled=%d\n", __FUNCTION__, pThis->fR0Enabled));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:5403:    Log(("%s: ReplyQueueDepth=%u\n", __FUNCTION__, pThis->cReplyQueueEntries));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:5411:    Log(("%s: RequestQueueDepth=%u\n", __FUNCTION__, pThis->cRequestQueueEntries));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:5419:    Log(("%s: ControllerType=%s\n", __FUNCTION__, pszCtrlType));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:5454:    Log(("%s: Bootable=%RTbool\n", __FUNCTION__, fBootable));
VBox/Devices/Storage/DevLsiLogicSCSI.cpp:5657:            Log(("LsiLogic: no driver attached to device %s\n", pszName));
VBox/Devices/Storage/DevBusLogic.cpp:1259:        Log(("24-bit mailbox: completion code=%u, CCB at %RGp\n", Mbx24.uCmdState, (RTGCPHYS)ADDR_TO_U32(Mbx24.aPhysAddrCCB)));
VBox/Devices/Storage/DevBusLogic.cpp:1264:        Log(("32-bit mailbox: completion code=%u, CCB at %RGp\n", MbxIn.u.in.uCompletionCode, GCPhysAddrCCB));
VBox/Devices/Storage/DevBusLogic.cpp:1295:    Log(("%s: Dump for %s mailbox:\n", __FUNCTION__, fOutgoing ? "outgoing" : "incoming"));
VBox/Devices/Storage/DevBusLogic.cpp:1296:    Log(("%s: u32PhysAddrCCB=%#x\n", __FUNCTION__, pMailbox->u32PhysAddrCCB));
VBox/Devices/Storage/DevBusLogic.cpp:1299:        Log(("%s: uActionCode=%u\n", __FUNCTION__, pMailbox->u.out.uActionCode));
VBox/Devices/Storage/DevBusLogic.cpp:1303:        Log(("%s: uHostAdapterStatus=%u\n", __FUNCTION__, pMailbox->u.in.uHostAdapterStatus));
VBox/Devices/Storage/DevBusLogic.cpp:1304:        Log(("%s: uTargetDeviceStatus=%u\n", __FUNCTION__, pMailbox->u.in.uTargetDeviceStatus));
VBox/Devices/Storage/DevBusLogic.cpp:1305:        Log(("%s: uCompletionCode=%u\n", __FUNCTION__, pMailbox->u.in.uCompletionCode));
VBox/Devices/Storage/DevBusLogic.cpp:1318:    Log(("%s: Dump for %s Command Control Block:\n", __FUNCTION__, fIs24BitCCB ? "24-bit" : "32-bit"));
VBox/Devices/Storage/DevBusLogic.cpp:1319:    Log(("%s: uOpCode=%#x\n", __FUNCTION__, pCCB->c.uOpcode));
VBox/Devices/Storage/DevBusLogic.cpp:1320:    Log(("%s: uDataDirection=%u\n", __FUNCTION__, pCCB->c.uDataDirection));
VBox/Devices/Storage/DevBusLogic.cpp:1321:    Log(("%s: cbCDB=%u\n", __FUNCTION__, pCCB->c.cbCDB));
VBox/Devices/Storage/DevBusLogic.cpp:1322:    Log(("%s: cbSenseData=%u\n", __FUNCTION__, pCCB->c.cbSenseData));
VBox/Devices/Storage/DevBusLogic.cpp:1323:    Log(("%s: uHostAdapterStatus=%u\n", __FUNCTION__, pCCB->c.uHostAdapterStatus));
VBox/Devices/Storage/DevBusLogic.cpp:1324:    Log(("%s: uDeviceStatus=%u\n", __FUNCTION__, pCCB->c.uDeviceStatus));
VBox/Devices/Storage/DevBusLogic.cpp:1327:        Log(("%s: cbData=%u\n", __FUNCTION__, LEN_TO_U32(pCCB->o.acbData)));
VBox/Devices/Storage/DevBusLogic.cpp:1328:        Log(("%s: PhysAddrData=%#x\n", __FUNCTION__, ADDR_TO_U32(pCCB->o.aPhysAddrData)));
VBox/Devices/Storage/DevBusLogic.cpp:1329:        Log(("%s: uTargetId=%u\n", __FUNCTION__, pCCB->o.uTargetId));
VBox/Devices/Storage/DevBusLogic.cpp:1330:        Log(("%s: uLogicalUnit=%u\n", __FUNCTION__, pCCB->o.uLogicalUnit));
VBox/Devices/Storage/DevBusLogic.cpp:1334:        Log(("%s: cbData=%u\n", __FUNCTION__, pCCB->n.cbData));
VBox/Devices/Storage/DevBusLogic.cpp:1335:        Log(("%s: PhysAddrData=%#x\n", __FUNCTION__, pCCB->n.u32PhysAddrData));
VBox/Devices/Storage/DevBusLogic.cpp:1336:        Log(("%s: uTargetId=%u\n", __FUNCTION__, pCCB->n.uTargetId));
VBox/Devices/Storage/DevBusLogic.cpp:1337:        Log(("%s: uLogicalUnit=%u\n", __FUNCTION__, pCCB->n.uLogicalUnit));
VBox/Devices/Storage/DevBusLogic.cpp:1338:        Log(("%s: fTagQueued=%d\n", __FUNCTION__, pCCB->n.fTagQueued));
VBox/Devices/Storage/DevBusLogic.cpp:1339:        Log(("%s: uQueueTag=%u\n", __FUNCTION__, pCCB->n.uQueueTag));
VBox/Devices/Storage/DevBusLogic.cpp:1340:        Log(("%s: fLegacyTagEnable=%u\n", __FUNCTION__, pCCB->n.fLegacyTagEnable));
VBox/Devices/Storage/DevBusLogic.cpp:1341:        Log(("%s: uLegacyQueueTag=%u\n", __FUNCTION__, pCCB->n.uLegacyQueueTag));
VBox/Devices/Storage/DevBusLogic.cpp:1342:        Log(("%s: PhysAddrSenseData=%#x\n", __FUNCTION__, pCCB->n.u32PhysAddrSenseData));
VBox/Devices/Storage/DevBusLogic.cpp:1344:    Log(("%s: uCDB[0]=%#x\n", __FUNCTION__, pCCB->c.abCDB[0]));
VBox/Devices/Storage/DevBusLogic.cpp:1346:        Log(("%s: uCDB[%d]=%u\n", __FUNCTION__, i, pCCB->c.abCDB[i]));
VBox/Devices/Storage/DevBusLogic.cpp:1452:            Log(("%s: cbBuf=%d\n", __FUNCTION__, cbBuf));
VBox/Devices/Storage/DevBusLogic.cpp:1593:                    Log(("%s: iScatterGatherEntry=%u\n", __FUNCTION__, iScatterGatherEntry));
VBox/Devices/Storage/DevBusLogic.cpp:1598:                    Log(("%s: GCPhysAddrDataBase=%RGp cbCopyThis=%zu\n", __FUNCTION__, GCPhysAddrDataBase, cbCopyThis));
VBox/Devices/Storage/DevBusLogic.cpp:1619:            Log(("Non-scattered buffer:\n"));
VBox/Devices/Storage/DevBusLogic.cpp:1620:            Log(("u32PhysAddrData=%#x\n", u32PhysAddrCCB));
VBox/Devices/Storage/DevBusLogic.cpp:1621:            Log(("cbData=%u\n", cbDataCCB));
VBox/Devices/Storage/DevBusLogic.cpp:1622:            Log(("GCPhysAddrDataBase=0x%RGp\n", GCPhysAddrDataBase));
VBox/Devices/Storage/DevBusLogic.cpp:1788:            Log(("ISA I/O for PCI (code %x)\n", pBusLogic->aCommandBuffer[0]));
VBox/Devices/Storage/DevBusLogic.cpp:1831:                Log(("Set HA options: %u bytes follow\n", pBusLogic->cbCommandParametersLeft));
VBox/Devices/Storage/DevBusLogic.cpp:1836:                Log(("Set HA options: received %u bytes\n", pBusLogic->aCommandBuffer[0]));
VBox/Devices/Storage/DevBusLogic.cpp:1850:                Log(("Execute SCSI cmd: %u more bytes follow\n", pBusLogic->cbCommandParametersLeft));
VBox/Devices/Storage/DevBusLogic.cpp:1857:                Log(("Execute SCSI cmd: received %u bytes\n", pBusLogic->aCommandBuffer[0]));
VBox/Devices/Storage/DevBusLogic.cpp:1860:                Log(("Addr %08X, cbData %08X, cbCDB=%u\n", pCmd->u32PhysAddrData, pCmd->cbData, pCmd->cbCDB));
VBox/Devices/Storage/DevBusLogic.cpp:1874:                Log(("Requested too much adapter model number data (%u)!\n", pBusLogic->aCommandBuffer[0]));
VBox/Devices/Storage/DevBusLogic.cpp:1980:                Log(("cMailboxes=%u (24-bit mode), fail!\n", pBusLogic->cMailbox));
VBox/Devices/Storage/DevBusLogic.cpp:1990:            Log(("GCPhysAddrMailboxOutgoingBase=%RGp\n", pBusLogic->GCPhysAddrMailboxOutgoingBase));
VBox/Devices/Storage/DevBusLogic.cpp:1991:            Log(("GCPhysAddrMailboxIncomingBase=%RGp\n", pBusLogic->GCPhysAddrMailboxIncomingBase));
VBox/Devices/Storage/DevBusLogic.cpp:1992:            Log(("cMailboxes=%u (24-bit mode)\n", pBusLogic->cMailbox));
VBox/Devices/Storage/DevBusLogic.cpp:2005:                Log(("cMailboxes=%u (32-bit mode), fail!\n", pBusLogic->cMailbox));
VBox/Devices/Storage/DevBusLogic.cpp:2015:            Log(("GCPhysAddrMailboxOutgoingBase=%RGp\n", pBusLogic->GCPhysAddrMailboxOutgoingBase));
VBox/Devices/Storage/DevBusLogic.cpp:2016:            Log(("GCPhysAddrMailboxIncomingBase=%RGp\n", pBusLogic->GCPhysAddrMailboxIncomingBase));
VBox/Devices/Storage/DevBusLogic.cpp:2017:            Log(("cMailboxes=%u (32-bit mode)\n", pBusLogic->cMailbox));
VBox/Devices/Storage/DevBusLogic.cpp:2089:                Log(("Requested too much synch period inquiry (%u)!\n", pBusLogic->aCommandBuffer[0]));
VBox/Devices/Storage/DevBusLogic.cpp:2121:            Log(("Enable OMBR: %u\n", uEnable));
VBox/Devices/Storage/DevBusLogic.cpp:2136:            Log(("Bus-on time: %d\n", pBusLogic->aCommandBuffer[0]));
VBox/Devices/Storage/DevBusLogic.cpp:2143:            Log(("Bus-off time: %d\n", pBusLogic->aCommandBuffer[0]));
VBox/Devices/Storage/DevBusLogic.cpp:2150:            Log(("Bus transfer rate: %02X\n", pBusLogic->aCommandBuffer[0]));
VBox/Devices/Storage/DevBusLogic.cpp:2163:            Log(("Write busmaster FIFO at: %04X\n", ADDR_TO_U32(addr)));
VBox/Devices/Storage/DevBusLogic.cpp:2178:            Log(("Read busmaster FIFO at: %04X\n", ADDR_TO_U32(addr)));
VBox/Devices/Storage/DevBusLogic.cpp:2191:            Log(("Command %#x not valid for this adapter\n", pBusLogic->uOperationCode));
VBox/Devices/Storage/DevBusLogic.cpp:2199:    Log(("uOperationCode=%#x, cbReplyParametersLeft=%d\n", pBusLogic->uOperationCode, pBusLogic->cbReplyParametersLeft));
VBox/Devices/Storage/DevBusLogic.cpp:2337:            Log(("%u incoming mailboxes were ready when this interrupt was cleared\n", cMailboxesReady));
VBox/Devices/Storage/DevBusLogic.cpp:2808:                Log(("ISA I/O base: %x\n", uNewBase));
VBox/Devices/Storage/DevBusLogic.cpp:2813:                Log(("Disabling ISA I/O ports.\n"));
VBox/Devices/Storage/DevBusLogic.cpp:3263:        Log(("No loaded mailbox left\n"));
VBox/Devices/Storage/DevBusLogic.cpp:3875:    Log(("buslogicR3Suspend\n"));
VBox/Devices/Storage/DevBusLogic.cpp:3895:    Log(("%s:\n", __FUNCTION__));
VBox/Devices/Storage/DevBusLogic.cpp:4032:    Log(("buslogicR3PowerOff\n"));
VBox/Devices/Storage/DevBusLogic.cpp:4109:    Log(("%s: fGCEnabled=%d\n", __FUNCTION__, pThis->fGCEnabled));
VBox/Devices/Storage/DevBusLogic.cpp:4115:    Log(("%s: fR0Enabled=%d\n", __FUNCTION__, pThis->fR0Enabled));
VBox/Devices/Storage/DevBusLogic.cpp:4120:    Log(("%s: fBootable=%RTbool\n", __FUNCTION__, fBootable));
VBox/Devices/Storage/DevBusLogic.cpp:4130:    Log(("%s: ISACompat=%s\n", __FUNCTION__, achISACompat));
VBox/Devices/Storage/DevBusLogic.cpp:4261:            Log(("BusLogic: no driver attached to device %s\n", szName));
VBox/Devices/Storage/Debug.cpp:904: * Don't allocate the string as we use this function in Log() statements.
VBox/Devices/Storage/Debug.cpp:918: * Don't allocate the string as we use this function in Log() statements.
VBox/Devices/Storage/Debug.cpp:928: * Don't allocate the string as we use this function in Log() statements.
VBox/Devices/Storage/Debug.cpp:940: * Don't allocate the string as we use this function in Log() statements.
VBox/Devices/Storage/Debug.cpp:958: * Log the write parameters mode page into a given buffer.
VBox/Devices/Storage/Debug.cpp:1060: * Log a mode page in a human readable form.
VBox/Devices/Storage/Debug.cpp:1112: * Log a cue sheet in a human readable form.
VBox/Devices/Storage/DrvSCSI.cpp:889:    Log(("Dump for pReq=%#p Command: %s\n", pReq, SCSICmdText(pbCdb[0])));
VBox/Devices/Storage/DrvSCSI.cpp:890:    Log(("cbCdb=%u\n", cbCdb));
VBox/Devices/Storage/DrvSCSI.cpp:892:        Log(("pbCdb[%u]=%#x\n", i, pbCdb[i]));
VBox/Devices/Storage/DrvSCSI.cpp:893:    Log(("cbBuf=%zu\n", cbBuf));
VBox/Devices/Storage/DrvHostBase-solaris.cpp:325:            Log(("DVD: solarisCheckUserAuth failed. Permission denied!\n"));
VBox/Devices/Storage/ATAPIPassthrough.cpp:208:        default: /* Reserved, invalid mode. Log and leave default sector size. */
VBox/Devices/Storage/DrvHostBase-linux.cpp:178:            Log(("DrvHostFloppy: FDFLUSH ioctl(%s) failed, errno=%d rc=%Rrc\n", pThis->pszDevice, errno, rc));
VBox/Devices/Storage/DrvHostBase-linux.cpp:187:            Log(("DrvHostFloppy: FDGETDRVSTAT ioctl(%s) failed, errno=%d rc=%Rrc\n", pThis->pszDevice, errno, rc));
VBox/Devices/Storage/DevATA.cpp:985:        Log(("%s: Ctl#%d: ignored command %#04x, controller state %d\n",
VBox/Devices/Storage/DevATA.cpp:1240:    Log(("%s: code=%#x\n", __FUNCTION__, uErrorCode));
VBox/Devices/Storage/DevATA.cpp:1706:    Log(("%s: %d sectors at LBA %d\n", __FUNCTION__, cSectors, iLBA));
VBox/Devices/Storage/DevATA.cpp:1744:    Log(("%s: %d sectors at LBA %d\n", __FUNCTION__, cSectors, iLBA));
VBox/Devices/Storage/DevATA.cpp:1789:    Log(("%s: sense=%#x (%s) asc=%#x ascq=%#x (%s)\n", __FUNCTION__, pabATAPISense[2] & 0x0f, SCSISenseText(pabATAPISense[2] & 0x0f),
VBox/Devices/Storage/DevATA.cpp:1849:    Log(("%s: %d sectors at LBA %d\n", __FUNCTION__, cSectors, s->iATAPILBA));
VBox/Devices/Storage/DevATA.cpp:3667:            Log(("%s: sense=%#x (%s) asc=%#x ascq=%#x (%s)\n", __FUNCTION__, s->abATAPISense[2] & 0x0f, SCSISenseText(s->abATAPISense[2] & 0x0f),
VBox/Devices/Storage/DevATA.cpp:3694:    Log(("%s: LUN#%d DMA=%d CMD=%#04x \"%s\"\n", __FUNCTION__, s->iLUN, s->fDMA, pbPacket[0], SCSICmdText(pbPacket[0])));
VBox/Devices/Storage/DevATA.cpp:3696:    Log(("%s: LUN#%d DMA=%d CMD=%#04x\n", __FUNCTION__, s->iLUN, s->fDMA, pbPacket[0]));
VBox/Devices/Storage/DevATA.cpp:3762:    Log(("%s: changing LUN#%d\n", __FUNCTION__, pIf->iLUN));
VBox/Devices/Storage/DevATA.cpp:3793:    Log(("%s:\n", __FUNCTION__));
VBox/Devices/Storage/DevATA.cpp:3932:    Log(("%s: LUN#%d CMD=%#04x \"%s\"\n", __FUNCTION__, s->iLUN, cmd, ATACmdText(cmd)));
VBox/Devices/Storage/DevATA.cpp:3934:    Log(("%s: LUN#%d CMD=%#04x\n", __FUNCTION__, s->iLUN, cmd));
VBox/Devices/Storage/DevATA.cpp:4580:        Log(("%s: deasserting RESET\n", __FUNCTION__));
VBox/Devices/Storage/DevATA.cpp:4755:        Log(("%s: cbCopy=%#x offStart=%#x cbIOBuffer=%#x offNext=%#x (iIOBufferPIODataEnd=%#x)\n",
VBox/Devices/Storage/DevATA.cpp:4864:                Log(("%s: Unexpected\n",__FUNCTION__));
VBox/Devices/Storage/DevATA.cpp:4941:                Log(("%s: Unexpected\n",__FUNCTION__));
VBox/Devices/Storage/DevATA.cpp:5625:                    Log(("%s: delay IRQ hack\n", __FUNCTION__));
VBox/Devices/Storage/DevATA.cpp:5785:            Log(("%s: Ctl#%d: LUN#%d finished I/O transaction in %d microseconds\n",
VBox/Devices/Storage/DevATA.cpp:6178:            Log(("ataIOPortWrite1: suspect write to port %x val=%x size=%d\n", Port, u32, cb));
VBox/Devices/Storage/DevATA.cpp:6218:            Log(("ataIOPortRead1: suspect read from port %x size=%d\n", Port, cb));
VBox/Devices/Storage/DevATA.cpp:6548:    Log(("%s:\n", __FUNCTION__));
VBox/Devices/Storage/DevATA.cpp:6979:    Log(("%s:\n", __FUNCTION__));
VBox/Devices/Storage/DevATA.cpp:6992:    Log(("%s:\n", __FUNCTION__));
VBox/Devices/Storage/DevATA.cpp:7155:    Log(("ataR3Destruct\n"));
VBox/Devices/Storage/DevATA.cpp:7305:    Log(("%s: fRCEnabled=%d\n", __FUNCTION__, fRCEnabled));
VBox/Devices/Storage/DevATA.cpp:7311:    Log(("%s: fR0Enabled=%d\n", __FUNCTION__, fR0Enabled));
VBox/Devices/Storage/DevATA.cpp:7317:    Log(("%s: DelayIRQMillies=%d\n", __FUNCTION__, DelayIRQMillies));
VBox/Devices/Storage/DevATA.cpp:7603:        Log(("%s: controller %d AIO thread id %#x; sem %p susp_sem %p\n", __FUNCTION__, i, pCtl->AsyncIOThread, pCtl->hAsyncIOSem, pCtl->SuspendIOSem));
VBox/GuestHost/SharedClipboard/clipboard-helper.cpp:286:        Log(("vboxClipboardDibToBmp: invalid or unsupported bitmap data.\n"));
VBox/GuestHost/SharedClipboard/clipboard-helper.cpp:295:        Log(("vboxClipboardDibToBmp: invalid bitmap data.\n"));
VBox/GuestHost/SharedClipboard/clipboard-helper.cpp:302:        Log(("writeToPasteboard: cannot allocate memory for bitmap.\n"));
VBox/GuestHost/SharedClipboard/clipboard-helper.cpp:328:        Log(("vboxClipboardBmpGetDib: invalid bitmap data.\n"));
VBox/GuestHost/OpenGL/util/error.c:100:    /* Log last error on windows. */
VBox/GuestHost/OpenGL/util/error.c:175:        Log(("OpenGL Debug: %N\n", pszFormat, &va));
VBox/GuestHost/OpenGL/state_tracker/dump.cpp:611:    crDmpStrF(pRec->pDumper, "Log===%d===", hwid);
VBox/GuestHost/OpenGL/state_tracker/dump.cpp:623:    crDmpStrF(pRec->pDumper, "End Log======");
VBox/Installer/win/NLS/en_US.wxl:290:    <String Id="Error1303">The installer has insufficient privileges to access this directory: [2]. The installation cannot continue. Log on as administrator or contact your system administrator.</String>
VBox/Installer/win/NLS/en_US.wxl:408:    <String Id="Error1925">You do not have sufficient privileges to complete this installation for all users of the machine. Log on as administrator and then retry this installation.</String>
VBox/Installer/win/NLS/it_IT.wxl:224:    <String Id="Error1303">The installer has insufficient privileges to access this directory: [2]. The installation cannot continue. Log on as administrator or contact your system administrator.</String>
VBox/Installer/win/NLS/it_IT.wxl:342:    <String Id="Error1925">You do not have sufficient privileges to complete this installation for all users of the machine. Log on as administrator and then retry this installation.</String>
VBox/VMM/VMMR3/PDMUsb.cpp:162:    Log(("PDM: Registered USB hub %p/%s\n", pDrvIns, pDrvIns->pReg->szName));
VBox/VMM/VMMR3/PDMUsb.cpp:191:            Log(("PDM: Calling VBoxUsbRegister (%p) of %s (%s)\n", pfnVBoxUsbRegister, pszName, pszFilename));
VBox/VMM/VMMR3/PDMUsb.cpp:194:                Log(("PDM: Successfully loaded device module %s (%s).\n", pszName, pszFilename));
VBox/VMM/VMMR3/PDMUsb.cpp:267:        Log(("PDM: Registered USB device '%s'\n", pReg->szName));
VBox/VMM/VMMR3/PDMUsb.cpp:655:    Log(("PDM: Constructing USB device '%s' instance %d...\n", pUsbIns->pReg->szName, pUsbIns->iInstance));
VBox/VMM/VMMR3/PDMUsb.cpp:662:        Log(("PDM: Attaching it...\n"));
VBox/VMM/VMMR3/PDMUsb.cpp:674:            Log(("PDM: Successfully attached USB device '%s' instance %d to hub %p\n",
VBox/VMM/VMMR3/PDMUsb.cpp:712:        Log(("PDM: No USB hubs, skipping USB device instantiation.\n"));
VBox/VMM/VMMR3/PDMUsb.cpp:732:        Log(("PDM: No USB devices were configured!\n"));
VBox/VMM/VMMR3/PDMUsb.cpp:878:            Log(("pdmR3UsbFindHub failed %Rrc\n", rc));
VBox/VMM/VMMR3/PDMUsb.cpp:956:        Log(("pdmR3UsbFindHub: failed %Rrc\n", rc));
VBox/VMM/VMMR3/PDMUsb.cpp:1026:        Log(("pdmR3UsbFindHub: failed %Rrc\n", rc));
VBox/VMM/VMMR3/PDMUsb.cpp:1103:        Log(("PDM: Destructing USB device '%s' instance %d...\n", pUsbIns->pReg->szName, pUsbIns->iInstance));
VBox/VMM/VMMR3/PDMUsb.cpp:1589:        Log(("pdmR3UsbHlp_DriverAttach: Registered LUN#%d '%s' with device '%s'/%d.\n",
VBox/VMM/VMMR3/TRPM.cpp:731:            Log(("TRPMR3Relocate: iGate=%2X Handler %RRv -> %RRv\n", iTrap, pVM->trpm.s.aGuestTrapHandler[iTrap], pVM->trpm.s.aGuestTrapHandler[iTrap] + offDelta));
VBox/VMM/VMMR3/TRPM.cpp:740:            Log(("TRPMR3Relocate: *iGate=%2X Handler %RGv -> %RGv\n", iTrap, pHandler, pHandler + offDelta));
VBox/VMM/VMMR3/TRPM.cpp:1085:        Log(("TRPMR3SyncIDT: Clear all trap handlers.\n"));
VBox/VMM/VMMR3/TRPM.cpp:1101:        Log(("No IDT entries...\n"));
VBox/VMM/VMMR3/TRPM.cpp:1112:        Log(("TRPMR3UpdateFromCPUM: Guest's IDT is changed to pIdt=%08X cbIdt=%08X\n", IDTR.pIdt, IDTR.cbIdt));
VBox/VMM/VMMR3/TRPM.cpp:1318:        Log(("TRPMR3SetGuestTrapHandler: clear handler %x\n", iTrap));
VBox/VMM/VMMR3/TRPM.cpp:1386:                Log(("Setting trap handler %x to %08X (direct)\n", iTrap, pHandler));
VBox/VMM/VMMR3/TRPM.cpp:1401:        Log(("Setting trap handler %x to %08X\n", iTrap, pHandler));
VBox/VMM/VMMR3/TRPM.cpp:1517:    Log(("TRPMR3InjectEvent: CPU%d u8Interrupt=%d (%#x) rc=%Rrc\n", pVCpu->idCpu, u8Interrupt, u8Interrupt, rc));
VBox/VMM/VMMR3/TRPM.cpp:1531:            Log(("TRPMR3InjectEvent: recheck gate %x -> valid=%d\n", u8Interrupt, TRPMR3GetGuestTrapHandler(pVM, u8Interrupt) != TRPM_INVALID_HANDLER));
VBox/VMM/VMMR3/TRPM.cpp:1576:    Log(("TRPMR3InjectEvent: u8Interrupt=%d (%#x) rc=%Rrc\n", u8Interrupt, u8Interrupt, rc));
VBox/VMM/VMMR3/PDMLdr.cpp:599:                            Log(("PDM: RC Module at %RRv %s (%s)\n", (RTRCPTR)pModule->ImageBase, pszName, pszFilename));
VBox/VMM/VMMR3/PDMLdr.cpp:719:        Log(("PDM: R0 Module at %RHv %s (%s)\n", (RTR0PTR)pModule->ImageBase, pszName, pszFilename));
VBox/VMM/VMMR3/PDMAsyncCompletionFile.cpp:119:        Log(("Freeing task %p because all caches are full\n", pTask));
VBox/VMM/VMMR3/PDMAsyncCompletionFile.cpp:488:                            Log(("PDMAC: Successfully created new file AIO Mgr {%s}\n", RTThreadGetName(pAioMgrNew->Thread)));
VBox/VMM/VMMR3/DBGFBp.cpp:521:            Log(("DBGF: Set breakpoint at %RGv (Phys %RGp) cEnabledInt3Breakpoints=%u\n", pBp->u.Int3.GCPtr,
VBox/VMM/VMMR3/DBGFBp.cpp:557:            Log(("DBGF: Removed breakpoint at %RGv (Phys %RGp) cEnabledInt3Breakpoints=%u\n", pBp->u.Int3.GCPtr,
VBox/VMM/VMMR3/PGMMap.cpp:501:    Log(("PGMR3MappingsSize: return %d (%#x) bytes\n", cb, cb));
VBox/VMM/VMMR3/PGMMap.cpp:516:    Log(("PGMR3MappingsFix: GCPtrBase=%RGv cb=%#x (fMappingsFixed=%RTbool MappingEnabled=%RTbool)\n",
VBox/VMM/VMMR3/PGMMap.cpp:701:    Log(("PGMR3MappingsUnfix: fMappingsFixed=%RTbool MappingsEnabled=%RTbool\n", pVM->pgm.s.fMappingsFixed, pgmMapAreMappingsEnabled(pVM)));
VBox/VMM/VMMR3/PGMMap.cpp:1050:    Log(("PGM: Relocating %s from %RGv to %RGv\n", pMapping->pszDesc, GCPtrOldMapping, GCPtrNewMapping));
VBox/VMM/VMMR3/TM.cpp:269:    /* Log GIP info that may come in handy. */
VBox/VMM/VMMR3/TM.cpp:641:    Log(("TM: Created timer %p firing every %d milliseconds\n", pVM->tm.s.pTimer, u32Millies));
VBox/VMM/VMMR3/TM.cpp:1528:        Log(("TM: Created device timer %p clock %d callback %p '%s'\n", (*ppTimer), enmClock, pfnCallback, pszDesc));
VBox/VMM/VMMR3/TM.cpp:1574:        Log(("TM: Created USB device timer %p clock %d callback %p '%s'\n", (*ppTimer), enmClock, pfnCallback, pszDesc));
VBox/VMM/VMMR3/TM.cpp:1610:        Log(("TM: Created device timer %p clock %d callback %p '%s'\n", (*ppTimer), enmClock, pfnCallback, pszDesc));
VBox/VMM/VMMR3/TM.cpp:1642:        Log(("TM: Created internal timer %p clock %d callback %p '%s'\n", pTimer, enmClock, pfnCallback, pszDesc));
VBox/VMM/VMMR3/TM.cpp:1672:        Log(("TM: Created external timer %p clock %d callback %p '%s'\n", pTimer, enmClock, pfnCallback, pszDesc));
VBox/VMM/VMMR3/TM.cpp:2035:        Log(("tmR3TimerCallback: timer event still pending!!\n"));
VBox/VMM/VMMR3/TM.cpp:2699:        Log(("u8State=%d u64Expire=%llu\n", u8State, u64Expire));
VBox/VMM/VMMR3/TM.cpp:2707:        Log(("u8State=%d\n", u8State));
VBox/VMM/VMMR3/TM.cpp:2846:     * Log details if the time changed radically (also triggers on first call).
VBox/VMM/VMMR3/PGMShw.h:211:    Log(("Enter nested shadow paging mode: root %RHv phys %RHp\n", pVCpu->pgm.s.pShwPageCR3R3, pVCpu->pgm.s.CTX_SUFF(pShwPageCR3)->Core.Key));
VBox/VMM/VMMR3/PGMShw.h:265:        Log(("Leave nested shadow paging mode\n"));
VBox/VMM/VMMR3/PGMPool.cpp:514:            Log(("We're out of memory!! i=%d fCanUseHighMemory=%RTbool\n", i, fCanUseHighMemory));
VBox/VMM/VMMR3/PGMPool.cpp:565:    Log(("pgmR3PoolClearAllRendezvous: cUsedPages=%d fpvFlushRemTlb=%RTbool\n", pPool->cUsedPages, !!fpvFlushRemTlb));
VBox/VMM/VMMR3/PGMPool.cpp:661:                                                Log(("ptIndex = %d first present = %d\n", ptIndex, pPage->iFirstPresent));
VBox/VMM/VMMR3/PGMPool.cpp:759:        Log(("Reactivate dirty page %RGp\n", pPage->GCPhys));
VBox/VMM/VMMR3/DBGF.cpp:543:        Log(("DBGFR3VMMEventSrc: enmEvent=%d - debugger not attached\n", enmEvent));
VBox/VMM/VMMR3/DBGF.cpp:1107:        Log(("dbgR3Attach: Debugger already attached\n"));
VBox/VMM/VMMR3/EM.cpp:150:    Log(("EMR3Init: fRecompileUser=%RTbool fRecompileSupervisor=%RTbool fRawRing1Enabled=%RTbool fIemExecutesAll=%RTbool fGuruOnTripleFault=%RTbool\n",
VBox/VMM/VMMR3/EM.cpp:489:        Log(("EMR3ResetCpu: Cpu#%u %s -> %s\n", pVCpu->idCpu, emR3GetStateName(pVCpu->em.s.enmState), pVCpu->idCpu == 0 ? "EMSTATE_NONE" : "EMSTATE_WAIT_SIPI"));
VBox/VMM/VMMR3/EM.cpp:502:    Log(("EMR3Reset: \n"));
VBox/VMM/VMMR3/EM.cpp:670:        Log(("emR3SetExecutionPolicy: fRecompileUser=%RTbool fRecompileSupervisor=%RTbool fIemExecutesAll=%RTbool\n",
VBox/VMM/VMMR3/EM.cpp:809:        Log(("emR3Debug: rc=%Rrc\n", VBOXSTRICTRC_VAL(rc)));
VBox/VMM/VMMR3/EM.cpp:1077:        Log(("EMV86: %04X:%08X IF=%d\n", pCtx->cs.Sel, pCtx->eip, pCtx->eflags.Bits.u1IF));
VBox/VMM/VMMR3/EM.cpp:1079:        Log(("EMR%d: %04X:%08X ESP=%08X IF=%d CR0=%x eflags=%x\n", cpl, pCtx->cs.Sel, pCtx->eip, pCtx->esp, pCtx->eflags.Bits.u1IF, (uint32_t)pCtx->cr0, pCtx->eflags.u));
VBox/VMM/VMMR3/EM.cpp:1280:    Log(("Single step BEGIN:\n"));
VBox/VMM/VMMR3/EM.cpp:1289:    Log(("Single step END:\n"));
VBox/VMM/VMMR3/EM.cpp:1328:            Log(("emR3ExecuteIemThenRem: returns %Rrc after %u instructions\n",
VBox/VMM/VMMR3/EM.cpp:1354:    Log(("emR3ExecuteIemThenRem: -> EMSTATE_REM (after %u instructions)\n", pVCpu->em.s.cIemThenRemInstructions));
VBox/VMM/VMMR3/EM.cpp:1570:        Log(("Raw mode refused -> TR=0\n"));
VBox/VMM/VMMR3/EM.cpp:1761:            Log(("Forced action VMCPU_FF_CSAM_SCAN_PAGE\n"));
VBox/VMM/VMMR3/EM.cpp:1943:                Log(("Clearing VMCPU_FF_INHIBIT_INTERRUPTS at %RGv - successor %RGv\n", (RTGCPTR)CPUMGetGuestRIP(pVCpu), EMGetInhibitInterruptsPC(pVCpu)));
VBox/VMM/VMMR3/EM.cpp:1947:                Log(("Leaving VMCPU_FF_INHIBIT_INTERRUPTS set at %RGv\n", (RTGCPTR)CPUMGetGuestRIP(pVCpu)));
VBox/VMM/VMMR3/EM.cpp:1997:                                Log(("EM: SVM Nested-guest INTR #VMEXIT failed! rc=%Rrc\n", VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMR3/EM.cpp:2037:                                    Log(("EM: SVM Nested-guest VINTR #VMEXIT failed! rc=%Rrc\n", VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMR3/EM.cpp:2051:                                Log(("EM: Asserting nested-guest virt. hardware intr: %#x\n", uNstGstVector));
VBox/VMM/VMMR3/EM.cpp:2160:            Log(("emR3ForcedActions: returns VINF_EM_SUSPEND\n"));
VBox/VMM/VMMR3/EM.cpp:2229:    Log(("EMR3ExecuteVM: pVM=%p enmVMState=%d (%s)  enmState=%d (%s) enmPrevState=%d (%s) fForceRAW=%RTbool\n",
VBox/VMM/VMMR3/EM.cpp:2266:        Log(("EMR3ExecuteVM: enmState=%s\n", emR3GetStateName(pVCpu->em.s.enmState)));
VBox/VMM/VMMR3/EM.cpp:2443:                    Log(("EMR3ExecuteVM returns VINF_EM_TERMINATE (%d -> %d)\n", enmOldState, EMSTATE_TERMINATING));
VBox/VMM/VMMR3/EM.cpp:2520:                        Log(("EMR3ExecuteVM: VINF_EM_TRIPLE_FAULT: CPU reset...\n"));
VBox/VMM/VMMR3/EM.cpp:2529:                    Log(("EMR3ExecuteVM: %Rrc: %d -> %d (EMSTATE_GURU_MEDITATION)\n", rc, enmOldState, EMSTATE_GURU_MEDITATION));
VBox/VMM/VMMR3/EM.cpp:2546:                    Log(("EMR3ExecuteVM: %Rrc: %d -> %d (EMSTATE_GURU_MEDITATION)\n", rc, enmOldState, EMSTATE_GURU_MEDITATION));
VBox/VMM/VMMR3/EM.cpp:2689:                                Log(("EMR3ExecuteVM: Triggering reschedule on pending IRQ after MWAIT\n"));
VBox/VMM/VMMR3/EM.cpp:2702:                            Log(("EMR3ExecuteVM: Triggering reschedule on pending NMI/SMI/UNHALT after HLT\n"));
VBox/VMM/VMMR3/EM.cpp:2717:                    Log(("EMR3ExecuteVM: actually returns %Rrc (state %s / %s)\n", rc, emR3GetStateName(pVCpu->em.s.enmState), emR3GetStateName(enmOldState)));
VBox/VMM/VMMR3/EM.cpp:2754:                        Log(("EMR3ExecuteVM: actually returns %Rrc (state %s / %s)\n", rc, emR3GetStateName(pVCpu->em.s.enmState), emR3GetStateName(enmOldState)));
VBox/VMM/VMMR3/EM.cpp:2773:                    Log(("EMR3ExecuteVM: actually returns %Rrc (state %s / %s)\n", rc, emR3GetStateName(pVCpu->em.s.enmState), emR3GetStateName(enmOldState)));
VBox/VMM/VMMR3/EM.cpp:2787:                    Log(("EMR3ExecuteVM: actually returns %Rrc (state %s / %s)\n", rc, emR3GetStateName(pVCpu->em.s.enmState), emR3GetStateName(enmOldState)));
VBox/VMM/VMMR3/EM.cpp:2797:        Log(("EMR3ExecuteVM: returns %Rrc because of longjmp / fatal error; (state %s / %s)\n", rc, emR3GetStateName(pVCpu->em.s.enmState), emR3GetStateName(pVCpu->em.s.enmPrevState)));
VBox/VMM/VMMR3/PDMAsyncCompletionFileNormal.cpp:281:                    Log(("Keeping endpoint %#p{%s} with %u reqs/s\n", pCurr->Core.pszUri, pCurr->AioMgr.cReqsPerSec));
VBox/VMM/VMMR3/PDMAsyncCompletionFileNormal.cpp:288:                    Log(("Moving endpoint %#p{%s} with %u reqs/s to other manager\n", pCurr, pCurr->Core.pszUri, pCurr->AioMgr.cReqsPerSec));
VBox/VMM/VMMR3/PDMAsyncCompletionFileNormal.cpp:319:        Log(("AIOMgr: Load balancing would not improve anything\n"));
VBox/VMM/VMMR3/VMMSwitcher.cpp:1132:        Log(("VMMR3SelectSwitcher: enmSwitcher %d -> %d %s\n", pVM->vmm.s.enmSwitcher, enmSwitcher, pSwitcher->pszDesc));
VBox/VMM/VMMR3/PGMPhys.cpp:953:    Log(("pgmR3PhysChangeMemBalloonRendezvous: %s %x pages\n", (fInflate) ? "inflate" : "deflate", cPages));
VBox/VMM/VMMR3/PGMPhys.cpp:977:                Log(("pgmR3PhysChangeMemBalloonRendezvous: invalid physical page %RGp pPage->u3Type=%d\n", paPhysPage[i], pPage ? PGM_PAGE_GET_TYPE(pPage) : 0));
VBox/VMM/VMMR3/PGMPhys.cpp:1399:    Log(("PGMR3QueryVMMMemoryStats: all=%llx free=%llx ballooned=%llx shared=%llx\n",
VBox/VMM/VMMR3/PGMPhys.cpp:1449:    Log(("PGMR3QueryMemoryStats: all=%x private=%x reused=%x zero=%x\n", pVM->pgm.s.cAllPages, pVM->pgm.s.cPrivatePages, pVM->pgm.s.cReusedSharedPages, pVM->pgm.s.cZeroPages));
VBox/VMM/VMMR3/PGMPhys.cpp:1642:    Log(("PGMR3PhysRegisterRam: GCPhys=%RGp cb=%RGp pszDesc=%s\n", GCPhys, cb, pszDesc));
VBox/VMM/VMMR3/PGMPhys.cpp:1774:    Log(("pgmR3PhysRamPreAllocate: enter\n"));
VBox/VMM/VMMR3/PGMPhys.cpp:1825:    Log(("pgmR3PhysRamPreAllocate: returns VINF_SUCCESS\n"));
VBox/VMM/VMMR3/PGMPhys.cpp:2263:        Log(("PGMR3PhysMMIORegister: Adding ad hoc MMIO range for %RGp-%RGp %s\n", GCPhys, GCPhysLast, pszDesc));
VBox/VMM/VMMR3/PGMPhys.cpp:2378:                    Log(("PGMR3PhysMMIODeregister: Freeing ad hoc MMIO range for %RGp-%RGp %s\n",
VBox/VMM/VMMR3/PGMPhys.cpp:3336:    Log(("PGMR3PhysMMIOExMap: %RGp-%RGp fRamExists=%RTbool %s\n", GCPhys, GCPhysLast, fRamExists, pFirstMmio->RamRange.pszDesc));
VBox/VMM/VMMR3/PGMPhys.cpp:3562:    Log(("PGMR3PhysMMIOExUnmap: %RGp-%RGp %s\n",
VBox/VMM/VMMR3/PGMPhys.cpp:3734:                Log(("PGMR3PhysMMIOExReduce: %s changes from %RGp bytes (%RGp) to %RGp bytes.\n",
VBox/VMM/VMMR3/PGMPhys.cpp:4264:    Log(("PGMR3PhysRomRegister: pDevIns=%p GCPhys=%RGp(-%RGp) cb=%RGp pvBinary=%p cbBinary=%#x fFlags=%#x pszDesc=%s\n",
VBox/VMM/VMMR3/PGMPhys.cpp:5085:    Log(("PGMR3PhysAllocateHandyPages: %d -> %d\n", iClear, RT_ELEMENTS(pVM->pgm.s.aHandyPages)));
VBox/VMM/VMMR3/PATM.cpp:169:    Log(("PATMR3Init: Patch record size %d\n", sizeof(PATCHINFO)));
VBox/VMM/VMMR3/PATM.cpp:187:        Log(("MMHyperAlloc failed with %Rrc\n", rc));
VBox/VMM/VMMR3/PATM.cpp:335:    Log(("g_patmCallRecord.cbFunction           %u\n", g_patmCallRecord.cbFunction));
VBox/VMM/VMMR3/PATM.cpp:336:    Log(("g_patmCallIndirectRecord.cbFunction   %u\n", g_patmCallIndirectRecord.cbFunction));
VBox/VMM/VMMR3/PATM.cpp:337:    Log(("g_patmRetRecord.cbFunction            %u\n", g_patmRetRecord.cbFunction));
VBox/VMM/VMMR3/PATM.cpp:338:    Log(("g_patmJumpIndirectRecord.cbFunction   %u\n", g_patmJumpIndirectRecord.cbFunction));
VBox/VMM/VMMR3/PATM.cpp:339:    Log(("g_patmPopf32Record.cbFunction         %u\n", g_patmPopf32Record.cbFunction));
VBox/VMM/VMMR3/PATM.cpp:340:    Log(("g_patmIretRecord.cbFunction           %u\n", g_patmIretRecord.cbFunction));
VBox/VMM/VMMR3/PATM.cpp:341:    Log(("g_patmStiRecord.cbFunction            %u\n", g_patmStiRecord.cbFunction));
VBox/VMM/VMMR3/PATM.cpp:342:    Log(("g_patmCheckIFRecord.cbFunction        %u\n", g_patmCheckIFRecord.cbFunction));
VBox/VMM/VMMR3/PATM.cpp:428:    Log(("Patch memory allocated at %p - %RRv\n", pVM->patm.s.pPatchMemHC, pVM->patm.s.pPatchMemGC));
VBox/VMM/VMMR3/PATM.cpp:484:        Log(("Out of memory!!!!\n"));
VBox/VMM/VMMR3/PATM.cpp:522:    Log(("PATMR3Relocate from %RRv to %RRv - delta %08X\n", pVM->patm.s.pGCStateGC, GCPtrNew, offDelta));
VBox/VMM/VMMR3/PATM.cpp:589:    Log(("PATMR3Reset\n"));
VBox/VMM/VMMR3/PATM.cpp:760:    Log(("%s%s %s", pszComment1, pszComment2, szOutput));
VBox/VMM/VMMR3/PATM.cpp:793:    Log(("Nr of fixups %d\n", pPatch->patch.nrFixups));
VBox/VMM/VMMR3/PATM.cpp:813:            Log(("Absolute patch template fixup type %#x at %RHv -> %RHv at %RRv\n", pRec->pSource, *(RTRCUINTPTR *)pRec->pRelocPos, *(RTRCINTPTR*)pRec->pRelocPos + delta, pRec->pRelocPos));
VBox/VMM/VMMR3/PATM.cpp:818:            Log(("Absolute fixup at %RRv %RHv -> %RHv at %RRv\n", pRec->pSource, *(RTRCUINTPTR *)pRec->pRelocPos, *(RTRCINTPTR*)pRec->pRelocPos + delta, pRec->pRelocPos));
VBox/VMM/VMMR3/PATM.cpp:845:                    Log(("PATM: Patch page not present -> check later!\n"));
VBox/VMM/VMMR3/PATM.cpp:855:                    Log(("PATM: Patch was overwritten -> disabling patch!!\n"));
VBox/VMM/VMMR3/PATM.cpp:886:                Log(("Relative fixup (g2p) %08X -> %08X at %08X (source=%08x, target=%08x)\n", *(int32_t*)pRec->pRelocPos, displ, pRec->pRelocPos, pRec->pSource, pRec->pDest));
VBox/VMM/VMMR3/PATM.cpp:888:                Log(("Relative fixup (g2p) ???????? -> %08X at %08X (source=%08x, target=%08x)\n", displ, pRec->pRelocPos, pRec->pSource, pRec->pDest));
VBox/VMM/VMMR3/PATM.cpp:927:                    Log(("PATM: Patch page not present -> check later!\n"));
VBox/VMM/VMMR3/PATM.cpp:937:                    Log(("PATM: Patch jump was overwritten -> disabling patch!!\n"));
VBox/VMM/VMMR3/PATM.cpp:954:                Log(("Skip the guest jump to patch code for this disabled patch %RGv - %08X\n", pPatch->patch.pPrivInstrGC, pRec->pRelocPos));
VBox/VMM/VMMR3/PATM.cpp:966:            Log(("Relative fixup (p2g) %08X -> %08X at %08X (source=%08x, target=%08x)\n", *(int32_t*)pRec->pRelocPos, displ, pRec->pRelocPos, pRec->pSource, pRec->pDest));
VBox/VMM/VMMR3/PATM.cpp:1208:                    Log(("Failed to install function replacement patch (at %x) for reason %Rrc\n", pOrgInstrGC, rc));
VBox/VMM/VMMR3/PATM.cpp:1223:                Log(("Patch block %RRv called as function\n", pFunctionRec->patch.pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:1241:        Log(("Set branch target %d to %08X : %08x - (%08x + %d + %d)\n", nrJumpRecs, displ, pBranchTargetGC, pInstrGC, pRec->offDispl, sizeof(RTRCPTR)));
VBox/VMM/VMMR3/PATM.cpp:1457:        Log(("Code block too big (%x) for patch at %RRv!!\n", pPatch->cbPatchBlockSize, pCurInstrGC));
VBox/VMM/VMMR3/PATM.cpp:1485:                Log(("Dangerous unconditional jump ends in our generated patch jump!! (%x vs %x)\n", pCurInstrGC, pPatch->pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:1533:        Log(("Illegal opcode (0xf 0xb) -> return here\n"));
VBox/VMM/VMMR3/PATM.cpp:1542:            Log(("Exit point within patch jump itself!! (%x vs %x)\n", pCurInstrGC, pPatch->pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:1553:                Log(("WARNING: End of block reached, but we need to duplicate some extra instruction to avoid a conflict with the patch jump\n"));
VBox/VMM/VMMR3/PATM.cpp:1588:        Log(("End of block at %RRv size %d\n", pCurInstrGC, pCpu->cbInstr));
VBox/VMM/VMMR3/PATM.cpp:1621:        Log(("Code block too big (%x) for function patch at %RRv!!\n", pPatch->cbPatchBlockSize, pCurInstrGC));
VBox/VMM/VMMR3/PATM.cpp:1659:            Log(("Illegal instructions for function patch!!\n"));
VBox/VMM/VMMR3/PATM.cpp:1678:        Log(("Illegal opcode (0xf 0xb) -> return here\n"));
VBox/VMM/VMMR3/PATM.cpp:1732:        Log(("patmRecompileCallback: jump to code we've recompiled before %RRv!\n", pCurInstrGC));
VBox/VMM/VMMR3/PATM.cpp:1765:        Log(("Illegal instruction at %RRv -> mark with int 3\n", pCurInstrGC));
VBox/VMM/VMMR3/PATM.cpp:1780:            Log(("We don't support far jumps here!! (%08X)\n", pCpu->Param1.fUse));
VBox/VMM/VMMR3/PATM.cpp:1811:            Log(("cli instruction found in other instruction patch block; force it to continue & find an exit point\n"));
VBox/VMM/VMMR3/PATM.cpp:1830:                Log(("Force recompilation of next instruction for OP_MOV at %RRv\n", pCurInstrGC));
VBox/VMM/VMMR3/PATM.cpp:1856:            Log(("Force recompilation of next instruction for OP_MOV at %RRv\n", pCurInstrGC));
VBox/VMM/VMMR3/PATM.cpp:1871:            Log(("Inhibit irqs for instruction OP_STI at %RRv\n", pCurInstrGC));
VBox/VMM/VMMR3/PATM.cpp:1919:                Log(("PATM: sti occurred too soon; refusing patch!\n"));
VBox/VMM/VMMR3/PATM.cpp:1970:        Log(("IRET at %RRv\n", pCurInstrGC));
VBox/VMM/VMMR3/PATM.cpp:1984:        Log(("Illegal opcode (0xf 0xb)\n"));
VBox/VMM/VMMR3/PATM.cpp:2095:            Log(("patmPatchGenDuplicate\n"));
VBox/VMM/VMMR3/PATM.cpp:2112:        Log(("Clear inhibit IRQ flag at %RRv\n", pCurInstrGC));
VBox/VMM/VMMR3/PATM.cpp:2115:            Log(("patmRecompileCallback: generate jump back to guest (%RRv) after fused instruction\n", pNextInstrGC));
VBox/VMM/VMMR3/PATM.cpp:2141:            Log(("patmRecompileCallback: end found for single instruction patch at %RRv cbInstr %d\n", pNextInstrGC, pCpu->cbInstr));
VBox/VMM/VMMR3/PATM.cpp:2292:                Log(("DIS %RRv<-%s", pOrgInstrGC, szOutput));
VBox/VMM/VMMR3/PATM.cpp:2294:                Log(("DIS           %s", szOutput));
VBox/VMM/VMMR3/PATM.cpp:2304:            Log(("DIS: %s", szOutput));
VBox/VMM/VMMR3/PATM.cpp:2308:            Log(("Disassembly failed (probably page not present) -> return to caller\n"));
VBox/VMM/VMMR3/PATM.cpp:2329:                Log(("We don't support far jumps here!! (%08X)\n", cpu.Param1.fUse));
VBox/VMM/VMMR3/PATM.cpp:2453:        Log(("Recompile: %s", szOutput));
VBox/VMM/VMMR3/PATM.cpp:2459:            Log(("Disassembly failed (probably page not present) -> return to caller\n"));
VBox/VMM/VMMR3/PATM.cpp:2480:                Log(("patmRecompileCodeStream: irqs inhibited by instruction %RRv\n", pNextInstrGC));
VBox/VMM/VMMR3/PATM.cpp:2507:                        Log(("Unexpected control flow instruction after inhibit irq instruction\n"));
VBox/VMM/VMMR3/PATM.cpp:2547:                Log(("We don't support far jumps here!! (%08X)\n", cpu.Param1.fUse));
VBox/VMM/VMMR3/PATM.cpp:2552:            Log(("Jump encountered target %RRv\n", addr));
VBox/VMM/VMMR3/PATM.cpp:2557:                Log(("patmRecompileCodeStream continue passed conditional jump\n"));
VBox/VMM/VMMR3/PATM.cpp:2562:                    Log(("patmRecompileCodeStream fatal error %d\n", rc));
VBox/VMM/VMMR3/PATM.cpp:2570:                Log(("patmRecompileCodeStream continue with jump\n"));
VBox/VMM/VMMR3/PATM.cpp:2581:                    Log(("Found active patch at target %RRv (%RRv) -> temporarily disabling it!!\n", addr, pTargetPatch->pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:2594:                    Log(("patmRecompileCodeStream fatal error %d\n", rc));
VBox/VMM/VMMR3/PATM.cpp:2650:                    Log(("Relocation failed for the jump in the guest code!!\n"));
VBox/VMM/VMMR3/PATM.cpp:2667:                    Log(("Relocation failed for the jump in the guest code!!\n"));
VBox/VMM/VMMR3/PATM.cpp:2693:                Log(("Relocation failed for the jump in the guest code!!\n"));
VBox/VMM/VMMR3/PATM.cpp:2731:        Log(("Org patch jump: %s", szOutput));
VBox/VMM/VMMR3/PATM.cpp:2750:            Log(("Org instr: %s", szOutput));
VBox/VMM/VMMR3/PATM.cpp:2790:            Log(("Relocation failed for the jump in the guest code!!\n"));
VBox/VMM/VMMR3/PATM.cpp:2864:        Log(("Patch jump would cross page boundary -> refuse!!\n"));
VBox/VMM/VMMR3/PATM.cpp:2914:        Log(("PATMR3PatchCli: patmRecompileCodeStream failed with %d\n", rc));
VBox/VMM/VMMR3/PATM.cpp:2923:        Log(("patmR3PatchBlock: patch block too small -> refuse\n"));
VBox/VMM/VMMR3/PATM.cpp:2954:        Log(("PATMR3PatchCli: patmr3SetBranchTargets failed with %d\n", rc));
VBox/VMM/VMMR3/PATM.cpp:2959:    Log(("Patch code ----------------------------------------------------------\n"));
VBox/VMM/VMMR3/PATM.cpp:2967:    Log(("Patch code ends -----------------------------------------------------\n"));
VBox/VMM/VMMR3/PATM.cpp:2980:        Log(("patmR3PatchBlock %RRv -> int 3 callable patch.\n", pPatch->pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:3011:    Log(("Successfully installed %s patch at %RRv\n", patmGetInstructionString(pPatch->opcode, pPatch->flags), pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:3143:            Log(("Patch code ----------------------------------------------------------\n"));
VBox/VMM/VMMR3/PATM.cpp:3145:            Log(("Patch code ends -----------------------------------------------------\n"));
VBox/VMM/VMMR3/PATM.cpp:3147:            Log(("Successfully installed IDT handler patch at %RRv\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:3217:    Log(("Patch code ----------------------------------------------------------\n"));
VBox/VMM/VMMR3/PATM.cpp:3219:    Log(("Patch code ends -----------------------------------------------------\n"));
VBox/VMM/VMMR3/PATM.cpp:3224:    Log(("Successfully installed Trap Trampoline patch at %RRv\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:3291:    Log(("patmDuplicateFunction %RRv\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:3298:        Log(("patmDuplicateFunction: maximum callback depth reached!!\n"));
VBox/VMM/VMMR3/PATM.cpp:3328:        Log(("PATMR3PatchCli: patmRecompileCodeStream failed with %d\n", rc));
VBox/VMM/VMMR3/PATM.cpp:3359:        Log(("PATMR3PatchCli: patmr3SetBranchTargets failed with %d\n", rc));
VBox/VMM/VMMR3/PATM.cpp:3366:    Log(("Patch code ----------------------------------------------------------\n"));
VBox/VMM/VMMR3/PATM.cpp:3368:    Log(("Patch code ends -----------------------------------------------------\n"));
VBox/VMM/VMMR3/PATM.cpp:3371:    Log(("Successfully installed function duplication patch at %RRv\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:3402:    Log(("patmDupicateFunction %RRv failed!!\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:3425:    Log(("patmCreateTrampoline %RRv\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:3456:                        Log(("patmCreateTrampoline: generating jump to code inside patch at %RRv (patch target %RRv)\n", pPatchToJmp->pPrivInstrGC, pPatchTargetGC));
VBox/VMM/VMMR3/PATM.cpp:3684:        Log(("We don't support far jumps here!! (%08X)\n", pCpu->Param1.fUse));
VBox/VMM/VMMR3/PATM.cpp:3742:    Log(("Successfully installed function replacement patch at %RRv\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:3787:        Log(("Relocation failed for cached mmio address!!\n"));
VBox/VMM/VMMR3/PATM.cpp:3850:        Log(("Disassembly failed (probably page not present) -> return to caller\n"));
VBox/VMM/VMMR3/PATM.cpp:3863:        Log(("Relocation failed for cached mmio address!!\n"));
VBox/VMM/VMMR3/PATM.cpp:4077:    Log(("Successfully installed %s patch at %RRv\n", patmGetInstructionString(pPatch->opcode, pPatch->flags), pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:4110:    Log(("PATMR3AddHint %RRv\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:4189:        Log(("PATMR3InstallPatch: %08x is blacklisted\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:4201:            Log(("PATMR3InstallPatch: code selector not wide open: %04x:%RRv != %RRv eflags=%08x\n", pCtx->cs.Sel, pInstrGCFlat, pInstrGC, pCtx->eflags.u32));
VBox/VMM/VMMR3/PATM.cpp:4246:            Log(("PATMR3InstallPatch: disable operation is pending for patch at %RRv\n", pPatchRec->patch.pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:4256:                Log(("Enabling HINTED patch %RRv\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:4260:                Log(("Enabling patch %RRv again\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:4279:                Log(("Patch an existing patched instruction?!? (%RRv)\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:4304:        Log(("PGMGstGetPage failed with %Rrc\n", rc));
VBox/VMM/VMMR3/PATM.cpp:4311:        Log(("Code at %RGv (phys %RGp) is in a ROM, MMIO or invalid page - refused\n", pInstrGC, GCPhys));
VBox/VMM/VMMR3/PATM.cpp:4327:        Log(("Out of memory!!!!\n"));
VBox/VMM/VMMR3/PATM.cpp:4354:                Log(("Dangerous patch; would overwrite the unusable patch at %RRv\n", pPatchNear->patch.pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:4368:        Log(("Out of memory!!!!\n"));
VBox/VMM/VMMR3/PATM.cpp:4375:        Log(("Disassembly failed (probably page not present) -> return to caller\n"));
VBox/VMM/VMMR3/PATM.cpp:4399:        Log(("WARNING: Patch index wrap around!!\n"));
VBox/VMM/VMMR3/PATM.cpp:4458:                    Log(("PATMR3InstallPatch GUEST: %s %RRv code32=%d\n", patmGetInstructionString(pPatchRec->patch.opcode, pPatchRec->patch.flags), pInstrGC, (flags & PATMFL_CODE32) ? 1 : 0));
VBox/VMM/VMMR3/PATM.cpp:4476:                Log(("PATMR3InstallPatch GUEST: %s %RRv code32=%d\n", patmGetInstructionString(pPatchRec->patch.opcode, pPatchRec->patch.flags), pInstrGC, (flags & PATMFL_CODE32) ? 1 : 0));
VBox/VMM/VMMR3/PATM.cpp:4513:            Log(("PATMR3InstallPatch %s %RRv code32=%d\n", patmGetInstructionString(pPatchRec->patch.opcode, pPatchRec->patch.flags), pInstrGC, (flags & PATMFL_CODE32) ? 1 : 0));
VBox/VMM/VMMR3/PATM.cpp:4561:        Log(("Patch  lowest %RRv highest %RRv\n", pPatchRec->patch.pInstrGCLowest, pPatchRec->patch.pInstrGCHighest));
VBox/VMM/VMMR3/PATM.cpp:4562:        Log(("Global lowest %RRv highest %RRv\n", pVM->patm.s.pPatchedInstrGCLowest, pVM->patm.s.pPatchedInstrGCHighest));
VBox/VMM/VMMR3/PATM.cpp:4655:    Log(("patmAddPatchToPage: insert patch %RHv to page %RRv\n", pPatch, pPage));
VBox/VMM/VMMR3/PATM.cpp:4671:                Log(("Out of memory!!!!\n"));
VBox/VMM/VMMR3/PATM.cpp:4687:            Log(("Out of memory!!!!\n"));
VBox/VMM/VMMR3/PATM.cpp:4698:            Log(("Out of memory!!!!\n"));
VBox/VMM/VMMR3/PATM.cpp:4789:    Log(("patmRemovePatchPage: remove patch %RHv from page %RRv\n", pPatch, pPage));
VBox/VMM/VMMR3/PATM.cpp:4813:        Log(("patmRemovePatchFromPage %RRv\n", pPage));
VBox/VMM/VMMR3/PATM.cpp:4909:    Log(("PATMR3PatchWrite %RRv %x\n", GCPtr, cbWrite));
VBox/VMM/VMMR3/PATM.cpp:4960:                            Log(("PATMR3PatchWrite: overwriting jump to patch code -> remove patch.\n"));
VBox/VMM/VMMR3/PATM.cpp:4997:                                Log(("PATMR3PatchWrite: Found patched instruction %RRv -> %RRv\n", pGuestPtrGC, pPatchInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5098:                Log(("PATMR3FlushPage %RRv remove patch at %RRv\n", addr, pPatch->pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5159:            Log(("PATMR3QueryOpcode: returning opcode %2X for instruction at %RRv\n", *pByte, pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5219:            Log(("PATMR3ReadOrgInstr: returning opcode %.*Rhxs for instruction at %RX32\n", cbToRead, pbSrc, GCPtrInstr));
VBox/VMM/VMMR3/PATM.cpp:5242:    Log(("PATMR3DisablePatch: %RRv\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5275:            Log(("Invalidate patch at %RRv (HC=%RRv)\n", PATCHCODE_PTR_GC(pPatch), PATCHCODE_PTR_HC(pPatch)));
VBox/VMM/VMMR3/PATM.cpp:5303:                        Log(("PATMR3DisablePatch: Can't disable a patch who's guest code has changed!!\n"));
VBox/VMM/VMMR3/PATM.cpp:5315:                    Log(("PATMR3DisablePatch: unable to disable patch -> mark PATCH_DISABLE_PENDING\n"));
VBox/VMM/VMMR3/PATM.cpp:5339:                    Log(("PATMR3DisablePatch: Can't disable a patch who's guest code has changed!!\n"));
VBox/VMM/VMMR3/PATM.cpp:5368:        Log(("PATMR3DisablePatch: disabled patch at %RRv\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5371:    Log(("Patch not found!\n"));
VBox/VMM/VMMR3/PATM.cpp:5412:            Log(("Enabling HINTED patch %RRv\n", pConflictPatch->pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5424:            Log(("PATM -> CONFLICT: Installed JMP patch for patch conflict at %RRv\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5436:        Log(("PATM -> CONFLICT: Found active patch at instruction %RRv with target %RRv -> turn into int 3 patch!!\n", pInstrGC, pConflictPatch->pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5459:        Log(("PATM -> CONFLICT: Found active patch at instruction %RRv with target %RRv -> DISABLING it!!\n", pInstrGC, pConflictPatch->pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5491:    Log(("PATMR3EnablePatch %RRv\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5516:                        Log(("PATMR3EnablePatch: Can't enable a patch who's guest code has changed!!\n"));
VBox/VMM/VMMR3/PATM.cpp:5550:                            Log(("Renewed patch instr: %s", szOutput));
VBox/VMM/VMMR3/PATM.cpp:5570:                    Log(("PATMR3EnablePatch: Can't enable a patch who's guest code has changed!!\n"));
VBox/VMM/VMMR3/PATM.cpp:5591:            Log(("PATMR3EnablePatch: Unable to enable patch %RRv with state %d\n", pInstrGC, pPatch->uState));
VBox/VMM/VMMR3/PATM.cpp:5615:        Log(("PATMRemovePatch %RRv REFUSED!\n", pPatch->pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5618:    Log(("PATMRemovePatch %RRv\n", pPatch->pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5719:    Log(("patmR3RefreshPatch: attempt to refresh patch at %RRv\n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5736:            Log(("patmR3RefreshPatch: refused because external jumps to this patch exist but the jumps are not recorded\n"));
VBox/VMM/VMMR3/PATM.cpp:5739:        Log(("patmR3RefreshPatch: external jumps to this patch exist, updating\n"));
VBox/VMM/VMMR3/PATM.cpp:5795:        Log(("PATM: patmR3RefreshPatch: succeeded to refresh patch at %RRv \n", pInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5876:            Log(("Found active patch at %RRv (org %RRv)\n", pInstrGC, pPatchRec->patch.pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5886:            Log(("Found HINT patch at %RRv (org %RRv)\n", pInstrGC, pPatchRec->patch.pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:5964:        Log(("Invalidate patch at %RRv (HC=%RRv)\n", PATCHCODE_PTR_GC(pPatch), PATCHCODE_PTR_HC(pPatch)));
VBox/VMM/VMMR3/PATM.cpp:6087:        Log(("PATMR3PatchToGCPtr failed for %RRv offset %x\n", pPatchGC, pPatchGC - pVM->patm.s.pPatchMemGC));
VBox/VMM/VMMR3/PATM.cpp:6177:    Log(("patmR3HandleDirtyInstr: dirty instruction at %RRv (%RRv)\n", pEip, pOrgInstrGC));
VBox/VMM/VMMR3/PATM.cpp:6216:        Log(("DIRTY: %s\n", szBuf));
VBox/VMM/VMMR3/PATM.cpp:6279:                Log(("NEW:   %s\n", szBuf));
VBox/VMM/VMMR3/PATM.cpp:6295:                Log(("NEW:   %s (FAILED)\n", szBuf));
VBox/VMM/VMMR3/PATM.cpp:6323:                        Log(("Room left in patched instruction stream (%d bytes)\n", cbFiller));
VBox/VMM/VMMR3/PATM.cpp:6332:                            Log(("FILL:  %s\n", szBuf));
VBox/VMM/VMMR3/PATM.cpp:6344:                                Log(("FILL:  %s\n", szBuf));
VBox/VMM/VMMR3/PATM.cpp:6423:            Log(("PATMR3HandleTrap: trap in dirty patch at %RRv\n", pEip));
VBox/VMM/VMMR3/PATM.cpp:6433:            Log(("PATMR3HandleTrap: trap in disabled patch at %RRv\n", pEip));
VBox/VMM/VMMR3/PATM.cpp:6445:            Log(("PATMR3HandleTrap: disable operation is pending for patch at %RRv\n", pPatch->patch.pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:6491:                    Log(("Faulting push -> go back to the original instruction\n"));
VBox/VMM/VMMR3/PATM.cpp:6524:            Log(("Call to invalidated patch -> go back to the original instruction\n"));
VBox/VMM/VMMR3/PATM.cpp:6610:            Log(("Return failed at %RRv (%RRv)\n", pEip, pNewEip));
VBox/VMM/VMMR3/PATM.cpp:6611:            Log(("Expected return address %RRv found address %RRv Psp=%x\n", pVM->patm.s.pGCStackHC[(pVM->patm.s.pGCStateHC->Psp+PATM_STACK_SIZE)/sizeof(RTRCPTR)], retaddr, pVM->patm.s.pGCStateHC->Psp));
VBox/VMM/VMMR3/PATM.cpp:6625:        Log(("PATMR3HandleTrap %RRv -> inhibit irqs set!\n", pEip));
VBox/VMM/VMMR3/PATM.cpp:6658:        Log(("Disabling patch at location %RRv due to trap too close to the privileged instruction \n", pPatch->patch.pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:6668:        Log(("Disabling patch at location %RRv due to too many traps inside patch code\n", pPatch->patch.pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:6703:        Log(("Renewing patch at %RRv\n", pPatchRec->patch.pPrivInstrGC));
VBox/VMM/VMMR3/PATM.cpp:6724:            Log(("Renewing patch at %RRv\n", pPatchRec->patch.pPrivInstrGC));
VBox/VMM/VMMR3/PDMQueue.cpp:235:        Log(("PDM: Created device queue %p; cbItem=%d cItems=%d cMillies=%d pfnCallback=%p pDevIns=%p\n",
VBox/VMM/VMMR3/PDMQueue.cpp:281:        Log(("PDM: Created driver queue %p; cbItem=%d cItems=%d cMillies=%d pfnCallback=%p pDrvIns=%p\n",
VBox/VMM/VMMR3/PDMQueue.cpp:326:        Log(("PDM: Created internal queue %p; cbItem=%d cItems=%d cMillies=%d pfnCallback=%p\n",
VBox/VMM/VMMR3/PDMQueue.cpp:371:        Log(("PDM: Created external queue %p; cbItem=%d cItems=%d cMillies=%d pfnCallback=%p pvUser=%p\n",
VBox/VMM/VMMR3/CSAM.cpp:1125:                    Log(("csamR3GCVirtToHCVirt failed for %RRv\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1147:            Log(("CSAM: Patching dangerous 'mov xx, cs' instruction at %RGv with an int3\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1153:                    Log(("PATMR3InstallPatch failed with %d\n", rc));
VBox/VMM/VMMR3/CSAM.cpp:1186:            Log(("Privileged instruction at %RRv: str!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1189:            Log(("Privileged instruction at %RRv: lsl!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1192:            Log(("Privileged instruction at %RRv: lar!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1195:            Log(("Privileged instruction at %RRv: sgdt!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1198:            Log(("Privileged instruction at %RRv: sldt!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1201:            Log(("Privileged instruction at %RRv: sidt!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1204:            Log(("Privileged instruction at %RRv: smsw!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1207:            Log(("Privileged instruction at %RRv: verw!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1210:            Log(("Privileged instruction at %RRv: verr!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1213:            Log(("Privileged instruction at %RRv: cpuid!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1216:            Log(("Privileged instruction at %RRv: push cs!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1219:            Log(("Privileged instruction at %RRv: iret!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1229:                Log(("PATMR3InstallPatch failed with %d\n", rc));
VBox/VMM/VMMR3/CSAM.cpp:1248:                Log(("Control Flow instruction at %RRv: jmp!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1251:                Log(("Control Flow instruction at %RRv: call!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1332:                    Log(("csamR3GCVirtToHCVirt failed for %RRv\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1341:                if (RT_SUCCESS(rc2)) Log(("CSAM Call Analysis: %s", szOutput));
VBox/VMM/VMMR3/CSAM.cpp:1349:                    Log(("Disassembly failed at %RRv with %Rrc (probably page not present) -> return to caller\n", pCurInstrGC, rc2));
VBox/VMM/VMMR3/CSAM.cpp:1363:                        Log(("Page for current instruction %RRv is not present!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1417:                        Log(("Found new function at %RRv\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1443:                        Log(("Found new function at %RRv\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1544:                Log(("csamR3GCVirtToHCVirt failed for %RRv\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1554:            if (RT_SUCCESS(rc2)) Log(("CSAM Analysis: %s", szOutput));
VBox/VMM/VMMR3/CSAM.cpp:1563:            Log(("Disassembly failed at %RRv with %Rrc (probably page not present) -> return to caller\n", pCurInstrGC, rc2));
VBox/VMM/VMMR3/CSAM.cpp:1580:                Log(("Page for current instruction %RRv is not present!!\n", pCurInstrGC));
VBox/VMM/VMMR3/CSAM.cpp:1628:                Log(("We don't support far jumps here!! (%08X)\n", cpu.Param1.fUse));
VBox/VMM/VMMR3/CSAM.cpp:1642:                    Log(("Page for current instruction %RRv is not present!!\n", addr));
VBox/VMM/VMMR3/CSAM.cpp:1692:            Log(("Jump through jump table\n"));
VBox/VMM/VMMR3/CSAM.cpp:1715:                    Log(("Jump to %RRv\n", addr));
VBox/VMM/VMMR3/CSAM.cpp:1781:            Log(("csamR3CalcPageHash: page %RRv not present/invalid!!\n", pInstr));
VBox/VMM/VMMR3/CSAM.cpp:1791:        Log(("csamR3CalcPageHash: page %RRv not present!!\n", pInstr));
VBox/VMM/VMMR3/CSAM.cpp:1799:        Log(("csamR3CalcPageHash: page %RRv not present!!\n", pInstr));
VBox/VMM/VMMR3/CSAM.cpp:1807:        Log(("csamR3CalcPageHash: page %RRv not present!!\n", pInstr));
VBox/VMM/VMMR3/CSAM.cpp:1815:        Log(("csamR3CalcPageHash: page %RRv not present!!\n", pInstr));
VBox/VMM/VMMR3/CSAM.cpp:1898:        Log(("CSAMR3FlushPage: page %RRv has changed -> FLUSH (rc=%Rrc) (Phys: %RGp vs %RGp)\n", addr, rc, GCPhys, pPageRec->page.GCPhys));
VBox/VMM/VMMR3/CSAM.cpp:2041:    Log(("New page record for %RRv\n", GCPtr & PAGE_BASE_GC_MASK));
VBox/VMM/VMMR3/CSAM.cpp:2083:            Log(("PGMR3HandlerVirtualRegister for %RRv failed with %Rrc\n", GCPtr, rc));
VBox/VMM/VMMR3/CSAM.cpp:2102:    Log(("csamR3CreatePageRecord %RRv GCPhys=%RGp\n", GCPtr, pPage->page.GCPhys));
VBox/VMM/VMMR3/CSAM.cpp:2155:    Log(("CSAMR3MonitorPage %RRv %d\n", pPageAddrGC, enmTag));
VBox/VMM/VMMR3/CSAM.cpp:2189:        Log(("CSAMR3MonitorPage: activate monitoring for %RRv\n", pPageAddrGC));
VBox/VMM/VMMR3/CSAM.cpp:2198:            Log(("PGMR3HandlerVirtualRegister for %RRv failed with %Rrc\n", pPageAddrGC, rc));
VBox/VMM/VMMR3/CSAM.cpp:2272:    Log(("CSAMR3UnmonitorPage %RRv %d\n", pPageAddrGC, enmTag));
VBox/VMM/VMMR3/CSAM.cpp:2298:    Log(("csamRemovePageRecord %RRv\n", GCPtr));
VBox/VMM/VMMR3/CSAM.cpp:2467:            Log(("Scanned full page (%RRv) -> free bitmap\n", pInstr & PAGE_BASE_GC_MASK));
VBox/VMM/VMMR3/CSAM.cpp:2501:    Log(("CSAMR3MarkCode: %RRv size=%d fScanned=%d\n", pInstr, cbInstr, fScanned));
VBox/VMM/VMMR3/CSAM.cpp:2569:            Log(("csamAnalyseCodeStream failed with %d\n", rc));
VBox/VMM/VMMR3/CSAM.cpp:2606:        Log(("CSAMR3FlushDirtyPages: flush %RRv (modifypage rc=%Rrc)\n", pVM->csam.s.pvDirtyBasePage[i], rc));
VBox/VMM/VMMR3/CSAM.cpp:2646:        Log(("csamR3FlushCodePages: %RRv\n", GCPtr));
VBox/VMM/VMMR3/CSAM.cpp:2729:                Log(("CSAMCheckGates: checking previous call instruction %RRv\n", pHandler));
VBox/VMM/VMMR3/CSAM.cpp:2738:                    Log(("CSAMCheckGates: csamAnalyseCodeStream failed with %d\n", rc));
VBox/VMM/VMMR3/CSAM.cpp:2797:                Log(("CSAMCheckGates: check gate %d failed due to rc %Rrc GCPtrBase=%RRv limit=%x\n", iGate, rc, selInfo.GCPtrBase, selInfo.cbLimit));
VBox/VMM/VMMR3/CSAM.cpp:2804:                Log(("CSAMCheckGates: check trap gate %d at %04X:%08X (flat %RRv)\n", iGate, pGuestIdte->Gen.u16SegSel, VBOXIDTE_OFFSET(*pGuestIdte), pHandler));
VBox/VMM/VMMR3/CSAM.cpp:2808:                Log(("CSAMCheckGates: check interrupt gate %d at %04X:%08X (flat %RRv)\n", iGate, pGuestIdte->Gen.u16SegSel, VBOXIDTE_OFFSET(*pGuestIdte), pHandler));
VBox/VMM/VMMR3/CSAM.cpp:2819:                Log(("CSAMCheckGates: csamAnalyseCodeStream failed with %d\n", rc));
VBox/VMM/VMMR3/CSAM.cpp:2842:                            Log(("Installed OpenBSD interrupt handler prefix instruction (push cs) patch\n"));
VBox/VMM/VMMR3/CSAM.cpp:2870:            Log(("Installing %s gate handler for 0x%X at %RRv\n", (pGuestIdte->Gen.u5Type2 == VBOX_IDTE_TYPE2_TRAP_32) ? "trap" : "intr", iGate, pHandler));
VBox/VMM/VMMR3/CSAM.cpp:2876:                Log(("Gate handler 0x%X is SAFE!\n", iGate));
VBox/VMM/VMMR3/CSAM.cpp:2883:                        Log(("TRPMR3SetGuestTrapHandler %d failed with %Rrc\n", iGate, rc));
VBox/VMM/VMMR3/CSAM.cpp:2909:    Log(("CSAMR3RecordCallAddress %RRv\n", GCPtrCall));
VBox/VMM/VMMR3/PDMDriver.cpp:241:            Log(("PDM: Calling VBoxDriversRegister (%p) of %s (%s)\n", pfnVBoxDriversRegister, pszName, pszFilename));
VBox/VMM/VMMR3/PDMDriver.cpp:244:                Log(("PDM: Successfully loaded driver module %s (%s).\n", pszName, pszFilename));
VBox/VMM/VMMR3/PDMDriver.cpp:350:            Log(("PDM: Registered driver '%s'\n", pReg->szName));
VBox/VMM/VMMR3/PDMDriver.cpp:783:                            Log(("PDM: Attached driver %p:'%s'/%d to LUN#%d on device '%s'/%d, pDrvAbove=%p:'%s'/%d\n",
VBox/VMM/VMMR3/PDMDriver.cpp:790:                            Log(("PDM: Attached driver %p:'%s'/%d, pDrvAbove=%p:'%s'/%d\n",
VBox/VMM/VMMR3/VMEmt.cpp:94:    Log(("vmR3EmulationThread: Emulation thread starting the days work... Thread=%#x pUVM=%p\n", hThreadSelf, pUVM));
VBox/VMM/VMMR3/VMEmt.cpp:128:                Log(("vmR3EmulationThread: Req rc=%Rrc, VM state %s -> %s\n", rc, VMR3GetStateName(enmBefore), pUVM->pVM ? VMR3GetStateName(pUVM->pVM->enmVMState) : "CREATING"));
VBox/VMM/VMMR3/VMEmt.cpp:136:                Log(("vmR3EmulationThread: Req (cpu=%u) rc=%Rrc, VM state %s -> %s\n", pUVCpu->idCpu, rc, VMR3GetStateName(enmBefore), pUVM->pVM ? VMR3GetStateName(pUVM->pVM->enmVMState) : "CREATING"));
VBox/VMM/VMMR3/VMEmt.cpp:169:                Log(("vmR3EmulationThread: Rendezvous rc=%Rrc, VM state %s -> %s\n", rc, VMR3GetStateName(enmBefore), VMR3GetStateName(pVM->enmVMState)));
VBox/VMM/VMMR3/VMEmt.cpp:177:                Log(("vmR3EmulationThread: Req rc=%Rrc, VM state %s -> %s\n", rc, VMR3GetStateName(enmBefore), VMR3GetStateName(pVM->enmVMState)));
VBox/VMM/VMMR3/VMEmt.cpp:185:                Log(("vmR3EmulationThread: Req (cpu=%u) rc=%Rrc, VM state %s -> %s\n", pUVCpu->idCpu, rc, VMR3GetStateName(enmBefore), VMR3GetStateName(pVM->enmVMState)));
VBox/VMM/VMMR3/VMEmt.cpp:194:                Log(("vmR3EmulationThread: Dbg rc=%Rrc, VM state %s -> %s\n", rc, VMR3GetStateName(enmBefore), VMR3GetStateName(pVM->enmVMState)));
VBox/VMM/VMMR3/VMEmt.cpp:203:                Log(("vmR3EmulationThread: Reset rc=%Rrc, VM state %s -> %s\n", rc, VMR3GetStateName(enmBefore), VMR3GetStateName(pVM->enmVMState)));
VBox/VMM/VMMR3/VMEmt.cpp:241:                    Log(("vmR3EmulationThread: EMR3ExecuteVM() -> rc=%Rrc, enmVMState=%d\n", rc, pVM->enmVMState));
VBox/VMM/VMMR3/VMEmt.cpp:260:    Log(("vmR3EmulationThread: Terminating emulation thread! Thread=%#x pUVM=%p rc=%Rrc enmBefore=%d enmVMState=%d\n",
VBox/VMM/VMMR3/VMEmt.cpp:301:    Log(("vmR3EmulationThread: EMT is terminated.\n"));
VBox/VMM/VMMR3/PATMSSM.cpp:879:    Log(("pPatchMemGC %RRv vs old %RRv\n", pVM->patm.s.pPatchMemGC, patmInfo.pPatchMemGC));
VBox/VMM/VMMR3/PATMSSM.cpp:880:    Log(("pGCStateGC  %RRv vs old %RRv\n", pVM->patm.s.pGCStateGC, patmInfo.pGCStateGC));
VBox/VMM/VMMR3/PATMSSM.cpp:881:    Log(("pGCStackGC  %RRv vs old %RRv\n", pVM->patm.s.pGCStackGC, patmInfo.pGCStackGC));
VBox/VMM/VMMR3/PATMSSM.cpp:882:    Log(("pCPUMCtxGC  %RRv vs old %RRv\n", pVM->patm.s.pCPUMCtxGC, patmInfo.pCPUMCtxGC));
VBox/VMM/VMMR3/PATMSSM.cpp:890:    Log(("Restore patch memory: new %RRv old %RRv\n", pVM->patm.s.pPatchMemGC, patmInfo.pPatchMemGC));
VBox/VMM/VMMR3/PATMSSM.cpp:946:        Log(("Restoring patch %RRv -> %RRv state %x\n", pPatchRec->patch.pPrivInstrGC, patmInfo.pPatchMemGC + pPatchRec->patch.pPatchBlockOffset, pPatchRec->patch.uState));
VBox/VMM/VMMR3/PATMSSM.cpp:1052:            Log(("Patch code ----------------------------------------------------------\n"));
VBox/VMM/VMMR3/PATMSSM.cpp:1054:            Log(("Patch code ends -----------------------------------------------------\n"));
VBox/VMM/VMMR3/PATMSSM.cpp:1063:            Log(("Remove patch %RGv due to failed HC address translation\n", pPatchRec->patch.pPrivInstrGC));
VBox/VMM/VMMR3/PATMSSM.cpp:1075:    Log(("Correct fixups in global helper functions\n"));
VBox/VMM/VMMR3/PATMSSM.cpp:1465:            Log(("Relative fixup (g2p) %08X -> %08X at %08X (source=%08x, target=%08x)\n", *(int32_t*)pRec->pRelocPos, displ, pRec->pRelocPos, pRec->pSource, pRec->pDest));
VBox/VMM/VMMR3/PATMSSM.cpp:1511:                Log(("PATM: Patch jump was overwritten -> disabling patch!!\n"));
VBox/VMM/VMMR3/PATMSSM.cpp:1528:            Log(("Skip the guest jump to patch code for this disabled patch %08X\n", pRec->pRelocPos));
VBox/VMM/VMMR3/PATMSSM.cpp:1540:        Log(("Relative fixup (p2g) %08X -> %08X at %08X (source=%08x, target=%08x)\n", *(int32_t*)pRec->pRelocPos, displ, pRec->pRelocPos, pRec->pSource, pRec->pDest));
VBox/VMM/VMMR3/HM.cpp:1264:    Log(("pVM->hm.s.vmx.fSupported = %d\n", pVM->hm.s.vmx.fSupported));
VBox/VMM/VMMR3/HM.cpp:1599:     * Log configuration details.
VBox/VMM/VMMR3/HM.cpp:1668:    Log(("pVM->hm.s.svm.fSupported = %d\n", pVM->hm.s.svm.fSupported));
VBox/VMM/VMMR3/HM.cpp:1813:    Log(("HMR3Relocate to %RGv\n", MMHyperGetArea(pVM, 0)));
VBox/VMM/VMMR3/HM.cpp:2022:    Log(("hmR3RemovePatches\n"));
VBox/VMM/VMMR3/HM.cpp:2036:            Log(("Patched instr: %s\n", szOutput));
VBox/VMM/VMMR3/HM.cpp:2043:            Log(("Patched code removed? (rc=%Rrc0\n", rc));
VBox/VMM/VMMR3/HM.cpp:2049:            Log(("Patched instruction was changed! (rc=%Rrc0\n", rc));
VBox/VMM/VMMR3/HM.cpp:2060:            Log(("Original instr: %s\n", szOutput));
VBox/VMM/VMMR3/HM.cpp:2103:    Log(("HMR3EnablePatching %RGv size %x\n", pPatchMem, cbPatchMem));
VBox/VMM/VMMR3/HM.cpp:2126:    Log(("HMR3DisablePatching %RGv size %x\n", pPatchMem, cbPatchMem));
VBox/VMM/VMMR3/HM.cpp:2173:        Log(("hmR3ReplaceTprInstr: already patched %RGv\n", pCtx->rip));
VBox/VMM/VMMR3/HM.cpp:2179:        Log(("hmR3ReplaceTprInstr: no available patch slots (%RGv)\n", pCtx->rip));
VBox/VMM/VMMR3/HM.cpp:2184:    Log(("hmR3ReplaceTprInstr: rip=%RGv idxPatch=%u\n", pCtx->rip, idx));
VBox/VMM/VMMR3/HM.cpp:2212:                Log(("hmR3ReplaceTprInstr: HMTPRINSTR_WRITE_REG %u\n", pDis->Param2.Base.idxGenReg));
VBox/VMM/VMMR3/HM.cpp:2219:                Log(("hmR3ReplaceTprInstr: HMTPRINSTR_WRITE_IMM %#llx\n", pDis->Param2.uValue));
VBox/VMM/VMMR3/HM.cpp:2281:                Log(("Acceptable read/shr candidate!\n"));
VBox/VMM/VMMR3/HM.cpp:2295:                Log(("hmR3ReplaceTprInstr: HMTPRINSTR_READ %u\n", pPatch->uDstOperand));
VBox/VMM/VMMR3/HM.cpp:2310:    Log(("hmR3ReplaceTprInstr: Failed to patch instr!\n"));
VBox/VMM/VMMR3/HM.cpp:2349:        Log(("hmR3PatchTprInstr: already patched %RGv\n", pCtx->rip));
VBox/VMM/VMMR3/HM.cpp:2355:        Log(("hmR3PatchTprInstr: no available patch slots (%RGv)\n", pCtx->rip));
VBox/VMM/VMMR3/HM.cpp:2360:    Log(("hmR3PatchTprInstr: rip=%RGv idxPatch=%u\n", pCtx->rip, idx));
VBox/VMM/VMMR3/HM.cpp:2506:                    Log(("Patch instr %s\n", szOutput));
VBox/VMM/VMMR3/HM.cpp:2508:                    Log(("%RGv: rc=%Rrc\n", GCPtrInstr, rc));
VBox/VMM/VMMR3/HM.cpp:2534:        Log(("Ran out of space in our patch buffer!\n"));
VBox/VMM/VMMR3/HM.cpp:2537:        Log(("hmR3PatchTprInstr: Failed to patch instr!\n"));
VBox/VMM/VMMR3/HM.cpp:2734:    Log(("HMR3EmulateIoBlock\n"));
VBox/VMM/VMMR3/HM.cpp:2739:        Log(("HMR3EmulateIoBlock -> enabled\n"));
VBox/VMM/VMMR3/HM.cpp:2765:        Log(("HMR3CanExecuteGuest: In nested-guest mode - returning false"));
VBox/VMM/VMMR3/HM.cpp:3358:                /** @todo Log VM-entry event injection control fields
VBox/VMM/VMMR3/HM.cpp:3398:    Log(("hmR3Save:\n"));
VBox/VMM/VMMR3/HM.cpp:3489:    Log(("hmR3Load:\n"));
VBox/VMM/VMMR3/HM.cpp:3576:            Log(("hmR3Load: patch %d\n", i));
VBox/VMM/VMMR3/HM.cpp:3577:            Log(("Key       = %x\n", pPatch->Core.Key));
VBox/VMM/VMMR3/HM.cpp:3578:            Log(("cbOp      = %d\n", pPatch->cbOp));
VBox/VMM/VMMR3/HM.cpp:3579:            Log(("cbNewOp   = %d\n", pPatch->cbNewOp));
VBox/VMM/VMMR3/HM.cpp:3580:            Log(("type      = %d\n", pPatch->enmType));
VBox/VMM/VMMR3/HM.cpp:3581:            Log(("srcop     = %d\n", pPatch->uSrcOperand));
VBox/VMM/VMMR3/HM.cpp:3582:            Log(("dstop     = %d\n", pPatch->uDstOperand));
VBox/VMM/VMMR3/HM.cpp:3583:            Log(("cFaults   = %d\n", pPatch->cFaults));
VBox/VMM/VMMR3/HM.cpp:3584:            Log(("target    = %x\n", pPatch->pJumpTarget));
VBox/VMM/VMMR3/PGMHandler.cpp:470:    Log(("PGMR3HandlerVirtualRegister: GCPhys=%RGp GCPhysLast=%RGp pvUserR3=%RHv pvUserGC=%RRv hType=%#x (%d, %s) pszDesc=%RHv:%s\n",
VBox/VMM/VMMR3/PGMHandler.cpp:550:            Log(("PGMR3HandlerVirtualRegister: Conflict with existing range %RGv-%RGv (%s), req. %RGv-%RGv (%s)\n",
VBox/VMM/VMMR3/PGMHandler.cpp:645:        Log(("PGMHandlerVirtualDeregister: Removing Virtual (%d) Range %RGv-%RGv %s\n",
VBox/VMM/VMMR3/PGMHandler.cpp:666:        Log(("PGMHandlerVirtualDeregister: Removing Hyper Virtual Range %RGv-%RGv %s\n",
VBox/VMM/VMMR3/PGMBth.h:171:        Log(("Bth-Enter: PGM pool flushed -> signal sync cr3\n"));
VBox/VMM/VMMR3/CPUMR3CpuId.cpp:1507:        Log(("CPUM: cNeither=%d cSame=%d cLastWithEcx=%d cTotal=%d\n", cNeither, cSame, cLastWithEcx, cTotal));
VBox/VMM/VMMR3/CPUMR3CpuId.cpp:2537:         * Log everything while we're at it.
VBox/VMM/VMMR3/CPUMR3CpuId.cpp:4771:            Log(("CPUM: ClearGuestCpuIdFeature: Disabled xAPIC\n"));
VBox/VMM/VMMR3/CPUMR3CpuId.cpp:4780:            Log(("CPUM: ClearGuestCpuIdFeature: Disabled x2APIC\n"));
VBox/VMM/VMMR3/CPUMR3CpuId.cpp:4794:            Log(("CPUM: ClearGuestCpuIdFeature: Disabled PAE!\n"));
VBox/VMM/VMMR3/CPUMR3CpuId.cpp:4808:            Log(("CPUM: ClearGuestCpuIdFeature: Disabled PAT!\n"));
VBox/VMM/VMMR3/CPUMR3CpuId.cpp:4830:            Log(("CPUM: ClearGuestCpuIdFeature: Disabled RDTSCP!\n"));
VBox/VMM/VMMR3/CPUMR3CpuId.cpp:4845:            Log(("CPUM: ClearGuestCpuIdFeature: Disabled MWAIT Extensions!\n"));
VBox/VMM/VMMR3/CPUMR3CpuId.cpp:4854:            Log(("CPUM: ClearGuestCpuIdFeature: Disabled speculation control!\n"));
VBox/VMM/VMMR3/SELM.cpp:860:        Log(("No GDT entries...\n"));
VBox/VMM/VMMR3/SELM.cpp:926:            Log(("SELMR3UpdateFromCPUM: cbEffGuestGdtLimit=%#x -> %#x (actual %#x)\n",
VBox/VMM/VMMR3/SELM.cpp:943:        Log(("Internal SELM GDT conflict: use non-present entries\n"));
VBox/VMM/VMMR3/SELM.cpp:952:                Log(("SELM: Found unused GDT %04X\n", aHyperSel[iGDT]));
VBox/VMM/VMMR3/SELM.cpp:979:        Log(("SELM: Use guest TSS selector %x\n", CPUMGetGuestTR(pVCpu, NULL)));
VBox/VMM/VMMR3/SELM.cpp:1046:        Log(("SELMR3UpdateFromCPUM: Guest's GDT is changed to pGdt=%016RX64 cbGdt=%08X\n", GDTR.pGdt, GDTR.cbGdt));
VBox/VMM/VMMR3/SELM.cpp:1189:            Log(("SELMR3UpdateFromCPUM: Guest LDT changed to from %RGv:%04x to %RGv:%04x. (GDTR=%016RX64:%04x)\n",
VBox/VMM/VMMR3/SELM.cpp:1204:                Log(("LDT selector marked not present!!\n"));
VBox/VMM/VMMR3/SELM.cpp:1213:                Log(("WARNING: Guest LDT (%RGv:%04x) conflicted with existing access range!! Assumes LDT is begin updated. (GDTR=%016RX64:%04x)\n",
VBox/VMM/VMMR3/SELM.cpp:1613:                    Log(("SELMR3SyncTSS: Updating TSS ring 0 stack to %04X:%08X from %04X:%08X; TSS Phys=%RGp)\n",
VBox/VMM/VMMR3/SELM.cpp:1619:                Log(("offIoBitmap=%#x\n", Tss.offIoBitmap));
VBox/VMM/VMMR3/SELM.cpp:1634:                    Log(("SELMR3SyncTSS: Updating TSS ring 1 stack to %04X:%08X from %04X:%08X\n", Tss.ss1, Tss.esp1, (pVM->selm.s.Tss.ss2 & ~2) | 1, pVM->selm.s.Tss.esp2));
VBox/VMM/VMMR3/SELM.cpp:1661:        Log(("SELMR3SyncTSS: Guest's TSS is changed to pTss=%RGv cbMonitoredTss=%08X cbGuestTss=%#08x\n",
VBox/VMM/VMMR3/SELM.cpp:1751:        Log(("SELMR3DebugCheck: guest GDT size forced us to look for unused selectors.\n"));
VBox/VMM/VMMR3/SELM.cpp:1754:        Log(("SELMR3DebugCheck: limits have changed! new=%d old=%d\n", GDTR.cbGdt, pVM->selm.s.GuestGdtr.cbGdt));
VBox/VMM/VMMR3/SELM.cpp:1800:        Log(("SELMR3DebugCheck: ldt is out of bound SelLdt=%#x\n", SelLdt));
VBox/VMM/VMMR3/SELM.cpp:1807:        Log(("SELMR3DebugCheck: Failed to read LDT descriptor. rc=%d\n", rc));
VBox/VMM/VMMR3/SELM.cpp:1824:        Log(("SELmR3DebugCheck: Invalid LDT %04x!\n", SelLdt));
VBox/VMM/VMMR3/SELM.cpp:2515:        Log(("%s: %s\n", pszMsg, szOutput));
VBox/VMM/VMMR3/PDMThread.cpp:759:    Log(("PDMThread: Initializing thread %RTthrd / %p / '%s'...\n", Thread, pThread, RTThreadGetName(Thread)));
VBox/VMM/VMMR3/PDMThread.cpp:851:    Log(("PDMThread: Terminating thread %RTthrd / %p / '%s': %Rrc\n", Thread, pThread, RTThreadGetName(Thread), rc));
VBox/VMM/VMMR3/PGMSharedPage.cpp:72:    Log(("PGMR3SharedModuleRegister family=%d name=%s version=%s base=%RGv size=%x cRegions=%d\n",
VBox/VMM/VMMR3/PGMSharedPage.cpp:152:    Log(("PGMR3SharedModuleUnregister name=%s version=%s base=%RGv size=%x\n", pszModuleName, pszVersion, GCBaseAddr, cbModule));
VBox/VMM/VMMR3/VMM.cpp:588:    /* Log whether thread-context hooks are used (on Linux this can depend on how the kernel is configured). */
VBox/VMM/VMMR3/VMM.cpp:1304:        Log(("vmmR3YieldEMT: %RI64 ns\n", u64Elapsed));
VBox/VMM/VMMR3/VMM.cpp:1468:    Log(("vmmR3SendSipi for VCPU %d with vector %x\n", idCpu, uVector));
VBox/VMM/VMMR3/VMM.cpp:1486:    Log(("vmmR3SendInitIpi for VCPU %d\n", idCpu));
VBox/VMM/VMMR3/VMM.cpp:1890:    Log(("VMMR3EmtRendezvousFF: EMT%#u\n", pVCpu->idCpu));
VBox/VMM/VMMR3/VMM.cpp:1895:    Log(("VMMR3EmtRendezvousFF: EMT%#u returns %Rrc\n", pVCpu->idCpu, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMR3/VMM.cpp:1936:    Log(("vmmR3EmtRendezvousRecursive: %#x EMT#%u depth=%d\n", fFlags, pVCpu->idCpu, pVM->vmm.s.cRendezvousRecursions));
VBox/VMM/VMMR3/VMM.cpp:2121:    Log(("vmmR3EmtRendezvousRecursive: %#x EMT#%u depth=%d returns %Rrc\n",
VBox/VMM/VMMR3/VMM.cpp:2170:        Log(("VMMR3EmtRendezvous: %#x non-EMT\n", fFlags));
VBox/VMM/VMMR3/VMM.cpp:2175:        Log(("VMMR3EmtRendezvous: %#x non-EMT returns %Rrc\n", fFlags, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMR3/VMM.cpp:2189:            Log(("VMMR3EmtRendezvous: %#x EMT (uni)\n", fFlags));
VBox/VMM/VMMR3/VMM.cpp:2198:            Log(("VMMR3EmtRendezvous: %#x EMT (uni), recursion depth=%d\n", fFlags, pVM->vmm.s.cRendezvousRecursions));
VBox/VMM/VMMR3/VMM.cpp:2217:        Log(("VMMR3EmtRendezvous: %#x EMT (uni) returns %Rrc\n", fFlags, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMR3/VMM.cpp:2241:            Log(("VMMR3EmtRendezvous: %#x EMT#%u, waiting for lock...\n", fFlags, pVCpu->idCpu));
VBox/VMM/VMMR3/VMM.cpp:2257:        Log(("VMMR3EmtRendezvous: %#x EMT#%u\n", fFlags, pVCpu->idCpu));
VBox/VMM/VMMR3/VMM.cpp:2329:        Log(("VMMR3EmtRendezvous: %#x EMT#%u returns %Rrc\n", fFlags, pVCpu->idCpu, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMR3/VMM.cpp:2533:    Log(("VMMR3ResumeHyper: eip=%RRv esp=%RRv\n", CPUMGetHyperEIP(pVCpu), CPUMGetHyperESP(pVCpu)));
VBox/VMM/VMMR3/VMM.cpp:2572:            Log(("VMMR3ResumeHyper: returns %Rrc\n", rc));
VBox/VMM/VMMR3/DBGFOS.cpp:159:            Log(("dbgfR3OSRegister: %s -> VERR_ALREADY_LOADED\n", pReg->szName));
VBox/VMM/VMMR3/DBGFOS.cpp:264:        Log(("DBGFR3OSDeregister: %s -> VERR_NOT_FOUND\n", pReg->szName));
VBox/VMM/VMMR3/DBGFOS.cpp:320:        Log(("DBGFR3OSDeregister: %s -> VERR_NOT_FOUND\n", pReg->szName));
VBox/VMM/VMMR3/PDMAsyncCompletion.cpp:236:        Log(("PDM: Created device template %p: pfnCompleted=%p pDevIns=%p\n",
VBox/VMM/VMMR3/PDMAsyncCompletion.cpp:284:        Log(("PDM: Created driver template %p: pfnCompleted=%p pDrvIns=%p\n",
VBox/VMM/VMMR3/PDMAsyncCompletion.cpp:328:        Log(("PDM: Created usb template %p: pfnCompleted=%p pDevIns=%p\n",
VBox/VMM/VMMR3/PDMAsyncCompletion.cpp:376:        Log(("PDM: Created internal template %p: pfnCompleted=%p pvUser2=%p\n",
VBox/VMM/VMMR3/PDMAsyncCompletion.cpp:1290:    /* Log the bandwidth groups and all assigned endpoints. */
VBox/VMM/VMMR3/VMMTests.cpp:205:    Log(("vmmR3DoGCTest: %d %#x\n", enmTestcase, uVariation));
VBox/VMM/VMMR3/VMMTests.cpp:231:    Log(("vmmR3DoGCTest: rc=%Rrc iLastGZRc=%Rrc\n", rc, pVCpu->vmm.s.iLastGZRc));
VBox/VMM/VMMR3/VMMTests.cpp:512:        Log(("trampoline=%x\n", pVM->vmm.s.pfnCallTrampolineRC));
VBox/VMM/VMMR3/VMMTests.cpp:529:                Log(("VMM: GC returned fatal %Rra in iteration %d\n", rc, i));
VBox/VMM/VMMR3/VMMTests.cpp:535:                Log(("VMM: iteration %d, esi=%08x edi=%08x ebx=%08x\n",
VBox/VMM/VMMR3/VMMTests.cpp:548:        Log(("VMM: %8d interrupts in %11llu ns (%11llu ticks),  %10llu ns/iteration (%11llu ticks)\n",
VBox/VMM/VMMR3/VMMTests.cpp:561:        Log(("VMM: profiling switcher...\n"));
VBox/VMM/VMMR3/VMMTests.cpp:582:                Log(("VMM: GC returned fatal %Rra in iteration %d\n", rc, i));
VBox/VMM/VMMR3/VMMTests.cpp:599:        Log(("VMM: %8d cycles     in %11llu ns (%11lld ticks),  %10llu ns/iteration (%11lld ticks)  Min %11lld ticks\n",
VBox/VMM/VMMR3/VMMTests.cpp:705:        Log(("VMM: profiling switcher...\n"));
VBox/VMM/VMMR3/VMMTests.cpp:734:                Log(("VMM: R0 returned fatal %Rrc in iteration %d\n", rc, i));
VBox/VMM/VMMR3/VMMTests.cpp:751:        Log(("VMM: %8d cycles     in %11llu ns (%11lld ticks),  %10llu ns/iteration (%11lld ticks)  Min %11lld ticks\n",
VBox/VMM/VMMR3/FTM.cpp:750:        Log(("ftmR3MasterThread: client connect to %s %d\n", pVM->ftm.s.pszAddress, pVM->ftm.s.uPort));
VBox/VMM/VMMR3/FTM.cpp:754:            Log(("ftmR3MasterThread: CONNECTED\n"));
VBox/VMM/VMMR3/FTM.cpp:865:            Log(("RTTcpRead failed with %Rrc\n", rc));
VBox/VMM/VMMR3/FTM.cpp:899:                Log(("RTTcpRead page data (%d bytes) failed with %Rrc\n", Hdr.cb, rc));
VBox/VMM/VMMR3/PDMDevice.cpp:172:        Log(("PDM: No devices were configured!\n"));
VBox/VMM/VMMR3/PDMDevice.cpp:394:        Log(("PDM: Constructing device '%s' instance %d...\n", pDevIns->pReg->szName, pDevIns->iInstance));
VBox/VMM/VMMR3/PDMDevice.cpp:452:        Log(("pdmR3DevInit: returns %Rrc\n", rc));
VBox/VMM/VMMR3/PDMDevice.cpp:621:            Log(("PDM: Calling VBoxDevicesRegister (%p) of %s (%s)\n", pfnVBoxDevicesRegister, pszName, pszFilename));
VBox/VMM/VMMR3/PDMDevice.cpp:624:                Log(("PDM: Successfully loaded device module %s (%s).\n", pszName, pszFilename));
VBox/VMM/VMMR3/PDMDevice.cpp:726:            Log(("PDM: Registered device '%s'\n", pReg->szName));
VBox/VMM/VMMR3/PGM.cpp:1689:         * Log the host paging mode. It may come in handy.
VBox/VMM/VMMR3/PGM.cpp:3453:    Log(("PGMR3ChangeMode: Guest mode: %s -> %s\n", PGMGetModeName(pVCpu->pgm.s.enmGuestMode), PGMGetModeName(enmGuestMode)));
VBox/VMM/VMMR3/PDMBlkCache.cpp:1763:    /* Log the info */
VBox/VMM/VMMR3/MM.cpp:341:        Log(("MM: %RU64 bytes of RAM\n", cbRam));
VBox/VMM/VMMR3/MM.cpp:343:        Log(("MM: %RU64 bytes of RAM with a hole at %RU64 up to 4GB.\n", cbRam, offRamHole));
VBox/VMM/VMMR3/MM.cpp:413:        Log(("MM: No RAM configured\n"));
VBox/VMM/VMMR3/MMHyper.cpp:358:            Log(("Relocating the hypervisor from %RGv to %RGv\n", GCPtrOld, GCPtrNew));
VBox/VMM/VMMR3/MMHyper.cpp:1064:        Log(("MMR3HyperAllocOnceNoRel: MMR3HyperMapHCRam failed with rc=%Rrc, try MMHyperAlloc(,%#x,,) instead\n",  rc, cb));
VBox/VMM/VMMR3/SSM.cpp:1558:                Log(("SSM: Removed data unit '%s' (pdm dev).\n", pFree->szName));
VBox/VMM/VMMR3/SSM.cpp:1634:                Log(("SSM: Removed data unit '%s' (pdm drv).\n", pFree->szName));
VBox/VMM/VMMR3/SSM.cpp:1704:                Log(("SSM: Removed data unit '%s' (pdm drv).\n", pFree->szName));
VBox/VMM/VMMR3/SSM.cpp:1770:            Log(("SSM: Removed data unit '%s' (type=%d).\n", pFree->szName, enmType));
VBox/VMM/VMMR3/SSM.cpp:3051:    Log(("ssmR3StrmIoThread: starts working\n"));
VBox/VMM/VMMR3/SSM.cpp:3063:                Log(("ssmR3StrmIoThread: quitting writing with rc=%Rrc.\n", rc));
VBox/VMM/VMMR3/SSM.cpp:3068:                Log(("ssmR3StrmIoThread: quitting writing with stream rc=%Rrc\n", pStrm->rc));
VBox/VMM/VMMR3/SSM.cpp:3076:                    Log(("ssmR3StrmIoThread: quitting writing because of pending termination.\n"));
VBox/VMM/VMMR3/SSM.cpp:3079:                Log(("ssmR3StrmIoThread: postponing termination because of pending buffers.\n"));
VBox/VMM/VMMR3/SSM.cpp:3100:                Log(("ssmR3StrmIoThread: quitting reading because of pending termination.\n"));
VBox/VMM/VMMR3/SSM.cpp:3108:                Log(("ssmR3StrmIoThread: quitting reading with rc=%Rrc\n", rc));
VBox/VMM/VMMR3/SSM.cpp:3113:                Log(("ssmR3StrmIoThread: quitting reading with stream rc=%Rrc\n", pStrm->rc));
VBox/VMM/VMMR3/SSM.cpp:4423:    Log(("SSM: Unit at %#9llx: '%s', instance %u, pass %#x, version %u\n",
VBox/VMM/VMMR3/SSM.cpp:4750:    Log(("SSM: Unit at %#9llx: END UNIT\n", UnitHdr.offStream));
VBox/VMM/VMMR3/SSM.cpp:4775:    Log(("SSM: Footer at %#9llx: \n", Footer.offStream));
VBox/VMM/VMMR3/SSM.cpp:4871:        Log(("SSM: Unit at %#9llx: '%s', instance %u, pass %#x, version %u\n",
VBox/VMM/VMMR3/SSM.cpp:5267:    Log(("SSM: Starting state save to file '%s'...\n", pszFilename));
VBox/VMM/VMMR3/SSM.cpp:5352:                    Log(("ssmR3DoLiveVoteRun: '%s'/#%u -> VINF_SSM_VOTE_FOR_ANOTHER_PASS (pass=%u)\n", pUnit->szName, pUnit->u32Instance, uPass));
VBox/VMM/VMMR3/SSM.cpp:5358:                    Log(("ssmR3DoLiveVoteRun: '%s'/#%u -> VINF_SSM_VOTE_DONE_DONT_CALL_AGAIN (pass=%u)\n", pUnit->szName, pUnit->u32Instance, uPass));
VBox/VMM/VMMR3/SSM.cpp:5453:        Log(("SSM: Unit at %#9llx: '%s', instance %u, pass %#x, version %u\n",
VBox/VMM/VMMR3/SSM.cpp:5789:    Log(("SSM: Starting state save to file '%s'...\n", pszFilename));
VBox/VMM/VMMR3/SSM.cpp:7307:        Log(("SSMR3SetGCPtrSize: %u -> %u bytes\n", pSSM->u.Read.cbGCPtr, cbGCPtr));
VBox/VMM/VMMR3/SSM.cpp:7607:    Log(("SSM: u32CRC=0x%08x\n", u32CRC));
VBox/VMM/VMMR3/SSM.cpp:7766:        Log(("SSM: Not a saved state file. magic=%.*s\n", sizeof(uHdr.v2_0.szMagic) - 1, uHdr.v2_0.szMagic));
VBox/VMM/VMMR3/SSM.cpp:7791:        Log(("SSM: Unknown file format version. magic=%.*s\n", sizeof(uHdr.v2_0.szMagic) - 1, uHdr.v2_0.szMagic));
VBox/VMM/VMMR3/SSM.cpp:8096:        Log(("SSM: Failed to open save state file '%s', rc=%Rrc.\n",  pszFilename, rc));
VBox/VMM/VMMR3/SSM.cpp:8338:                    Log(("SSM: EndOfFile: offset %#9llx size %9d\n", offUnit, UnitHdr.cbUnit));
VBox/VMM/VMMR3/SSM.cpp:8371:                    Log(("SSM: Data unit: offset %#9llx size %9lld '%s'\n", offUnit, UnitHdr.cbUnit, pszName));
VBox/VMM/VMMR3/SSM.cpp:8438:                                Log(("SSM: Unit '%s' left %lld bytes unread!\n", pszName, -i64Diff));
VBox/VMM/VMMR3/SSM.cpp:8637:            Log(("SSM: Unit at %#9llx: END UNIT\n", offUnit));
VBox/VMM/VMMR3/SSM.cpp:8643:        Log(("SSM: Unit at %#9llx: '%s', instance %u, pass %#x, version %u\n",
VBox/VMM/VMMR3/SSM.cpp:8978:        Log(("SSM: Load of '%s' completed!\n", pszFilename));
VBox/VMM/VMMR3/SSM.cpp:9112:        Log(("SSM: Failed to open saved state file '%s', rc=%Rrc.\n",  pszFilename, rc));
VBox/VMM/VMMR3/SSM.cpp:9159:    Log(("SSMR3Open: Failed to open saved state file '%s', rc=%Rrc.\n",  pszFilename, rc));
VBox/VMM/VMMR3/PATMGuest.cpp:128:        Log(("KiIntSystemCall not found!!\n"));
VBox/VMM/VMMR3/PATMGuest.cpp:134:        Log(("KiFastSystemCall and KiIntSystemCall not in the same page!!\n"));
VBox/VMM/VMMR3/PATMGuest.cpp:148:        Log(("PGMPhysSimpleDirtyWriteGCPtr failed with rc=%Rrc!!\n", rc));
VBox/VMM/VMMR3/PATMGuest.cpp:153:    Log(("Sysenter Patch code ----------------------------------------------------------\n"));
VBox/VMM/VMMR3/PATMGuest.cpp:162:    Log(("Sysenter Patch code ends -----------------------------------------------------\n"));
VBox/VMM/VMMR3/CFGM.cpp:230:        Log(("CFGMR3Init: Successfully constructed the configuration\n"));
VBox/VMM/VMMR3/EMHM.cpp:110:                Log(("EMR3HmSingleInstruction: FFs before -> %Rrc\n", VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMR3/EMHM.cpp:138:            Log(("EMR3HmSingleInstruction: emR3HmHandleRC -> %Rrc\n", VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMR3/EMHM.cpp:150:            Log(("EMR3HmSingleInstruction: returns %Rrc (rip %llx -> %llx)\n", VBOXSTRICTRC_VAL(rcStrict), uOldRip, pCtx->rip));
VBox/VMM/VMMR3/EMHM.cpp:182:     * Log it.
VBox/VMM/VMMR3/EMHM.cpp:184:    Log(("EMINS: %04x:%RGv RSP=%RGv\n", pCtx->cs.Sel, (RTGCPTR)pCtx->rip, (RTGCPTR)pCtx->rsp));
VBox/VMM/VMMR3/EMHM.cpp:416:         * Log important stuff before entering GC.
VBox/VMM/VMMR3/EMHM.cpp:419:            Log(("CPU%d: Pending hardware interrupt=0x%x cs:rip=%04X:%RGv\n", pVCpu->idCpu, TRPMGetTrapNo(pVCpu), pCtx->cs.Sel, (RTGCPTR)pCtx->rip));
VBox/VMM/VMMR3/EMHM.cpp:426:                Log(("HWV86: %08X IF=%d\n", pCtx->eip, pCtx->eflags.Bits.u1IF));
VBox/VMM/VMMR3/EMHM.cpp:428:                Log(("HWR%d: %04X:%RGv ESP=%RGv IF=%d IOPL=%d CR0=%x CR4=%x EFER=%x\n", cpl, pCtx->cs.Sel, (RTGCPTR)pCtx->rip, pCtx->rsp, pCtx->eflags.Bits.u1IF, pCtx->eflags.Bits.u2IOPL, (uint32_t)pCtx->cr0, (uint32_t)pCtx->cr4, (uint32_t)pCtx->msrEFER));
VBox/VMM/VMMR3/EMHM.cpp:430:                Log(("HWR%d: %04X:%08X ESP=%08X IF=%d IOPL=%d CR0=%x CR4=%x EFER=%x\n", cpl, pCtx->cs.Sel,          pCtx->eip, pCtx->esp, pCtx->eflags.Bits.u1IF, pCtx->eflags.Bits.u2IOPL, (uint32_t)pCtx->cr0, (uint32_t)pCtx->cr4, (uint32_t)pCtx->msrEFER));
VBox/VMM/VMMR3/EMHM.cpp:435:                Log(("HWV86-CPU%d: %08X IF=%d\n", pVCpu->idCpu, pCtx->eip, pCtx->eflags.Bits.u1IF));
VBox/VMM/VMMR3/EMHM.cpp:437:                Log(("HWR%d-CPU%d: %04X:%RGv ESP=%RGv IF=%d IOPL=%d CR0=%x CR4=%x EFER=%x\n", cpl, pVCpu->idCpu, pCtx->cs.Sel, (RTGCPTR)pCtx->rip, pCtx->rsp, pCtx->eflags.Bits.u1IF, pCtx->eflags.Bits.u2IOPL, (uint32_t)pCtx->cr0, (uint32_t)pCtx->cr4, (uint32_t)pCtx->msrEFER));
VBox/VMM/VMMR3/EMHM.cpp:439:                Log(("HWR%d-CPU%d: %04X:%08X ESP=%08X IF=%d IOPL=%d CR0=%x CR4=%x EFER=%x\n", cpl, pVCpu->idCpu, pCtx->cs.Sel,          pCtx->eip, pCtx->esp, pCtx->eflags.Bits.u1IF, pCtx->eflags.Bits.u2IOPL, (uint32_t)pCtx->cr0, (uint32_t)pCtx->cr4, (uint32_t)pCtx->msrEFER));
VBox/VMM/VMMR3/DBGFCoreWrite.cpp:415:    Log((DBGFLOG_NAME ": CoreDescriptor Version=%u Revision=%u\n", CoreDescriptor.u32VBoxVersion, CoreDescriptor.u32VBoxRevision));
VBox/VMM/VMMR3/DBGFCoreWrite.cpp:478:        Log((DBGFLOG_NAME ": PGMR3PhysGetRange iRange=%u GCPhysStart=%#x GCPhysEnd=%#x cbMemRange=%u\n",
VBox/VMM/VMMR3/PDM.cpp:1054:        Log(("pdmR3LoadExec: VM_FF_PDM_DMA=%RTbool\n", VM_FF_IS_SET(pVM, VM_FF_PDM_DMA)));
VBox/VMM/VMMR3/PDM.cpp:1337: * Log the stats.
VBox/VMM/VMMR3/PDM.cpp:1699:    Log(("PDMR3GetResetInfo: returns fHardReset=%RTbool fResetFlags=%#x\n", fHardReset, fResetFlags));
VBox/VMM/VMMR3/PDM.cpp:2575:    Log(("PDMR3VMMDevHeapAlloc: %#zx\n", cbSize));
VBox/VMM/VMMR3/PDM.cpp:2594:    Log(("PDMR3VmmDevHeapFree: %RHv\n", pv)); RT_NOREF_PV(pv);
VBox/VMM/VMMR3/DBGFLog.cpp:3: * DBGF - Debugger Facility, Log Manager.
VBox/VMM/VMMR3/PGMSavedState.cpp:1971:                Log(("pgmR3LiveVote: VINF_SUCCESS - pass=%d cDirtyPagesShort=%u|%ums cDirtyPagesLong=%u|%ums cMsMaxDowntime=%u\n",
VBox/VMM/VMMR3/PGMSavedState.cpp:1983:                Log(("pgmR3LiveVote: VINF_SUCCESS - pass=%d cDirtyPagesShort=%u cDirtyPagesLong=%u\n", uPass, cDirtyPagesShort, cDirtyPagesLong));
VBox/VMM/VMMR3/PGMSavedState.cpp:2664:                Log(("pgmR3LoadMemory: GMMR3FreePagesPerform pVM=%p cPendingPages=%u\n", pVM, cPendingPages));
VBox/VMM/VMMR3/PGMSavedState.cpp:3127:        Log(("pgmR3LoadFinalLocked: pVM=%p cBalloonedPages=%#x\n", pVM, pVM->pgm.s.cBalloonedPages));
VBox/VMM/VMMR3/EMRaw.cpp:127:    Log(("emR3RawResumeHyper: cs:eip=%RTsel:%RGr efl=%RGr\n", pCtx->cs.Sel, pCtx->eip, pCtx->eflags));
VBox/VMM/VMMR3/EMRaw.cpp:135:    Log(("emR3RawResumeHyper: cs:eip=%RTsel:%RGr efl=%RGr - returned from GC with rc=%Rrc\n", pCtx->cs.Sel, pCtx->eip, pCtx->eflags, rc));
VBox/VMM/VMMR3/EMRaw.cpp:165:    Log(("emR3RawStep: cs:eip=%RTsel:%RGr efl=%RGr\n", fGuest ? CPUMGetGuestCS(pVCpu) : CPUMGetHyperCS(pVCpu),
VBox/VMM/VMMR3/EMRaw.cpp:202:        Log(("emR3RawStep: cs:eip=%RTsel:%RGr efl=%RGr - GC rc %Rrc\n", fGuest ? CPUMGetGuestCS(pVCpu) : CPUMGetHyperCS(pVCpu),
VBox/VMM/VMMR3/EMRaw.cpp:238:    Log(("Single step BEGIN:\n"));
VBox/VMM/VMMR3/EMRaw.cpp:248:    Log(("Single step END: rc=%Rrc\n", rc));
VBox/VMM/VMMR3/EMRaw.cpp:296:        Log(("emR3RawExecuteInstruction: In patch block. eip=%RRv\n", (RTRCPTR)pCtx->eip));
VBox/VMM/VMMR3/EMRaw.cpp:307:                Log(("emR3RawExecuteInstruction: Executing instruction starting at new address %RGv IF=%d VMIF=%x\n",
VBox/VMM/VMMR3/EMRaw.cpp:317:                    Log(("PATCH: IF=1 -> emulate last instruction as it can't be interrupted!!\n"));
VBox/VMM/VMMR3/EMRaw.cpp:331:                Log(("emR3RawExecuteInstruction: Emulate patched instruction at %RGv IF=%d VMIF=%x\n",
VBox/VMM/VMMR3/EMRaw.cpp:340:                Log(("emR3RawExecuteInstruction: Disabled patch -> new eip %RGv IF=%d VMIF=%x\n",
VBox/VMM/VMMR3/EMRaw.cpp:348:                    Log(("PATCH: IF=1 -> emulate last instruction as it can't be interrupted!!\n"));
VBox/VMM/VMMR3/EMRaw.cpp:370:    Log(("EMINS: %04x:%RGv RSP=%RGv\n", pCtx->cs.Sel, (RTGCPTR)pCtx->rip, (RTGCPTR)pCtx->rsp));
VBox/VMM/VMMR3/EMRaw.cpp:386:        Log(("EMINS[rem]: %04x:%RGv RSP=%RGv\n", pCtx->cs.Sel, (RTGCPTR)pCtx->rip, (RTGCPTR)pCtx->rsp));
VBox/VMM/VMMR3/EMRaw.cpp:501:        Log(("emR3RawHandleRC: recheck gate %x -> valid=%d\n", u8TrapNo, TRPMR3GetGuestTrapHandler(pVM, u8TrapNo) != TRPM_INVALID_HANDLER));
VBox/VMM/VMMR3/EMRaw.cpp:591:    Log(("emR3RawGuestTrap: cs:eip=%04x:%08x: trap=%02x err=%08x cr2=%08x cr0=%08x%s: Phys=%RGp fFlags=%08llx %s %s %s%s rc2=%d\n",
VBox/VMM/VMMR3/EMRaw.cpp:753:                            Log(("Patch code: IRET->VM stack frame: return address %04X:%08RX32 eflags=%08x ss:esp=%04X:%08RX32\n", selCS, eip, uEFlags, selSS, esp));
VBox/VMM/VMMR3/EMRaw.cpp:754:                            Log(("Patch code: IRET->VM stack frame: DS=%04X ES=%04X FS=%04X GS=%04X\n", selDS, selES, selFS, selGS));
VBox/VMM/VMMR3/EMRaw.cpp:758:                        Log(("Patch code: IRET stack frame: return address %04X:%08RX32 eflags=%08x ss:esp=%04X:%08RX32\n", selCS, eip, uEFlags, selSS, esp));
VBox/VMM/VMMR3/EMRaw.cpp:761:                    Log(("Patch code: IRET stack frame: return address %04X:%08RX32 eflags=%08x\n", selCS, eip, uEFlags));
VBox/VMM/VMMR3/EMRaw.cpp:765:        Log(("emR3RawPatchTrap: in patch: eip=%08x: trap=%02x err=%08x cr2=%08x cr0=%08x\n",
VBox/VMM/VMMR3/EMRaw.cpp:778:                Log(("emR3RawPatchTrap: Executing faulting instruction at new address %RGv\n", uNewEip));
VBox/VMM/VMMR3/EMRaw.cpp:780:                    Log(("emR3RawPatchTrap: Virtual IF flag disabled!!\n"));
VBox/VMM/VMMR3/EMRaw.cpp:794:                        Log(("Possible Windows XP iret fault at %08RX32\n", pCtx->eip));
VBox/VMM/VMMR3/EMRaw.cpp:812:                Log(("emR3RawPatchTrap: Emulate patched instruction at %RGv IF=%d VMIF=%x\n",
VBox/VMM/VMMR3/EMRaw.cpp:823:                    Log(("emR3RawPatchTrap: Virtual IF flag disabled!!\n"));
VBox/VMM/VMMR3/EMRaw.cpp:832:                    Log(("PATCH: IF=1 -> emulate last instruction as it can't be interrupted!!\n"));
VBox/VMM/VMMR3/EMRaw.cpp:1022:                            Log(("emR3RawPrivileged: detected conflict -> disabled patch at %08RX32\n", pCtx->eip));
VBox/VMM/VMMR3/EMRaw.cpp:1063:                                Log(("Force recompiler switch due to cr0 (%RGp) update rip=%RGv -> %RGv (enmState=%d)\n", pCtx->cr0, pCtx->rip, pOrgInstrGC, enmState));
VBox/VMM/VMMR3/EMRaw.cpp:1069:                                    Log(("emR3RawPrivileged: detected conflict -> disabled patch at %RGv\n", (RTGCPTR)pCtx->rip));
VBox/VMM/VMMR3/EMRaw.cpp:1372:         * Log important stuff before entering GC.
VBox/VMM/VMMR3/EMRaw.cpp:1376:            Log(("RV86: %04x:%08x IF=%d VMFlags=%x\n", pCtx->cs.Sel, pCtx->eip, pCtx->eflags.Bits.u1IF, pGCState->uVMFlags));
VBox/VMM/VMMR3/EMRaw.cpp:1378:            Log(("RR0: %x:%08x ESP=%x:%08x EFL=%x IF=%d/%d VMFlags=%x PIF=%d CPL=%d (Scanned=%d)\n",
VBox/VMM/VMMR3/EMRaw.cpp:1383:            Log(("RR1: %x:%08x ESP=%x:%08x IF=%d VMFlags=%x CPL=%x\n", pCtx->cs.Sel, pCtx->eip, pCtx->ss.Sel, pCtx->esp, pCtx->eflags.Bits.u1IF, pGCState->uVMFlags, (pCtx->ss.Sel & X86_SEL_RPL)));
VBox/VMM/VMMR3/EMRaw.cpp:1386:            Log(("RR3: %x:%08x ESP=%x:%08x IF=%d VMFlags=%x\n", pCtx->cs.Sel, pCtx->eip, pCtx->ss.Sel, pCtx->esp, pCtx->eflags.Bits.u1IF, pGCState->uVMFlags));
VBox/VMM/VMMR3/PATMPatch.cpp:519:    Log(("patmPatchGenSti at %RRv; next %RRv\n", pCurInstrGC, pNextInstrGC)); RT_NOREF_PV(pCurInstrGC);
VBox/VMM/VMMR3/PATMPatch.cpp:543:    Log(("patmPatchGenPopf at %RRv\n", pReturnAddrGC));
VBox/VMM/VMMR3/PATMPatch.cpp:547:        Log(("operand size override!!\n"));
VBox/VMM/VMMR3/PATMPatch.cpp:601:    Log(("PatchGenLoop %d jump %d to %08x offrel=%d\n", opcode, pPatch->nrJumpRecs, pTargetGC, pPatchAsmRec->offRelJump));
VBox/VMM/VMMR3/PATMPatch.cpp:738:        Log(("patmPatchGenIndirectCall\n"));
VBox/VMM/VMMR3/PATMPatch.cpp:770:        Log(("PatchGenCall from %RRv (next=%RRv) to %RRv\n", pCurInstrGC, pCurInstrGC + pCpu->cbInstr, pTargetGC));
VBox/VMM/VMMR3/PATMPatch.cpp:835:    Log(("patmPatchGenIndirectJump\n"));
VBox/VMM/VMMR3/PATMPatch.cpp:898:    Log(("patmPatchGenRet %RRv\n", pCurInstrGC));
VBox/VMM/VMMR3/PATMPatch.cpp:980:    Log(("pfnHelperCallGC %RRv\n", pVM->patm.s.pfnHelperCallGC));
VBox/VMM/VMMR3/PATMPatch.cpp:981:    Log(("pfnHelperRetGC  %RRv\n", pVM->patm.s.pfnHelperRetGC));
VBox/VMM/VMMR3/PATMPatch.cpp:982:    Log(("pfnHelperJumpGC %RRv\n", pVM->patm.s.pfnHelperJumpGC));
VBox/VMM/VMMR3/PATMPatch.cpp:983:    Log(("pfnHelperIretGC %RRv\n", pVM->patm.s.pfnHelperIretGC));
VBox/VMM/VMMR3/PATMPatch.cpp:1313:    Log(("patmPatchGenMovFromSS %RRv\n", pCurInstrGC)); RT_NOREF_PV(pCurInstrGC);
VBox/VMM/VMMR3/PDMDevHlp.cpp:868:    Log(("pdmR3DevHlp_PhysRead: caller='%s'/%d: returns %Rrc\n", pDevIns->pReg->szName, pDevIns->iInstance, VBOXSTRICTRC_VAL(rcStrict) ));
VBox/VMM/VMMR3/PDMDevHlp.cpp:897:    Log(("pdmR3DevHlp_PhysWrite: caller='%s'/%d: returns %Rrc\n", pDevIns->pReg->szName, pDevIns->iInstance, VBOXSTRICTRC_VAL(rcStrict) ));
VBox/VMM/VMMR3/PDMDevHlp.cpp:922:    Log(("pdmR3DevHlp_PhysGCPhys2CCPtr: caller='%s'/%d: returns %Rrc\n", pDevIns->pReg->szName, pDevIns->iInstance, rc));
VBox/VMM/VMMR3/PDMDevHlp.cpp:947:    Log(("pdmR3DevHlp_PhysGCPhys2CCPtrReadOnly: caller='%s'/%d: returns %Rrc\n", pDevIns->pReg->szName, pDevIns->iInstance, rc));
VBox/VMM/VMMR3/PDMDevHlp.cpp:962:    Log(("pdmR3DevHlp_PhysReleasePageMappingLock: caller='%s'/%d: returns void\n", pDevIns->pReg->szName, pDevIns->iInstance));
VBox/VMM/VMMR3/PDMDevHlp.cpp:1512:            Log(("PDM: Registered device '%s'/%d as PCI device %d on bus %d\n",
VBox/VMM/VMMR3/PDMDevHlp.cpp:1627:        Log(("pdmR3DevHlp_PCIIORegionRegister: caller='%s'/%d: aligning cbRegion %RGp -> %RGp\n",
VBox/VMM/VMMR3/PDMDevHlp.cpp:1706:        Log(("pdmR3DevHlp_PCIPhysRead: caller='%s'/%d: returns %Rrc - Not bus master! GCPhys=%RGp cbRead=%#zx\n",
VBox/VMM/VMMR3/PDMDevHlp.cpp:1734:        Log(("pdmR3DevHlp_PCIPhysWrite: caller='%s'/%d: returns %Rrc - Not bus master! GCPhys=%RGp cbWrite=%#zx\n",
VBox/VMM/VMMR3/PDMDevHlp.cpp:1922:        Log(("pdmR3DevHlp_DriverAttach: Registered LUN#%d '%s' with device '%s'/%d.\n",
VBox/VMM/VMMR3/PDMDevHlp.cpp:2234:        Log(("PDM: Registered RTC device '%s'/%d pDevIns=%p\n",
VBox/VMM/VMMR3/PDMDevHlp.cpp:2779:    Log(("PDM: Registered PCI bus device '%s'/%d pDevIns=%p\n", pDevIns->pReg->szName, pDevIns->iInstance, pDevIns));
VBox/VMM/VMMR3/PDMDevHlp.cpp:2920:    Log(("PDM: Registered PIC device '%s'/%d pDevIns=%p\n", pDevIns->pReg->szName, pDevIns->iInstance, pDevIns));
VBox/VMM/VMMR3/PDMDevHlp.cpp:3173:    Log(("PDM: Registered I/O APIC device '%s'/%d pDevIns=%p\n", pDevIns->pReg->szName, pDevIns->iInstance, pDevIns));
VBox/VMM/VMMR3/PDMDevHlp.cpp:3315:        Log(("PDM: Registered DMAC device '%s'/%d pDevIns=%p\n",
VBox/VMM/VMMR3/PDMDevHlp.cpp:3425:        Log(("PDM: Registered firmware device '%s'/%d pDevIns=%p\n",
VBox/VMM/VMMR3/PDMDevHlp.cpp:3455:        Log(("pdmR3DevHlp_VMReset: Halt On Reset!\n"));
VBox/VMM/VMMR3/CPUM.cpp:746:                Log(("CPUMR3Init: host CPU has leaky fxsave/fxrstor behaviour\n"));
VBox/VMM/VMMR3/CPUM.cpp:908:        Log(("The CPU doesn't support CPUID!\n"));
VBox/VMM/VMMR3/CPUM.cpp:2628:            Log(("%s-CPU%d: %s", pszPrefix, pVCpu->idCpu, szOutput));
VBox/VMM/VMMR3/CPUM.cpp:2630:            Log(("%s", szOutput));
VBox/VMM/VMMR3/CPUM.cpp:2635:        Log(("CPUMR3DisasmInstrCPU: DISInstr failed for %04X:%RGv rc=%Rrc\n", pCtx->cs.Sel, GCPtrPC, rc));
VBox/VMM/VMMR3/CPUM.cpp:2769:     * Log the cpuid.
VBox/VMM/VMMR3/VM.cpp:629:        Log(("VMR3Create: Created pUVM=%p pVM=%p pVMR0=%p hSelf=%#x cCpus=%RU32\n",
VBox/VMM/VMMR3/VM.cpp:1117:        Log(("vmR3InitRing0: skipping because of VBOX_SUPLIB_FAKE=fake\n"));
VBox/VMM/VMMR3/VM.cpp:1157:        Log(("vmR3InitRC: skipping because of VBOX_SUPLIB_FAKE=fake\n"));
VBox/VMM/VMMR3/VM.cpp:4072:     * Log the error.
VBox/VMM/VMMR3/VM.cpp:4639:    Log(("vmR3HotUnplugCpu for VCPU %u\n", idCpu));
VBox/VMM/VMMR3/VM.cpp:4706:    Log(("VMR3SetCpuExecutionCap: new priority = %d\n", uCpuExecutionCap));
VBox/VMM/VMMR0/HMVMXR0.cpp:2809:        /* Log the VCPU pointers, useful for debugging SMP VMs. */
VBox/VMM/VMMR0/HMVMXR0.cpp:13775:    Log(("hmR0VmxExitXcptGeneric: Reinjecting Xcpt. uVector=%#x cs:rip=%#04x:%#RX64\n", uVector, pCtx->cs.Sel, pCtx->rip));
VBox/VMM/VMMR0/VMMR0.cpp:428:        Log(("Switching to per-thread logging instance %p (key=%p)\n", &pR0Logger->Logger, pVM->pSession));
VBox/VMM/VMMR0/VMMR0.cpp:1989:            Log(("operation %#x is not supported\n", enmOperation));
VBox/VMM/VMMR0/PDMR0Device.cpp:87:        Log(("pdmRCDevHlp_PCIPhysRead: caller=%p/%d: returns %Rrc - Not bus master! GCPhys=%RGp cbRead=%#zx\n",
VBox/VMM/VMMR0/PDMR0Device.cpp:115:        Log(("pdmRCDevHlp_PCIPhysWrite: caller=%p/%d: returns %Rrc - Not bus master! GCPhys=%RGp cbWrite=%#zx\n",
VBox/VMM/VMMR0/PDMR0Device.cpp:241:    Log(("pdmR0DevHlp_PhysRead: caller=%p/%d: returns %Rrc\n", pDevIns, pDevIns->iInstance, VBOXSTRICTRC_VAL(rcStrict) ));
VBox/VMM/VMMR0/PDMR0Device.cpp:256:    Log(("pdmR0DevHlp_PhysWrite: caller=%p/%d: returns %Rrc\n", pDevIns, pDevIns->iInstance, VBOXSTRICTRC_VAL(rcStrict) ));
VBox/VMM/VMMR0/PDMR0Device.cpp:269:    Log(("pdmR0DevHlp_A20IsEnabled: caller=%p/%d: returns %RTbool\n", pDevIns, pDevIns->iInstance, fEnabled));
VBox/VMM/VMMR0/GVMMR0.cpp:993:                                                Log(("GVMMR0CreateVM: pVM=%p pVMR3=%p pGVM=%p hGVM=%d\n", pVM, pVM->pVMR3, pGVM, iHandle));
VBox/VMM/VMMR0/PGMR0.cpp:550:        Log(("WARNING: Unexpected VERR_PAGE_TABLE_NOT_PRESENT (%d) for page fault at %RGp error code %x (rip=%RGv)\n", rc, GCPhysFault, uErr, pRegFrame->rip));
VBox/VMM/VMMR0/PGMR0.cpp:603:            Log(("PGMR0Trap0eHandlerNPMisconfig: Resyncing aliases / tmp-off page at %RGp (uErr=%#x) %R[pgmpage]\n", GCPhysFault, uErr, pPage));
VBox/VMM/VMMR0/PGMR0.cpp:631:                Log(("PGMR0Trap0eHandlerNPMisconfig: %RGp (uErr=%#x) -> R3\n", GCPhysFault, uErr));
VBox/VMM/VMMR0/PGMR0.cpp:644:        Log(("PGMR0Trap0eHandlerNPMisconfig: Out of sync page at %RGp (uErr=%#x)\n", GCPhysFault, uErr));
VBox/VMM/VMMR0/CPUMR0.cpp:196:        Log(("CPUMR0Init: PE or PG not set. cr0=%#x\n", u32CR0));
VBox/VMM/VMMR0/CPUMR0.cpp:237:                Log(("CPUMR0Init: host uses sysenter cs=%08x%08x\n", ASMRdMsr_High(MSR_IA32_SYSENTER_CS), u32));
VBox/VMM/VMMR0/CPUMR0.cpp:264:                        Log(("CPUMR0Init: host uses syscall\n"));
VBox/VMM/VMMR0/CPUMR0.cpp:340:        Log(("CPUMR0Init: host uses debug registers (dr7=%x)\n", u32DR7));
VBox/VMM/VMMR0/CPUMR0.cpp:948:     * Log the result (pretty useless, requires enabling CPUM in VBoxDrv
VBox/VMM/VMMR0/CPUMR0.cpp:961:        Log(("CPUM: %u APICs, %u X2APICs\n", cEnabled, cX2Apics));
VBox/VMM/VMMR0/GMMR0.cpp:2527:                Log(("gmmR0AllocatePages:Base: Reserved=%#llx Allocated+Ballooned+Requested=%#llx+%#llx+%#x!\n",
VBox/VMM/VMMR0/GMMR0.cpp:2536:                Log(("gmmR0AllocatePages:Shadow: Reserved=%#x Allocated+Requested=%#x+%#x!\n",
VBox/VMM/VMMR0/GMMR0.cpp:2544:                Log(("gmmR0AllocatePages:Fixed: Reserved=%#x Allocated+Requested=%#x+%#x!\n",
VBox/VMM/VMMR0/GMMR0.cpp:2820:                                Log(("GMMR0AllocateHandyPages: #%#x/%#x: Not owner! hGVM=%#x hSelf=%#x\n",
VBox/VMM/VMMR0/GMMR0.cpp:2828:                            Log(("GMMR0AllocateHandyPages: #%#x/%#x: Not private! %.*Rhxs (type %d)\n", iPage, paPages[iPage].idPage, sizeof(*pPage), pPage, pPage->Common.u2State));
VBox/VMM/VMMR0/GMMR0.cpp:2835:                        Log(("GMMR0AllocateHandyPages: #%#x/%#x: Not found! (private)\n", iPage, paPages[iPage].idPage));
VBox/VMM/VMMR0/GMMR0.cpp:2853:                            Log(("GMMR0AllocateHandyPages: free shared page %x cRefs=%d\n", paPages[iPage].idSharedPage, pPage->Shared.cRefs));
VBox/VMM/VMMR0/GMMR0.cpp:2868:                            Log(("GMMR0AllocateHandyPages: #%#x/%#x: Not shared!\n", iPage, paPages[iPage].idSharedPage));
VBox/VMM/VMMR0/GMMR0.cpp:2875:                        Log(("GMMR0AllocateHandyPages: #%#x/%#x: Not found! (shared)\n", iPage, paPages[iPage].idSharedPage));
VBox/VMM/VMMR0/GMMR0.cpp:3066:            Log(("GMMR0AllocateLargePage: Reserved=%#llx Allocated+Requested=%#llx+%#x!\n",
VBox/VMM/VMMR0/GMMR0.cpp:3164:            Log(("GMMR0FreeLargePage: allocated=%#llx cPages=%#x!\n", pGVM->gmm.s.Stats.Allocated.cBasePages, cPages));
VBox/VMM/VMMR0/GMMR0.cpp:3256:        Log(("gmmR0FreeChunk: chunk still has %d mappings; don't free!\n", pChunk->cMappingsX));
VBox/VMM/VMMR0/GMMR0.cpp:3445:                Log(("gmmR0FreePages: allocated=%#llx cPages=%#x!\n", pGVM->gmm.s.Stats.Allocated.cBasePages, cPages));
VBox/VMM/VMMR0/GMMR0.cpp:3452:                Log(("gmmR0FreePages: allocated=%#llx cPages=%#x!\n", pGVM->gmm.s.Stats.Allocated.cShadowPages, cPages));
VBox/VMM/VMMR0/GMMR0.cpp:3459:                Log(("gmmR0FreePages: allocated=%#llx cPages=%#x!\n", pGVM->gmm.s.Stats.Allocated.cFixedPages, cPages));
VBox/VMM/VMMR0/GMMR0.cpp:3491:                    Log(("gmmR0AllocatePages: #%#x/%#x: not owner! hGVM=%#x hSelf=%#x\n", iPage, idPage,
VBox/VMM/VMMR0/GMMR0.cpp:3521:                Log(("gmmR0AllocatePages: #%#x/%#x: already free!\n", iPage, idPage));
VBox/VMM/VMMR0/GMMR0.cpp:3528:            Log(("gmmR0AllocatePages: #%#x/%#x: not found!\n", iPage, idPage));
VBox/VMM/VMMR0/GMMR0.cpp:3701:                        Log(("GMMR0BalloonedPages: +%#x - Global=%#llx / VM: Total=%#llx Req=%#llx Actual=%#llx (pending)\n",
VBox/VMM/VMMR0/GMMR0.cpp:3708:                        Log(("GMMR0BalloonedPages: +%#x - Global=%#llx / VM: Total=%#llx (user)\n",
VBox/VMM/VMMR0/GMMR0.cpp:3714:                    Log(("GMMR0BalloonedPages: cBasePages=%#llx Total=%#llx cBalloonedPages=%#llx Reserved=%#llx\n",
VBox/VMM/VMMR0/GMMR0.cpp:3736:                        Log(("GMMR0BalloonedPages: -%#x - Global=%#llx / VM: Total=%#llx Req=%#llx\n",
VBox/VMM/VMMR0/GMMR0.cpp:3745:                        Log(("GMMR0BalloonedPages: -%#x - Global=%#llx / VM: Total=%#llx (user)\n",
VBox/VMM/VMMR0/GMMR0.cpp:3750:                    Log(("GMMR0BalloonedPages: Total=%#llx cBalloonedPages=%#llx\n", pGVM->gmm.s.Stats.cBalloonedPages, cBalloonedPages));
VBox/VMM/VMMR0/GMMR0.cpp:3927:    Log(("gmmR0UnmapChunk: Chunk %#x is not mapped into pGVM=%p/%#x\n", pChunk->Core.Key, pGVM, pGVM->hSelf));
VBox/VMM/VMMR0/GMMR0.cpp:3963:    Log(("gmmR0UnmapChunk: Chunk %#x is not mapped into pGVM=%p/%#x (legacy)\n", pChunk->Core.Key, pGVM, pGVM->hSelf));
VBox/VMM/VMMR0/GMMR0.cpp:3988:            Log(("gmmR0MapChunk: chunk %#x is already mapped at %p!\n", pChunk->Core.Key, *ppvR3));
VBox/VMM/VMMR0/GMMR0.cpp:4005:            Log(("gmmR0MapChunk: chunk %#x is already mapped at %p!\n", pChunk->Core.Key, *ppvR3));
VBox/VMM/VMMR0/GMMR0.cpp:4186:                Log(("GMMR0MapUnmapChunk: idChunkMap=%#x\n", idChunkMap));
VBox/VMM/VMMR0/GMMR0.cpp:4201:                Log(("GMMR0MapUnmapChunk: idChunkUnmap=%#x\n", idChunkUnmap));
VBox/VMM/VMMR0/GMMR0.cpp:4268:        Log(("GMMR0SeedChunk: not in legacy allocation mode!\n"));
VBox/VMM/VMMR0/GMMR0.cpp:4402:    Log(("gmmR0ShModNewGlobal: %s %s size %#x os %u rgn %u\n", pszModuleName, pszVersion, cbModule, enmGuestOS, cRegions));
VBox/VMM/VMMR0/GMMR0.cpp:4405:        Log(("gmmR0ShModNewGlobal: Too many modules\n"));
VBox/VMM/VMMR0/GMMR0.cpp:4412:        Log(("gmmR0ShModNewGlobal: No memory\n"));
VBox/VMM/VMMR0/GMMR0.cpp:4426:        Log(("gmmR0ShModNewGlobal: rgn[%u]=%RGvLB%#x\n", i, paRegions[i].GCRegionAddr, paRegions[i].cbRegion));
VBox/VMM/VMMR0/GMMR0.cpp:4586:    Log(("GMMR0RegisterSharedModule %s %s base %RGv size %x hash %x\n", pszModuleName, pszVersion, GCPtrModBase, cbModule, uHash));
VBox/VMM/VMMR0/GMMR0.cpp:4619:                        Log(("GMMR0RegisterSharedModule: new module %s %s\n", pszModuleName, pszVersion));
VBox/VMM/VMMR0/GMMR0.cpp:4630:                    Log(("GMMR0RegisterSharedModule: new per vm module %s %s, gbl users %d\n", pszModuleName, pszVersion, pGblMod->cUsers));
VBox/VMM/VMMR0/GMMR0.cpp:4643:                Log(("GMMR0RegisterSharedModule: already registered %s %s, gbl users %d\n", pszModuleName, pszVersion, pGblMod->cUsers));
VBox/VMM/VMMR0/GMMR0.cpp:4650:                Log(("GMMR0RegisterSharedModule: Address clash!\n"
VBox/VMM/VMMR0/GMMR0.cpp:4733:    Log(("GMMR0UnregisterSharedModule %s %s base=%RGv size %x\n", pszModuleName, pszVersion, GCPtrModBase, cbModule));
VBox/VMM/VMMR0/GMMR0.cpp:4920:        Log(("Allocate page descriptor array for %d pages\n", cPages));
VBox/VMM/VMMR0/GMMR0.cpp:4935:        Log(("New shared page guest %RGp host %RHp\n", pPageDesc->GCPhys, pPageDesc->HCPhys));
VBox/VMM/VMMR0/GMMR0.cpp:4942:    Log(("Replace existing page guest %RGp host %RHp id %#x -> id %#x\n",
VBox/VMM/VMMR0/GMMR0.cpp:4959:        Log(("Old shared page was freed -> create a new one\n"));
VBox/VMM/VMMR0/GMMR0.cpp:4964:    Log(("Replace existing page guest host %RHp -> %RHp\n", pPageDesc->HCPhys, ((uint64_t)pPage->Shared.pfn) << PAGE_SHIFT));
VBox/VMM/VMMR0/GMMR0.cpp:4991:        Log(("Map chunk into process!\n"));
VBox/VMM/VMMR0/GMMR0.cpp:5008:        Log(("Unexpected differences found between local and shared page; skip\n"));
VBox/VMM/VMMR0/GMMR0.cpp:5104:        Log(("GMMR0ResetSharedModules\n"));
VBox/VMM/VMMR0/GMMR0.cpp:5136:    Log(("gmmR0CheckSharedModule: check %s %s base=%RGv size=%x\n",
VBox/VMM/VMMR0/GMMR0.cpp:5179:        Log(("GMMR0CheckSharedModules\n"));
VBox/VMM/VMMR0/GMMR0.cpp:5186:        Log(("GMMR0CheckSharedModules done (rc=%Rrc)!\n", rc));
VBox/VMM/VMMR0/HMR0.cpp:1274:    Log(("HMR0TermVM: %p\n", pVM));
VBox/VMM/VMMR0/HMR0.cpp:1297:    Log(("HMR0SetupVM: %p\n", pVM));
VBox/VMM/VMMR0/HMR0.cpp:1857:    Log(("%s %04x - %RX64 %RX64 - base=%RX64 limit=%08x dpl=%d %s\n", pszMsg,
VBox/VMM/VMMR0/HMR0.cpp:1861:    Log(("%s %04x - %08x %08x - base=%08x limit=%08x dpl=%d %s\n", pszMsg,
VBox/VMM/VMMR0/HMR0.cpp:1926:        Log(("rax=%016RX64 rbx=%016RX64 rcx=%016RX64 rdx=%016RX64\n"
VBox/VMM/VMMR0/HMR0.cpp:1964:        Log(("eax=%08x ebx=%08x ecx=%08x edx=%08x esi=%08x edi=%08x\n"
VBox/VMM/VMMR0/HMR0.cpp:1991:    Log(("FPU:\n"
VBox/VMM/VMMR0/HMR0.cpp:2001:    Log(("MSR:\n"
VBox/VMM/VMMR0/PGMR0SharedPage.cpp:58:    Log(("PGMR0SharedModuleCheck: check %s %s base=%RGv size=%x\n", pModule->szName, pModule->szVersion, pModule->Core.Key, pModule->cbModule));
VBox/VMM/VMMR0/PGMR0SharedPage.cpp:102:                        Log(("PGMR0SharedModuleCheck: shared page gst virt=%RGv phys=%RGp host %RHp->%RHp\n",
VBox/VMM/VMMAll/GIMAll.cpp:176:    Log(("GIM: GIMExecHypercallInstr: Failed to disassemble CS:RIP=%04x:%08RX64. rc=%Rrc\n", pCtx->cs.Sel, pCtx->rip, rc));
VBox/VMM/VMMAll/PGMAll.cpp:411:    Log(("PGMTrap0eHandler: uErr=%RGx pvFault=%RGv eip=%04x:%RGv cr3=%RGp\n", uErr, pvFault, pRegFrame->cs.Sel, (RTGCPTR)pRegFrame->rip, (RTGCPHYS)CPUMGetGuestCR3(pVCpu)));
VBox/VMM/VMMAll/PGMAll.cpp:483:            Log(("WARNING: Unexpected VERR_PAGE_TABLE_NOT_PRESENT (%d) for page fault at %RGv error code %x (rip=%RGv)\n", rc, pvFault, uErr, pRegFrame->rip));
VBox/VMM/VMMAll/PGMAll.cpp:572:        Log(("PGMIsValidAccess: access violation for %RGv rc=%d\n", Addr, rc));
VBox/VMM/VMMAll/PGMAll.cpp:588:        Log(("PGMIsValidAccess: access violation for %RGv attr %#llx vs %d:%d\n", Addr, fPage, fWrite, fUser));
VBox/VMM/VMMAll/PGMAll.cpp:622:        Log(("PGMVerifyAccess: access violation for %RGv rc=%d\n", Addr, rc));
VBox/VMM/VMMAll/PGMAll.cpp:638:        Log(("PGMVerifyAccess: access violation for %RGv attr %#llx vs %d:%d\n", Addr, fPageGst, fWrite, fUser));
VBox/VMM/VMMAll/PGMAll.cpp:819:        Log(("PGMInterpretInstruction: returns %Rrc (pvFault=%RGv)\n", VBOXSTRICTRC_VAL(rc), pvFault));
VBox/VMM/VMMAll/PGMAll.cpp:949:                Log(("pgmShwMakePageSupervisorAndWritable: PDE=%#llx", pPde->u));
VBox/VMM/VMMAll/PGMAll.cpp:951:                Log(("-> PDE=%#llx (32)\n", pPde->u));
VBox/VMM/VMMAll/PGMAll.cpp:959:                Log(("pgmShwMakePageSupervisorAndWritable: PDE=%#llx", pPde->u));
VBox/VMM/VMMAll/PGMAll.cpp:961:                Log(("-> PDE=%#llx (PAE)\n", pPde->u));
VBox/VMM/VMMAll/PGMAll.cpp:2179:            Log(("PGMSyncCR3: pending pgm pool sync after MapCR3!\n"));
VBox/VMM/VMMAll/PGMAll.cpp:2266:                Log(("PGMChangeMode: CR4.PSE %d -> %d\n", pVCpu->pgm.s.fGst32BitPageSizeExtension, fPse));
VBox/VMM/VMMAll/PGMAll.cpp:2328:        Log(("PGMCr0WpEnabled: %llu WP0 hacks active - clearing page pool\n", pVCpu->pgm.s.cNetwareWp0Hacks));
VBox/VMM/VMMAll/PGMAll.cpp:2434:    Log(("PGMNotifyNxeChanged: fNxe=%RTbool\n", fNxe));
VBox/VMM/VMMAll/VMAll.cpp:234:    Log(("VMSetRuntimeErrorV: fFlags=%#x pszErrorId=%s\n", fFlags, pszErrorId));
VBox/VMM/VMMAll/VMAll.cpp:288:    Log(("VMSetRuntimeErrorV: returns %Rrc (pszErrorId=%s)\n", rc, pszErrorId));
VBox/VMM/VMMAll/IEMAllInstructionsTwoByte0f.cpp.h:7708:    Log(("iemOp_Grp10 aka UD1 -> #UD\n"));
VBox/VMM/VMMAll/IEMAllInstructionsTwoByte0f.cpp.h:8508:    Log(("cmpxchg16b -> #UD\n"));
VBox/VMM/VMMAll/TMAllVirtual.cpp:57:        Log(("TM: u64DeltaPrev=%RI64 u64PrevNanoTS=0x%016RX64 u64NanoTS=0x%016RX64 pVM=%p (debugging?)\n",
VBox/VMM/VMMAll/TMAllVirtual.cpp:352:        Log(("TMVirtualGetSync: u64Delta=%RX64\n", u64Delta));
VBox/VMM/VMMAll/TMAllVirtual.cpp:681:                    Log(("TMVirtualGetSync: u64Delta=%RX64 (NoLock)\n", u64Delta));
VBox/VMM/VMMAll/IOMAllMMIO.cpp:180:                        Log(("iomMMIODoComplicatedWrite: GCPhys=%RGp GCPhysStart=%RGp cbValue=%u rc=%Rrc [read]\n", GCPhys, GCPhysStart, cbValue, rc2));
VBox/VMM/VMMAll/IOMAllMMIO.cpp:256:                    Log(("iomMMIODoComplicatedWrite: GCPhys=%RGp GCPhysStart=%RGp cbValue=%u rc=%Rrc [write]\n", GCPhys, GCPhysStart, cbValue, rc2));
VBox/VMM/VMMAll/IOMAllMMIO.cpp:398:                    Log(("iomMMIODoComplicatedRead: GCPhys=%RGp GCPhysStart=%RGp cbValue=%u rc=%Rrc\n", GCPhys, GCPhysStart, cbValue, rc2));
VBox/VMM/VMMAll/IOMAllMMIO.cpp:577:    Log(("iomMmioCommonPfHandler: GCPhys=%RGp uErr=%#x rip=%RGv\n", GCPhysFault, uErrorCode, (RTGCPTR)pCtxCore->rip));
VBox/VMM/VMMAll/IOMAllMMIO.cpp:657:        Log(("IOM: Hit unsupported IEM feature!\n"));
VBox/VMM/VMMAll/IOMAllMMIO.cpp:1094:    Log(("IOMMMIOMapMMIO2Page %RGp -> %RGp flags=%RX64\n", GCPhys, GCPhysRemapped, fPageFlags));
VBox/VMM/VMMAll/IOMAllMMIO.cpp:1170:    Log(("IOMMMIOMapMMIOHCPage %RGp -> %RGp flags=%RX64\n", GCPhys, HCPhys, fPageFlags));
VBox/VMM/VMMAll/IOMAllMMIO.cpp:1219:    Log(("IOMMMIOResetRegion %RGp\n", GCPhys));
VBox/VMM/VMMAll/PGMAllPool.cpp:760:        Log(("pgmRZPoolMonitorIsReused: reused %RGv for interrupt stack (rsp=%RGv).\n", pvFault, pRegFrame->rsp));
VBox/VMM/VMMAll/PGMAllPool.cpp:805:                Log(("pgmRZPoolMonitorIsReused: OP_STOSQ\n"));
VBox/VMM/VMMAll/PGMAllPool.cpp:1110:        Log(("CPU%d: pgmRZPoolAccessPfHandler pgm pool page for %RGp changed (to %RGp) while waiting!\n", pVCpu->idCpu, PHYS_PAGE_ADDRESS(GCPhysFault), PHYS_PAGE_ADDRESS(pPage->GCPhys)));
VBox/VMM/VMMAll/PGMAllPool.cpp:1177:        Log(("Possible page reuse cMods=%d -> %d (locked=%d type=%s)\n", pPage->cModifications, pPage->cModifications * 2, pgmPoolIsPageLocked(pPage), pgmPoolPoolKindToStr(pPage->enmKind)));
VBox/VMM/VMMAll/PGMAllPool.cpp:1190:        Log(("Mod overflow %RGv cMods=%d (locked=%d type=%s)\n", pvFault, pPage->cModifications, pgmPoolIsPageLocked(pPage), pgmPoolPoolKindToStr(pPage->enmKind)));
VBox/VMM/VMMAll/PGMAllPool.cpp:1326:                    Log(("Flush duplicate page idx=%d GCPhys=%RGp type=%s\n", pPageHead->idx, pPageHead->GCPhys, pgmPoolPoolKindToStr(pPageHead->enmKind)));
VBox/VMM/VMMAll/PGMAllPool.cpp:1496:        Log(("CPU%d: PGM_ALL_CB_DECL pgm pool page for %RGp changed (to %RGp) while waiting!\n", pVCpu->idCpu, PHYS_PAGE_ADDRESS(GCPhys), PHYS_PAGE_ADDRESS(pPage->GCPhys)));
VBox/VMM/VMMAll/PGMAllPool.cpp:1535:                Log(("rc=%d idx=%d guest %RX64 shw=%RX64 vs %RHp\n", rc, i, pGstPT->a[i].u, PGMSHWPTEPAE_GET_LOG(pShwPT->a[i]), HCPhys));
VBox/VMM/VMMAll/PGMAllPool.cpp:1558:                                Log(("GCPhys=%RGp idx=%d %RX64 vs %RX64\n", pTempPage->GCPhys, j, PGMSHWPTEPAE_GET_LOG(pShwPT->a[j]), PGMSHWPTEPAE_GET_LOG(pShwPT2->a[j])));
VBox/VMM/VMMAll/PGMAllPool.cpp:1601:                Log(("rc=%d idx=%d guest %x shw=%RX64 vs %RHp\n", rc, i, pGstPT->a[i].u, PGMSHWPTEPAE_GET_LOG(pShwPT->a[i]), HCPhys));
VBox/VMM/VMMAll/PGMAllPool.cpp:1624:                                Log(("GCPhys=%RGp idx=%d %RX64 vs %RX64\n", pTempPage->GCPhys, j, PGMSHWPTEPAE_GET_LOG(pShwPT->a[j]), PGMSHWPTEPAE_GET_LOG(pShwPT2->a[j])));
VBox/VMM/VMMAll/PGMAllPool.cpp:1799:    Log(("Flush dirty page %RGp cMods=%d\n", pPage->GCPhys, pPage->cModifications));
VBox/VMM/VMMAll/PGMAllPool.cpp:1860:        Log(("Flush reused page table!\n"));
VBox/VMM/VMMAll/PGMAllPool.cpp:1865:        Log(("Removed dirty page %RGp cMods=%d cChanges=%d\n", pPage->GCPhys, pPage->cModifications, cChanges));
VBox/VMM/VMMAll/PGMAllPool.cpp:1901:    Log(("Add dirty page %RGp (slot=%d)\n", pPage->GCPhys, idxFree));
VBox/VMM/VMMAll/PGMAllPool.cpp:2000:    Log(("pgmPoolResetDirtyPages\n"));
VBox/VMM/VMMAll/PGMAllPool.cpp:2040:    Log(("pgmPoolResetDirtyPage %RGv\n", GCPtrPage)); RT_NOREF_PV(GCPtrPage);
VBox/VMM/VMMAll/PGMAllPool.cpp:2890:        Log(("SyncCR3: PGM_SYNC_CLEAR_PGM_POOL is set -> VINF_PGM_SYNC_CR3\n"));
VBox/VMM/VMMAll/PGMAllPool.cpp:2909:            Log(("pgmPoolMonitorModifiedClearAll caused a pgm flush -> call pgmPoolSyncCR3 again!\n"));
VBox/VMM/VMMAll/PGMAllPool.cpp:3363:            Log(("iFirstPresent=%d cPresent=%d\n", pPage->iFirstPresent, pPage->cPresent));
VBox/VMM/VMMAll/PGMAllPool.cpp:3367:                    Log(("i=%d cFound=%d\n", i, ++cFound));
VBox/VMM/VMMAll/PGMAllPool.cpp:3438:            Log(("iFirstPresent=%d cPresent=%d\n", pPage->iFirstPresent, pPage->cPresent));
VBox/VMM/VMMAll/PGMAllPool.cpp:3439:            Log(("Found %RX64 expected %RX64\n", PGMSHWPTEPAE_GET_U(pPT->a[iPte]) & (X86_PTE_PAE_PG_MASK | X86_PTE_P | X86_PTE_PAE_MBZ_MASK_NX), u64));
VBox/VMM/VMMAll/PGMAllPool.cpp:3442:                    Log(("i=%d cFound=%d\n", i, ++cFound));
VBox/VMM/VMMAll/PGMAllPool.cpp:3474:            Log(("iFirstPresent=%d cPresent=%d\n", pPage->iFirstPresent, pPage->cPresent));
VBox/VMM/VMMAll/PGMAllPool.cpp:3477:                    Log(("i=%d cFound=%d\n", i, ++cFound));
VBox/VMM/VMMAll/PGMAllPool.cpp:3507:            Log(("iFirstPresent=%d cPresent=%d\n", pPage->iFirstPresent, pPage->cPresent));
VBox/VMM/VMMAll/PGMAllPool.cpp:3510:                    Log(("i=%d cFound=%d\n", i, ++cFound));
VBox/VMM/VMMAll/PGMAllPool.cpp:3650:        Log(("pgmPoolTrackUpdateGCPhys: update large page PDE for %RGp (%RGp)\n", GCPhysBase, GCPhysPage));
VBox/VMM/VMMAll/PGMAllPool.cpp:4989:        Log(("pgmPoolFlushPage: current active shadow CR3, rejected. enmKind=%s idx=%d\n", pgmPoolPoolKindToStr(pPage->enmKind), pPage->idx));
VBox/VMM/VMMAll/PGMAllPool.cpp:5207:            Log(("pgmPoolAlloc: returns %Rrc (Free)\n", rc));
VBox/VMM/VMMAll/PGMAllPool.cpp:5261:        Log(("pgmPoolAlloc: returns %Rrc (Insert)\n", rc3));
VBox/VMM/VMMAll/PGMAllPool.cpp:5387:                    Log(("PGMPoolFlushPage: found pgm pool pages for %RGp\n", GCPhys));
VBox/VMM/VMMAll/APICAll.cpp:2284:                Log(("APIC%u: Invalid state transition attempted\n", pVCpu->idCpu));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:52:        Log(("iemHlpCheckPortIOPermissionBitmap: Port=%#x cb=%d - TSS type %#x (attr=%#x) has no I/O bitmap -> #GP(0)\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:65:        Log(("iemHlpCheckPortIOPermissionBitmap: Error reading offIoBitmap (%Rrc)\n", VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:79:        Log(("iemHlpCheckPortIOPermissionBitmap: offFirstBit=%#x + 1 is beyond u32Limit=%#x -> #GP(0)\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:94:        Log(("iemHlpCheckPortIOPermissionBitmap: Error reading I/O bitmap @%#x (%Rrc)\n", offFirstBit, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:105:        Log(("iemHlpCheckPortIOPermissionBitmap: u16Port=%#x LB %u - access denied (bm=%#x mask=%#x) -> #GP(0)\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:994:        Log(("BranchTaskSegment invalid priv. uSel=%04x TSS DPL=%d CPL=%u Sel RPL=%u -> #GP\n", uSel, pDesc->Legacy.Gate.u2Dpl,
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1004:        Log(("BranchTaskSegment TSS not present uSel=%04x -> #NP\n", uSel));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1036:        Log(("BranchTaskGate invalid priv. uSel=%04x TSS DPL=%d CPL=%u Sel RPL=%u -> #GP\n", uSel, pDesc->Legacy.Gate.u2Dpl,
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1046:        Log(("BranchTaskSegment segment not present uSel=%04x -> #NP\n", uSel));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1056:        Log(("BranchTaskGate TSS is in LDT. uSel=%04x uSelTss=%04x -> #GP\n", uSel, uSelTss));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1067:        Log(("BranchTaskGate TSS is busy. uSel=%04x uSelTss=%04x DescType=%#x -> #GP\n", uSel, uSelTss,
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1074:        Log(("BranchTaskGate TSS is not present. uSel=%04x uSelTss=%04x -> #NP\n", uSel, uSelTss));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1136:        Log(("BranchCallGate invalid priv. uSel=%04x Gate DPL=%d CPL=%u Sel RPL=%u -> #GP\n", uSel, pDesc->Legacy.Gate.u2Dpl,
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1144:        Log(("BranchCallGate Gate not present uSel=%04x -> #NP\n", uSel));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1160:        Log(("BranchCallGate %04x:%08RX64 -> not a code selector (u1DescType=%u u4Type=%#x).\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1172:                Log(("BranchCallGate jump (conforming) bad DPL uNewCS=%04x Gate DPL=%d CPL=%u -> #GP\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1181:                Log(("BranchCallGate jump (non-conforming) bad DPL uNewCS=%04x Gate DPL=%d CPL=%u -> #GP\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1192:            Log(("BranchCallGate call invalid priv. uNewCS=%04x Gate DPL=%d CPL=%u -> #GP\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1203:            Log(("BranchCallGate uNewCS %04x -> not a 64-bit code segment.\n", uNewCS));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1211:            Log(("BranchCallGate uNewCS %04x -> both L and D are set.\n", uNewCS));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1218:        Log(("BranchCallGate target CS is not present. uSel=%04x uNewCS=%04x -> #NP(CS)\n", uSel, uNewCS));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1241:                Log(("BranchCallGate jump %04x:%08RX64 -> out of bounds (%#x) -> #GP(0)\n", uNewCS, uNewRip, cbLimit));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1250:            Log(("BranchCallGate jump %04x:%016RX64 - not canonical -> #GP\n", uNewCS, uNewRip));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1332:                Log(("BranchCallGate inner stack past TSS limit - %u > %u -> #TS(TSS)\n", offNewStack + cbNewStack - 1, pCtx->tr.u32Limit));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1340:                Log(("BranchCallGate: TSS mapping failed (%Rrc)\n", VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1370:                Log(("BranchCallGate: TSS unmapping failed (%Rrc)\n", VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1382:                    Log(("BranchCallGate new SS NULL -> #TS(NewSS)\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1395:                    Log(("BranchCallGate call bad RPL/DPL uNewSS=%04x SS DPL=%d CS DPL=%u -> #TS(NewSS)\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1403:                    Log(("BranchCallGate call new SS -> not a writable data selector (u4Type=%#x)\n", DescSS.Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1409:                    Log(("BranchCallGate New stack not present uSel=%04x -> #SS(NewSS)\n", uNewSS));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1469:                Log(("BranchCallGate: Incoming stack (%04x:%08RX64) not accessible, rc=%Rrc\n", uNewSS, uNewRsp, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1475:                Log(("BranchCallGate: New stack probe unmapping failed (%Rrc)\n", VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1512:                            Log(("BranchCallGate: Old stack mapping (32-bit) failed (%Rrc)\n", VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1524:                            Log(("BranchCallGate: Old stack unmapping (32-bit) failed (%Rrc)\n", VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1547:                            Log(("BranchCallGate: Old stack mapping (16-bit) failed (%Rrc)\n", VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1559:                            Log(("BranchCallGate: Old stack unmapping (32-bit) failed (%Rrc)\n", VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1583:                Log(("BranchCallGate: New stack unmapping failed (%Rrc)\n", VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1597:                    Log(("BranchCallGate %04x:%08RX64 -> out of bounds (%#x)\n", uNewCS, uNewRip, cbLimit));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1607:                    Log(("BranchCallGate call %04x:%016RX64 - not canonical -> #GP\n", uNewCS, uNewRip));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1664:                    Log(("BranchCallGate %04x:%08RX64 -> out of bounds (%#x)\n", uNewCS, uNewRip, cbLimit));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1673:                    Log(("BranchCallGate call %04x:%016RX64 - not canonical -> #GP\n", uNewCS, uNewRip));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1770:                Log(("branch %04x -> wrong sys selector (64-bit): %d\n", uSel, pDesc->Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1788:            Log(("branch %04x -> busy 286 TSS\n", uSel));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1792:            Log(("branch %04x -> busy 386 TSS\n", uSel));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1801:            Log(("branch %04x -> wrong sys selector: %d\n", uSel, pDesc->Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1829:            Log(("iemCImpl_FarJmp: 16-bit limit\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1850:        Log(("jmpf %04x:%08RX64 -> invalid selector, #GP(0)\n", uSel, offSeg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1863:        Log(("jmpf %04x:%08RX64 -> segment not present\n", uSel, offSeg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1877:        Log(("jmpf %04x:%08RX64 -> not a code selector (u4Type=%#x).\n", uSel, offSeg, Desc.Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1886:        Log(("jmpf %04x:%08RX64 -> both L and D are set.\n", uSel, offSeg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1895:            Log(("jmpf %04x:%08RX64 -> DPL violation (conforming); DPL=%d CPL=%u\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1904:            Log(("jmpf %04x:%08RX64 -> CPL != DPL; DPL=%d CPL=%u\n", uSel, offSeg, Desc.Legacy.Gen.u2Dpl, pVCpu->iem.s.uCpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1909:            Log(("jmpf %04x:%08RX64 -> RPL > DPL; RPL=%d CPL=%u\n", uSel, offSeg, (uSel & X86_SEL_RPL), pVCpu->iem.s.uCpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:1928:            Log(("jmpf %04x:%08RX64 -> out of bounds (%#x)\n", uSel, offSeg, cbLimit));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2038:        Log(("callf %04x:%08RX64 -> invalid selector, #GP(0)\n", uSel, offSeg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2058:        Log(("callf %04x:%08RX64 -> not a code selector (u4Type=%#x).\n", uSel, offSeg, Desc.Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2067:        Log(("callf %04x:%08RX64 -> both L and D are set.\n", uSel, offSeg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2076:            Log(("callf %04x:%08RX64 -> DPL violation (conforming); DPL=%d CPL=%u\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2085:            Log(("callf %04x:%08RX64 -> CPL != DPL; DPL=%d CPL=%u\n", uSel, offSeg, Desc.Legacy.Gen.u2Dpl, pVCpu->iem.s.uCpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2090:            Log(("callf %04x:%08RX64 -> RPL > DPL; RPL=%d CPL=%u\n", uSel, offSeg, (uSel & X86_SEL_RPL), pVCpu->iem.s.uCpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2098:        Log(("callf %04x:%08RX64 -> segment not present\n", uSel, offSeg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2123:            Log(("callf %04x:%016RX64 - not canonical -> #GP\n", uSel, offSeg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2132:            Log(("callf %04x:%08RX64 -> out of bounds (%#x)\n", uSel, offSeg, cbLimit));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2277:        Log(("retf %04x:%08RX64 -> invalid selector, #GP(0)\n", uNewCs, uNewRip));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2291:        Log(("retf %04x:%08RX64 -> not a code selector (u1DescType=%u u4Type=%#x).\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2301:        Log(("retf %04x:%08RX64 -> both L & D set.\n", uNewCs, uNewRip));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2308:        Log(("retf %04x:%08RX64 -> RPL < CPL(%d).\n", uNewCs, uNewRip, pVCpu->iem.s.uCpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2316:            Log(("retf %04x:%08RX64 -> DPL violation (conforming); DPL=%u RPL=%u\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2325:            Log(("retf %04x:%08RX64 -> RPL != DPL; DPL=%u RPL=%u\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2334:        Log(("retf %04x:%08RX64 -> segment not present\n", uNewCs, uNewRip));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2382:                Log(("retf %04x:%08RX64 %04x:%08RX64 -> invalid stack selector, #GP\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2400:            Log(("retf %04x:%08RX64 %04x:%08RX64 - SS.RPL != CS.RPL -> #GP(SS)\n", uNewCs, uNewRip, uNewOuterSs, uNewOuterRsp));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2409:            Log(("retf %04x:%08RX64 %04x:%08RX64 - SS not a writable data segment (u1DescType=%u u4Type=%#x) -> #GP(SS).\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2419:            Log(("retf %04x:%08RX64 %04x:%08RX64 - SS has both L & D set -> #GP(SS).\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2427:            Log(("retf %04x:%08RX64 %04x:%08RX64 - SS.DPL(%u) != CS.RPL (%u) -> #GP(SS).\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2435:            Log(("retf %04x:%08RX64 %04x:%08RX64 - SS not present -> #NP(SS).\n", uNewCs, uNewRip, uNewOuterSs, uNewOuterRsp));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2452:                Log(("retf %04x:%08RX64 %04x:%08RX64 - not canonical -> #GP.\n", uNewCs, uNewRip, uNewOuterSs, uNewOuterRsp));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2461:                Log(("retf %04x:%08RX64 %04x:%08RX64 - out of bounds (%#x)-> #GP(CS).\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2549:                Log(("retf %04x:%08RX64 - not canonical -> #GP\n", uNewCs, uNewRip));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2558:                Log(("retf %04x:%08RX64 -> out of bounds (%#x)\n", uNewCs, uNewRip, cbLimitCs));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2659:            Log(("retn newrip=%llx - out of bounds (%x) -> #GP\n", NewRip.u, pCtx->cs.u32Limit));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:2667:            Log(("retn newrip=%llx - not canonical -> #GP\n", NewRip.u));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3133:        Log(("iret_prot_NestedTask TSS not in LDT. uSelRet=%04x -> #TS\n", uSelRet));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3144:        Log(("iret_prot_NestedTask Invalid TSS type. uSelRet=%04x -> #TS\n", uSelRet));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3151:        Log(("iret_prot_NestedTask TSS is not busy. uSelRet=%04x DescType=%#x -> #TS\n", uSelRet, TssDesc.Legacy.Gate.u4Type));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3157:        Log(("iret_prot_NestedTask TSS is not present. uSelRet=%04x -> #NP\n", uSelRet));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3239:        Log(("iret %04x:%08x -> invalid CS selector, #GP(0)\n", uNewCs, uNewEip));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3247:        Log(("iret %04x:%08x - rcStrict=%Rrc when fetching CS\n", uNewCs, uNewEip, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3254:        Log(("iret %04x:%08x - CS is system segment (%#x) -> #GP\n", uNewCs, uNewEip, DescCS.Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3259:        Log(("iret %04x:%08x - not code segment (%#x) -> #GP\n", uNewCs, uNewEip, DescCS.Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3274:                Log(("iret: Ring-0 compression fix: uNewCS=%#x -> %#x\n", uNewCs, uNewCs & X86_SEL_MASK_OFF_RPL));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3279:                Log(("iret: uNewCs=%#x genuine return to ring-1.\n", uNewCs));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3286:            Log(("iret: Ring-1 compression fix: uNewCS=%#x -> %#x\n", uNewCs, (uNewCs & X86_SEL_MASK_OFF_RPL) | 1));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3298:            Log(("iret %04x:%08x - RPL != DPL (%d) -> #GP\n", uNewCs, uNewEip, DescCS.Legacy.Gen.u2Dpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3304:        Log(("iret %04x:%08x - RPL < DPL (%d) -> #GP\n", uNewCs, uNewEip, DescCS.Legacy.Gen.u2Dpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3309:        Log(("iret %04x:%08x - RPL < CPL (%d) -> #GP\n", uNewCs, uNewEip, pVCpu->iem.s.uCpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3316:        Log(("iret %04x:%08x - CS not present -> #NP\n", uNewCs, uNewEip));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3356:            Log(("iret %04x:%08x/%04x:%08x -> invalid SS selector, #GP(0)\n", uNewCs, uNewEip, uNewSS, uNewESP));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3364:            Log(("iret %04x:%08x/%04x:%08x - %Rrc when fetching SS\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3372:            Log(("iret %04x:%08x/%04x:%08x -> SS.RPL != CS.RPL -> #GP\n", uNewCs, uNewEip, uNewSS, uNewESP));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3377:            Log(("iret %04x:%08x/%04x:%08x -> SS.DPL (%d) != CS.RPL -> #GP\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3385:            Log(("iret %04x:%08x/%04x:%08x -> SS is system segment (%#x) -> #GP\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3391:            Log(("iret %04x:%08x/%04x:%08x - not writable data segment (%#x) -> #GP\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3399:            Log(("iret %04x:%08x/%04x:%08x -> SS not present -> #SS\n", uNewCs, uNewEip, uNewSS, uNewESP));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3408:            Log(("iret %04x:%08x/%04x:%08x -> EIP is out of bounds (%#x) -> #GP(0)\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3490:            Log(("iret %04x:%08x - EIP is out of bounds (%#x) -> #GP(0)\n", uNewCs, uNewEip, cbLimitCS));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3568:        Log(("iretq with NT=1 (eflags=%#x) -> #GP(0)\n", pCtx->eflags.u));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3632:        Log(("iret %04x:%016RX64/%04x:%016RX64 -> invalid CS selector, #GP(0)\n", uNewCs, uNewRip, uNewSs, uNewRsp));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3640:        Log(("iret %04x:%016RX64/%04x:%016RX64 - rcStrict=%Rrc when fetching CS\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3649:        Log(("iret %04x:%016RX64/%04x:%016RX64 - CS is not a code segment T=%u T=%#xu -> #GP\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3660:            Log(("iret %04x:%016RX64 - RPL != DPL (%d) -> #GP\n", uNewCs, uNewRip, DescCS.Legacy.Gen.u2Dpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3666:        Log(("iret %04x:%016RX64 - RPL < DPL (%d) -> #GP\n", uNewCs, uNewRip, DescCS.Legacy.Gen.u2Dpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3671:        Log(("iret %04x:%016RX64 - RPL < CPL (%d) -> #GP\n", uNewCs, uNewRip, pVCpu->iem.s.uCpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3678:        Log(("iret %04x:%016RX64/%04x:%016RX64 - CS not present -> #NP\n", uNewCs, uNewRip, uNewSs, uNewRsp));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3692:            Log(("iret %04x:%016RX64/%04x:%016RX64 -> invalid SS selector, #GP(0)\n", uNewCs, uNewRip, uNewSs, uNewRsp));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3702:            Log(("iret %04x:%016RX64/%04x:%016RX64 - %Rrc when fetching SS\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3711:        Log(("iret %04x:%016RX64/%04x:%016RX64 -> SS.RPL != CS.RPL -> #GP\n", uNewCs, uNewRip, uNewSs, uNewRsp));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3722:            Log(("iret %04x:%016RX64/%04x:%016RX64 -> SS.DPL (%d) != CS.RPL -> #GP\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3730:            Log(("iret %04x:%016RX64/%04x:%016RX64 -> SS is system segment (%#x) -> #GP\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3736:            Log(("iret %04x:%016RX64/%04x:%016RX64 - not writable data segment (%#x) -> #GP\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3744:            Log(("iret %04x:%016RX64/%04x:%016RX64 -> SS not present -> #SS\n", uNewCs, uNewRip, uNewSs, uNewRsp));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3755:            Log(("iret %04x:%016RX64/%04x:%016RX64 -> RIP is not canonical -> #GP(0)\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3764:            Log(("iret %04x:%016RX64/%04x:%016RX64 -> EIP is out of bounds (%#x) -> #GP(0)\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3877:        Log(("iret: Guest intercept -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3910:        Log(("syscall: Not enabled in EFER -> #UD\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3915:        Log(("syscall: Protected mode is required -> #GP(0)\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3920:        Log(("syscall: Only available in long mode on intel -> #UD\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3930:        Log(("syscall: msrSTAR.CS = 0 or SS = 0 -> #GP(0)\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3943:            Log(("syscall: Only available in long mode on intel -> #UD\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3950:        Log(("syscall: %04x:%016RX64 [efl=%#llx] -> %04x:%016RX64\n", pCtx->cs, pCtx->rip, pCtx->rflags.u, uNewCs, uNewRip));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:3967:        Log(("syscall: %04x:%08RX32 [efl=%#x] -> %04x:%08RX32\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4017:        Log(("sysret: Not enabled in EFER -> #UD\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4022:        Log(("sysret: Only available in long mode on intel -> #UD\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4027:        Log(("sysret: Protected mode is required -> #GP(0)\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4032:        Log(("sysret: CPL must be 0 not %u -> #GP(0)\n", pVCpu->iem.s.uCpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4043:        Log(("sysret: msrSTAR.CS = 0 or SS = 0 -> #GP(0)\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4054:            Log(("sysret: %04x:%016RX64 [efl=%#llx] -> %04x:%016RX64 [r11=%#llx]\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4064:            Log(("sysret: %04x:%016RX64 [efl=%#llx] -> %04x:%08RX32 [r11=%#llx]\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4077:        Log(("sysret: %04x:%08RX32 [efl=%#x] -> %04x:%08RX32\n", pCtx->cs, pCtx->eip, pCtx->eflags.u, uNewCs, pCtx->ecx));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4168:                Log(("load sreg %#x -> invalid stack selector, #GP(0)\n", uSel));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4194:        Log(("load sreg %d (=%#x) - system selector (%#x) -> #GP\n", iSegReg, uSel, Desc.Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4202:            Log(("load sreg SS, %#x - code or read only (%#x) -> #GP\n", uSel, Desc.Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4207:            Log(("load sreg SS, %#x - RPL and CPL (%d) differs -> #GP\n", uSel, pVCpu->iem.s.uCpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4212:            Log(("load sreg SS, %#x - DPL (%d) and CPL (%d) differs -> #GP\n", uSel, Desc.Legacy.Gen.u2Dpl, pVCpu->iem.s.uCpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4220:            Log(("load sreg%u, %#x - execute only segment -> #GP\n", iSegReg, uSel));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4230:                Log(("load sreg%u, %#x - both RPL (%d) and CPL (%d) are greater than DPL (%d) -> #GP\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4237:                Log(("load sreg%u, %#x - RPL (%d) is greater than DPL (%d) -> #GP\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4243:                Log(("load sreg%u, %#x - CPL (%d) is greater than DPL (%d) -> #GP\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4254:        Log(("load sreg%d,%#x - segment not present -> #NP\n", iSegReg, uSel));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4659:        Log(("lgdt: Guest intercept -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4687:            Log(("iemCImpl_lgdt: Non-canonical base %04x:%RGv\n", cbLimit, GCPtrBase));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4731:        Log(("lidt: Guest intercept -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4758:            Log(("iemCImpl_lidt: Non-canonical base %04x:%RGv\n", cbLimit, GCPtrBase));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4801:        Log(("lldt %04x - real or v8086 mode -> #GP(0)\n", uNewLdt));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4806:        Log(("lldt %04x - CPL is %d -> #GP(0)\n", uNewLdt, pVCpu->iem.s.uCpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4811:        Log(("lldt %04x - LDT selector -> #GP\n", uNewLdt));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4823:            Log(("lldt: Guest intercept -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4827:        Log(("lldt %04x: Loading NULL selector.\n",  uNewLdt));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4867:        Log(("lldt %#x - not system selector (type %x) -> #GP\n", uNewLdt, Desc.Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4872:        Log(("lldt %#x - not LDT selector (type %x) -> #GP\n", uNewLdt, Desc.Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4882:            Log(("lldt %#x - u5Zeros=%#x -> #GP\n", uNewLdt, Desc.Long.Gen.u5Zeros));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4889:            Log(("lldt %#x - non-canonical base address %#llx -> #GP\n", uNewLdt, u64Base));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4897:        Log(("lldt %#x - segment not present -> #NP\n", uNewLdt));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4904:        Log(("lldt: Guest intercept -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4941:        Log(("ltr %04x - real or v8086 mode -> #GP(0)\n", uNewTr));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4946:        Log(("ltr %04x - CPL is %d -> #GP(0)\n", uNewTr, pVCpu->iem.s.uCpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4951:        Log(("ltr %04x - LDT selector -> #GP\n", uNewTr));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4956:        Log(("ltr %04x - NULL selector -> #GP(0)\n", uNewTr));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4961:        Log(("ltr: Guest intercept -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4976:        Log(("ltr %#x - not system selector (type %x) -> #GP\n", uNewTr, Desc.Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4983:        Log(("ltr %#x - not an available TSS selector (type %x) -> #GP\n", uNewTr, Desc.Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:4993:            Log(("ltr %#x - u5Zeros=%#x -> #GP\n", uNewTr, Desc.Long.Gen.u5Zeros));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5000:            Log(("ltr %#x - non-canonical base address %#llx -> #GP\n", uNewTr, u64Base));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5008:        Log(("ltr %#x - segment not present -> #NP\n", uNewTr));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5068:        Log(("iemCImpl_mov_Rd_Cd: Guest intercept CR%u -> #VMEXIT\n", iCrReg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5165:                Log(("Trying to set reserved CR0 bits: NewCR0=%#llx InvalidBits=%#llx\n", uNewCrX, uNewCrX & ~(uint64_t)fValid));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5173:                Log(("Trying to set CR0.PG without CR0.PE\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5180:                Log(("Trying to clear CR0.CD while leaving CR0.NW set\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5187:                Log(("Trying to clear CR0.PG while leaving CR4.PCID set\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5198:                    Log(("Trying to enabled long mode paging without CR4.PAE set\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5203:                    Log(("Trying to enabled long mode paging with a long CS descriptor loaded.\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5215:                Log(("iemCImpl_load_Cr%#x: Guest intercept -> #VMEXIT\n", iCrReg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5225:                    Log(("iemCImpl_load_Cr%#x: TS/MP bit changed or lmsw instr: Guest intercept -> #VMEXIT\n", iCrReg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5292:                Log(("iemCImpl_load_Cr%#x: Guest intercept -> #VMEXIT\n", iCrReg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5325:                Log(("Trying to load CR3 with invalid high bits set: %#llx\n", uNewCrX));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5337:                Log(("Automatically clearing reserved MBZ bits in CR3 load: NewCR3=%#llx ClearedBits=%#llx\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5344:                Log(("iemCImpl_load_Cr%#x: Guest intercept -> #VMEXIT\n", iCrReg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5402:                Log(("Trying to set reserved CR4 bits: NewCR4=%#llx InvalidBits=%#llx\n", uNewCrX, uNewCrX & ~(uint64_t)fValid));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5414:                Log(("Trying to set PCIDE with invalid PCID or outside long mode. Pcid=%#x\n", (pCtx->cr3 & UINT64_C(0xfff))));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5423:                Log(("Trying to set clear CR4.PAE while long mode is active\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5429:                Log(("iemCImpl_load_Cr%#x: Guest intercept -> #VMEXIT\n", iCrReg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5453:                    Log(("iemCImpl_load_CrX: VME %d -> %d => Setting VMCPU_FF_SELM_SYNC_TSS\n",
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5482:                Log(("Trying to set reserved CR8 bits (%#RX64)\n", uNewCrX));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5492:                    Log(("iemCImpl_load_Cr%#x: Guest intercept -> #VMEXIT\n", iCrReg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5611:        Log(("mov r%u,dr%u: CR4.DE=1 -> #GP(0)\n", iGReg, iDrReg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5618:        Log(("mov r%u,dr%u: DR7.GD=1 -> #DB\n", iGReg, iDrReg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5653:        Log(("mov r%u,dr%u: Guest intercept -> #VMEXIT\n", iGReg, iDrReg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5689:            Log(("mov dr%u,r%u: CR4.DE=1 -> #GP(0)\n", iDrReg, iGReg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5700:        Log(("mov dr%u,r%u: DR7.GD=1 -> #DB\n", iDrReg, iGReg));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5728:                Log(("mov dr%u,%#llx: DR6 high bits are not zero -> #GP(0)\n", iDrReg, uNewDrX));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5738:                Log(("mov dr%u,%#llx: DR7 high bits are not zero -> #GP(0)\n", iDrReg, uNewDrX));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5790:        Log(("invlpg: Guest intercept (%RGp) -> #VMEXIT\n", GCPtrPage));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5804:    Log(("PGMInvalidatePage(%RGv) -> %Rrc\n", GCPtrPage, rc));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5825:        Log(("invpcid: CPL != 0 -> #GP(0)\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5830:        Log(("invpcid: v8086 mode -> #GP(0)\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5835:        Log(("invpcid: invalid/unrecognized invpcid type %#x -> #GP(0)\n", uInvpcidType));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5851:            Log(("invpcid: reserved bits set in invpcid descriptor %#RX64 -> #GP(0)\n", uDesc.s.Lo));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5865:                    Log(("invpcid: invalidation address %#RGP is not canonical -> #GP(0)\n", GCPtrInvAddr));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5871:                    Log(("invpcid: invalid pcid %#x\n", uPcid));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5885:                    Log(("invpcid: invalid pcid %#x\n", uPcid));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5928:        Log(("rdtsc: CR4.TSD and CPL=%u -> #GP(0)\n", pVCpu->iem.s.uCpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5934:        Log(("rdtsc: Guest intercept -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5969:        Log(("rdtscp: CR4.TSD and CPL=%u -> #GP(0)\n", pVCpu->iem.s.uCpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:5975:        Log(("rdtscp: Guest intercept -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:6013:        Log(("rdpmc: Guest intercept -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:6052:            Log(("IEM: SVM intercepted rdmsr(%#x) failed. rc=%Rrc\n", pCtx->ecx, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:6072:        Log(("IEM: rdmsr(%#x) -> ring-3\n", pCtx->ecx));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:6082:        Log(("IEM: rdmsr(%#x) -> #GP(0)\n", pCtx->ecx));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:6119:            Log(("IEM: SVM intercepted rdmsr(%#x) failed. rc=%Rrc\n", pCtx->ecx, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:6149:        Log(("IEM: wrmsr(%#x) -> ring-3\n", pCtx->ecx));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:6159:        Log(("IEM: wrmsr(%#x,%#x`%08x) -> #GP(0)\n", pCtx->ecx, uValue.s.Hi, uValue.s.Lo));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:6194:            Log(("iemCImpl_in: iemSvmHandleIOIntercept failed (u16Port=%#x, cbReg=%u) rc=%Rrc\n", u16Port, cbReg,
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:6283:            Log(("iemCImpl_out: iemSvmHandleIOIntercept failed (u16Port=%#x, cbReg=%u) rc=%Rrc\n", u16Port, cbReg,
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:6947:                Log(("xgetbv ecx=%RX32 -> #GP(0)\n", uEcx));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:6957:    Log(("xgetbv CR4.OSXSAVE=0 -> UD\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:6988:                    Log(("xsetbv ecx=%RX32 (newvalue=%RX64) -> #GP(0)\n", uEcx, uNewValue));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:6994:                    Log(("xsetbv ecx=%RX32 (newvalue=%RX64) -> #GP(0)\n", uEcx, uNewValue));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:7003:        Log(("xsetbv cpl=%u -> GP(0)\n", pVCpu->iem.s.uCpl));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:7006:    Log(("xsetbv CR4.OSXSAVE=0 -> UD\n"));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:7302:        Log(("fxrstor: MXCSR=%#x (MXCSR_MASK=%#x) -> #GP(0)\n", fMXCSR, fMXCSR_MASK));
VBox/VMM/VMMAll/IEMAllCImpl.cpp.h:7835:                Log(("lddmxcsr: New MXCSR=%#RX32 & ~MASK=%#RX32 = %#RX32 -> #GP(0)\n",
VBox/VMM/VMMAll/HMSVMAll.cpp:161:            Log(("hmSvmExitVmmCall: hmSvmEmulateMovTpr returns %Rrc\n", rc));
VBox/VMM/VMMAll/GIMAllHv.cpp:93:            Log(("GIM: HyperV: Invalid %s param address %#RGp\n", pcszParam, GCPhysParam));
VBox/VMM/VMMAll/GIMAllHv.cpp:99:        Log(("GIM: HyperV: Misaligned %s param address %#RGp\n", pcszParam, GCPhysParam));
VBox/VMM/VMMAll/GIMAllHv.cpp:1059:                    Log(("GIM%u: HyperV: Masked SINT%u (%s)\n", pVCpu->idCpu, idxSintMsr, pszDesc));
VBox/VMM/VMMAll/GIMAllHv.cpp:1061:                    Log(("GIM%u: HyperV: Unmasked SINT%u (%s), uVector=%u\n", pVCpu->idCpu, idxSintMsr, pszDesc, uVector));
VBox/VMM/VMMAll/GIMAllHv.cpp:1063:            Log(("GIM%u: HyperV: Written SINT%u=%#RX64\n", pVCpu->idCpu, idxSintMsr, uRawValue));
VBox/VMM/VMMAll/GIMAllHv.cpp:1104:                    Log(("GIM%u: HyperV: Set STIMER_CONFIG%u=%#RX64\n", pVCpu->idCpu, idxStimer, uRawValue));
VBox/VMM/VMMAll/GIMAllHv.cpp:1112:                        Log(("GIM%u: HyperV: Disabled STIMER_CONFIG%u\n", pVCpu->idCpu, idxStimer));
VBox/VMM/VMMAll/GIMAllHv.cpp:1122:                                Log(("GIM%u: HyperV: Started STIMER%u\n", pVCpu->idCpu, idxStimer));
VBox/VMM/VMMAll/GIMAllHv.cpp:1172:                Log(("GIM%u: HyperV: Set STIMER_COUNT%u=%RU64, stopped timer\n", pVCpu->idCpu, idxStimer, uRawValue));
VBox/VMM/VMMAll/GIMAllHv.cpp:1189:                    Log(("GIM%u: HyperV: Set STIMER_COUNT%u=%RU64 %RU64 msec, auto-started timer\n", pVCpu->idCpu, idxStimer,
VBox/VMM/VMMAll/GIMAllHv.cpp:1197:            Log(("GIM%u: HyperV: Set STIMER_COUNT%u=%RU64\n", pVCpu->idCpu, idxStimer, uRawValue));
VBox/VMM/VMMAll/GIMAllHv.cpp:1204:            Log(("GIM%u: HyperV: EOM\n", pVCpu->idCpu));
VBox/VMM/VMMAll/GIMAllHv.cpp:1424:        Log(("GIM: HyperV: Failed to disassemble instruction at CS:RIP=%04x:%08RX64. rc=%Rrc\n", pCtx->cs.Sel, pCtx->rip, rc));
VBox/VMM/VMMAll/SELMAll.cpp:62:    Log(("selmGuestGDTWriteHandler: write to %RGv size %d\n", GCPtr, cbBuf)); NOREF(GCPtr); NOREF(cbBuf);
VBox/VMM/VMMAll/SELMAll.cpp:99:    Log(("selmGuestLDTWriteHandler: write to %RGv size %d\n", GCPtr, cbBuf)); NOREF(GCPtr); NOREF(cbBuf);
VBox/VMM/VMMAll/SELMAll.cpp:122:    Log(("selmGuestTSSWriteHandler: write %.*Rhxs to %RGv size %d\n", RT_MIN(8, cbBuf), pvBuf, GCPtr, cbBuf));
VBox/VMM/VMMAll/SELMAll.cpp:607:            Log(("SELMLoadHiddenSelectorReg: loaded %s=%#x:{b=%llx, l=%x, a=%x, vs=%x} (gst)\n",
VBox/VMM/VMMAll/SELMAll.cpp:613:            Log(("SELMLoadHiddenSelectorReg: Guest table entry is no good (%s=%#x): %.8Rhxs\n", g_aszSRegNms[iSReg], Sel, &GstDesc));
VBox/VMM/VMMAll/SELMAll.cpp:620:        Log(("SELMLoadHiddenSelectorReg: Error reading descriptor %s=%#x: %Rrc\n",
VBox/VMM/VMMAll/SELMAll.cpp:695:    Log(("SELMLoadHiddenSelectorReg: loaded %s=%#x:{b=%llx, l=%x, a=%x, vs=%x} (shw)\n",
VBox/VMM/VMMAll/SELMAll.cpp:1034:            Log(("SELMGetRing1Stack: Updating TSS ring 0 stack to %04X:%08X\n", tss.ss0, tss.esp0));
VBox/VMM/VMMAll/SELMAll.cpp:1036:        Log(("offIoBitmap=%#x\n", tss.offIoBitmap));
VBox/VMM/VMMAll/GIMAllKvm.cpp:478:        Log(("GIM: KVM: Failed to disassemble instruction at CS:RIP=%04x:%08RX64. rc=%Rrc\n", pCtx->cs.Sel, pCtx->rip, rc));
VBox/VMM/VMMAll/PGMAllHandler.cpp:152:    Log(("pgmHandlerPhysicalExCreate: pvUserR3=%RHv pvUserR0=%RHv pvUserGC=%RRv hType=%#x (%d, %s) pszDesc=%RHv:%s\n",
VBox/VMM/VMMAll/PGMAllHandler.cpp:237:    Log(("pgmHandlerPhysicalExRegister: GCPhys=%RGp GCPhysLast=%RGp hType=%#x (%d, %s) pszDesc=%RHv:%s\n",
VBox/VMM/VMMAll/PGMAllHandler.cpp:297:            Log(("PGMHandlerPhysicalRegisterEx: returns %Rrc (%RGp-%RGp)\n", rc, GCPhys, GCPhysLast));
VBox/VMM/VMMAll/PGMAllHandler.cpp:342:    Log(("PGMHandlerPhysicalRegister: GCPhys=%RGp GCPhysLast=%RGp pvUserR3=%RHv pvUserR0=%RHv pvUserGC=%RRv hType=%#x (%d, %s) pszDesc=%RHv:%s\n",
VBox/VMM/VMMAll/PGMAllHandler.cpp:408:        Log(("pgmHandlerPhysicalSetRamFlagsAndFlushShadowPTs: flushing guest TLBs; rc=%d\n", rc));
VBox/VMM/VMMAll/PGMAllHandler.cpp:411:        Log(("pgmHandlerPhysicalSetRamFlagsAndFlushShadowPTs: doesn't flush guest TLBs. rc=%Rrc; sync flags=%x VMCPU_FF_PGM_SYNC_CR3=%d\n", rc, VMMGetCpu(pVM)->pgm.s.fSyncFlags, VMCPU_FF_IS_SET(VMMGetCpu(pVM), VMCPU_FF_PGM_SYNC_CR3)));
VBox/VMM/VMMAll/PGMAllHandler.cpp:866:                    Log(("PGMHandlerPhysicalModify: GCPhysCurrent=%RGp -> GCPhys=%RGp GCPhysLast=%RGp\n",
VBox/VMM/VMMAll/PGMAllHandler.cpp:1353:                Log(("PGMHandlerPhysicalPageAlias: GCPhysPage=%RGp (%R[pgmpage]; %RHp -> %RHp\n",
VBox/VMM/VMMAll/PGMAllHandler.cpp:1731:    Log(("pgmHandlerVirtualInsertAliased: %RGp-%RGp offNextAlias=%#RX32\n", pPhys2Virt->Core.Key, pPhys2Virt->Core.KeyLast, pPhys2Virt->offNextAlias));
VBox/VMM/VMMAll/PGMAllHandler.cpp:1826:    Log(("PHYS2VIRT: Range %RGp-%RGp for virtual handler: %s\n", pCur->Core.Key, pCur->Core.KeyLast, pVirt->pszDesc));
VBox/VMM/VMMAll/CPUMAllRegs.cpp:665:                Log(("CPUM: New HyperCR0=%#x\n", HyperCR0));
VBox/VMM/VMMAll/CPUMAllRegs.cpp:689:            Log(("CPUM: New HyperCR0=%#x\n", HyperCR0));
VBox/VMM/VMMAll/PATMAll.cpp:201:                    Log(("Switchback from %RRv to %RRv (Psp=%x)\n", pCtx->eip, pOrgInstrGC, CTXSUFF(pVM->patm.s.pGCState)->Psp));
VBox/VMM/VMMAll/PATMAll.cpp:595:    Log(("PATMAddBranchToLookupCache: Adding (%RRv->%RRv (%RRv)) to table %RRv\n", pBranchTarget, pRelBranchPatch + pVM->patm.s.pPatchMemGC, pRelBranchPatch, pJumpTableGC));
VBox/VMM/VMMAll/PATMAll.cpp:604:    Log(("Nr addresses = %d, insert pos = %d\n", pJumpTable->cAddresses, pJumpTable->ulInsertPos));
VBox/VMM/VMMAll/CSAMAll.cpp:63:    Log(("csamCodePageWriteHandler: write to %RGv LB %zu\n", GCPtr, cbBuf));
VBox/VMM/VMMAll/CSAMAll.cpp:75:        Log(("csamCodePageWriteHandler: dummy write -> ignore\n"));
VBox/VMM/VMMAll/CSAMAll.cpp:112:        Log(("csamRCCodePageWriteHandler: fPIF=0 -> stack fault in patch generated code at %08RX32!\n", CPUMGetGuestRIP(pVCpu)));
VBox/VMM/VMMAll/CSAMAll.cpp:116:    Log(("csamRCCodePageWriteHandler: code page write at %RGv (cpl=%d)\n", GCPtr, cpl));
VBox/VMM/VMMAll/CSAMAll.cpp:150:    Log(("csamRCCodePageWriteHandler: enabled r/w for page %RGv (%RGv)\n", GCPtr, GCPtr));
VBox/VMM/VMMAll/CSAMAll.cpp:228:       Log(("CSAMMarkPage %RRv\n", pPage));
VBox/VMM/VMMAll/CSAMAll.cpp:248:            Log(("MMHyperAlloc failed with %Rrc\n", rc));
VBox/VMM/VMMAll/CSAMAll.cpp:255:            Log(("MMHyperHC2GC failed for %RRv\n", pVM->csam.s.pPDBitmapGC[pgdir]));
VBox/VMM/VMMAll/CSAMAll.cpp:262:            Log(("MMHyperHC2GC failed for %RHv\n", pVM->csam.s.pPDBitmapHC[pgdir]));
VBox/VMM/VMMAll/PGMAllBth.h:355:            Log(("Unhandled part of monitored page %RGv\n", pvFault));
VBox/VMM/VMMAll/PGMAllBth.h:676:        Log(("SyncPT: %RGv failed!! rc=%Rrc\n", pvFault, rc));
VBox/VMM/VMMAll/PGMAllBth.h:708:                            Log(("Trap0e: Detected Conflict %RGv-%RGv\n", pMapping->GCPtr, pMapping->GCPtrLast));
VBox/VMM/VMMAll/PGMAllBth.h:872:        Log(("Page out of sync: %RGv eip=%08x PdeSrc.US=%d fPageGst2=%08llx GCPhys2=%RGp scan=%d\n",
VBox/VMM/VMMAll/PGMAllBth.h:875:        Log(("Page out of sync: %RGv eip=%08x fPageGst2=%08llx GCPhys2=%RGp scan=%d\n",
VBox/VMM/VMMAll/PGMAllBth.h:978:                Log(("PGM #PF: Make writable: %RGp %R[pgmpage] pvFault=%RGp uErr=%#x\n", GCPhys, pPage, pvFault, uErr));
VBox/VMM/VMMAll/PGMAllBth.h:1021:                    Log(("PGM #PF: Netware WP0+RO+US hack: pvFault=%RGp uErr=%#x (big=%d)\n", pvFault, uErr, GstWalk.Core.fBigPage));
VBox/VMM/VMMAll/PGMAllBth.h:1031:                    Log(("pgmShwMakePageSupervisorAndWritable(%RGv) failed with rc=%Rrc - ignored\n", pvFault, rc));
VBox/VMM/VMMAll/PGMAllBth.h:1037:                Log(("PGM #PF: WP0 emulation (pvFault=%RGp uErr=%#x cpl=%d fBig=%d fEffUs=%d)\n", pvFault, uErr, CPUMGetGuestCPL(pVCpu), GstWalk.Core.fBigPage, GstWalk.Core.fEffectiveUS));
VBox/VMM/VMMAll/PGMAllBth.h:1108:            Log(("PGM #PF: Undo netware WP0+RO+US hack: pvFault=%RGp uErr=%#x\n", pvFault, uErr));
VBox/VMM/VMMAll/PGMAllBth.h:2000:        Log(("CPU%u: SyncPage: Pde at %RGv changed behind our back? (pPdeDst=%p/%RX64) uErr=%#x\n", pVCpu->idCpu, GCPtrPage, pPdeDst, (uint64_t)PdeDst.u, (uint32_t)uErr));
VBox/VMM/VMMAll/PGMAllBth.h:2322:        Log(("CPU%d: SyncPage: Pde at %RGv changed behind our back!\n", pVCpu->idCpu, GCPtrPage));
VBox/VMM/VMMAll/PGMAllBth.h:2330:        Log(("CPU%d: SyncPage: Pde (big:%RX64) at %RGv changed behind our back!\n", pVCpu->idCpu, PdeDst.u, GCPtrPage));
VBox/VMM/VMMAll/PGMAllBth.h:2423:    Log(("CheckPageFault: real page fault (notp) at %RGv (%d)\n", GCPtrPage, uPageFaultLevel));
VBox/VMM/VMMAll/PGMAllBth.h:2446:    Log(("CheckPageFault: real page fault (rsvd) at %RGv (%d)\n", GCPtrPage, uPageFaultLevel));
VBox/VMM/VMMAll/PGMAllBth.h:2469:    Log(("CheckPageFault: real page fault (prot) at %RGv (%d)\n", GCPtrPage, uPageFaultLevel));
VBox/VMM/VMMAll/PGMAllBth.h:2754:        Log(("SyncPT: Conflict at %RGv\n", GCPtrPage));
VBox/VMM/VMMAll/PGMAllBth.h:3125:                    Log(("Invalid pages at %RGp\n", GCPhys));
VBox/VMM/VMMAll/PGMAllBth.h:3137:                    Log(("Invalid pages at %RGp (2)\n", GCPhys));
VBox/VMM/VMMAll/PGMAllBth.h:3290:                Log(("SyncPT: Use large page at %RGp PDE=%RX64\n", GCPtrPage, PdeDst.u));
VBox/VMM/VMMAll/PGMAllBth.h:3552:        Log(("CSAMMarkPage %RGv; scanned=%d\n", GCPtrPage, true));
VBox/VMM/VMMAll/PGMAllBth.h:3573:        Log(("PGMVerifyAccess: access violation for %RGv due to non-present PDPTR\n", GCPtrPage));
VBox/VMM/VMMAll/PGMAllBth.h:3584:        Log(("PGMVerifyAccess: access violation for %RGv due to non-present PDPTR\n", GCPtrPage));
VBox/VMM/VMMAll/PGMAllBth.h:3663:        Log(("PGMVerifyAccess: success (dirty)\n"));
VBox/VMM/VMMAll/PGMAllBth.h:3693:            Log(("PGMVerifyAccess: access violation for %RGv rc=%Rrc\n", GCPtrPage, rc));
VBox/VMM/VMMAll/PGMAllBth.h:3806:#  define AssertMsgFailed Log
VBox/VMM/VMMAll/PGMAllGst.h:610:            Log(("VirtHandler: Not present / invalid Pde=%RX64\n", (uint64_t)Pde.u));
VBox/VMM/VMMAll/PGMAllGst.h:681:        Log(("HandlerVirtualUpdate: resets bits\n"));
VBox/VMM/VMMAll/TMAll.cpp:904:                    Log(("TMVirtualGetSync: u64Delta=%RX64 (NoLock)\n", u64Delta));
VBox/VMM/VMMAll/TMAll.cpp:2512:            Log(("tmGetFrequencyHint: New value %u Hz\n", uMaxHzHint));
VBox/VMM/VMMAll/PGMAllMap.cpp:430:    Log(("pgmMapClearShadowPDEs: old pde %x (cPTs=%x) (mappings enabled %d) fDeactivateCR3=%RTbool\n", iOldPDE, pMap->cPTs, pgmMapAreMappingsEnabled(pVM), fDeactivateCR3));
VBox/VMM/VMMAll/PGMAllMap.cpp:777:                    Log(("PGMHasMappingConflicts: Conflict was detected at %08RX32 for mapping %s (32 bits)\n"
VBox/VMM/VMMAll/PGMAllMap.cpp:782:                    Log(("PGMHasMappingConflicts: Conflict was detected at %08RX32 for mapping (32 bits)\n"
VBox/VMM/VMMAll/PGMAllMap.cpp:808:                    Log(("PGMHasMappingConflicts: Conflict was detected at %RGv for mapping %s (PAE)\n"
VBox/VMM/VMMAll/PGMAllMap.cpp:812:                    Log(("PGMHasMappingConflicts: Conflict was detected at %RGv for mapping (PAE)\n"
VBox/VMM/VMMAll/PGMAllMap.cpp:872:                    Log(("PGMHasMappingConflicts: Conflict was detected at %08RX32 for mapping %s (32 bits)\n"
VBox/VMM/VMMAll/PGMAllMap.cpp:880:                    Log(("PGMHasMappingConflicts: Conflict was detected at %08RX32 for mapping (32 bits)\n"
VBox/VMM/VMMAll/PGMAllMap.cpp:911:                    Log(("PGMHasMappingConflicts: Conflict was detected at %RGv for mapping %s (PAE)\n"
VBox/VMM/VMMAll/PGMAllMap.cpp:918:                    Log(("PGMHasMappingConflicts: Conflict was detected at %RGv for mapping (PAE)\n"
VBox/VMM/VMMAll/IEMAllInstructionsThree0f38.cpp.h:338:    Log(("iemOp_invpcid_Gy_Mdq: invalid encoding -> #UD\n"));
VBox/VMM/VMMAll/TRPMAll.cpp:57:    Log(("trpmGuestIDTWriteHandler: write to %RGv size %d\n", GCPtr, cbBuf)); NOREF(GCPtr); NOREF(cbBuf);
VBox/VMM/VMMAll/TRPMAll.cpp:481:        Log(("TRPMForwardTrap-VM: eip=%04X:%04X iGate=%d\n", pRegFrame->cs.Sel, pRegFrame->eip, iGate));
VBox/VMM/VMMAll/TRPMAll.cpp:483:        Log(("TRPMForwardTrap: eip=%04X:%08X iGate=%d\n", pRegFrame->cs.Sel, pRegFrame->eip, iGate));
VBox/VMM/VMMAll/TRPMAll.cpp:496:                Log(("TRPMForwardTrap: caller=%RGv\n", pCallerGC));
VBox/VMM/VMMAll/TRPMAll.cpp:568:            Log(("Page %RGv out of sync -> prefetch and try again\n", pIDTEntry));
VBox/VMM/VMMAll/TRPMAll.cpp:572:                Log(("TRPMForwardTrap: PGMPrefetchPage failed with rc=%Rrc\n", rc));
VBox/VMM/VMMAll/TRPMAll.cpp:628:                    Log(("Page %RGv out of sync -> prefetch and try again\n", pGdtEntry));
VBox/VMM/VMMAll/TRPMAll.cpp:632:                        Log(("PGMPrefetchPage failed with rc=%Rrc\n", rc));
VBox/VMM/VMMAll/TRPMAll.cpp:642:                        Log(("MMGCRamRead failed with %Rrc\n", rc));
VBox/VMM/VMMAll/TRPMAll.cpp:649:                    Log(("Conforming code selector\n"));
VBox/VMM/VMMAll/TRPMAll.cpp:671:                        Log(("Invalid ring 0 stack %04X:%08RX32\n", ss_r0, esp_r0));
VBox/VMM/VMMAll/TRPMAll.cpp:691:                    Log(("Invalid cpl-dpl combo %d vs %d\n", cpl, dpl));
VBox/VMM/VMMAll/TRPMAll.cpp:721:                        Log(("TRAP%02X: (VM) Handler %04X:%RGv Stack %04X:%08X RPL=%d CR2=%08X\n", iGate, GuestIdte.Gen.u16SegSel, pHandler, ss_r0, esp_r0, (pRegFrame->ss.Sel & X86_SEL_RPL), pVCpu->trpm.s.uActiveCR2));
VBox/VMM/VMMAll/TRPMAll.cpp:731:                        Log(("TRAP%02X: Handler %04X:%RGv Stack %04X:%08X RPL=%d CR2=%08X\n", iGate, GuestIdte.Gen.u16SegSel, pHandler, ss_r0, esp_r0, (pRegFrame->ss.Sel & X86_SEL_RPL), pVCpu->trpm.s.uActiveCR2));
VBox/VMM/VMMAll/TRPMAll.cpp:807:                    Log(("TRPM: PATM Handler %RRv Adjusted stack %08X new EFLAGS=%08X/%08x idx=%d dpl=%d cpl=%d\n",
VBox/VMM/VMMAll/TRPMAll.cpp:847:                    Log(("TRAP%02X: PGMVerifyAccess %RGv failed with %Rrc -> forward to REM\n", iGate, pTrapStackGC, rc));
VBox/VMM/VMMAll/TRPMAll.cpp:850:                Log(("SELMValidateAndConvertCSAddr failed with %Rrc\n", rc));
VBox/VMM/VMMAll/TRPMAll.cpp:853:            Log(("MMRamRead %RGv size %d failed with %Rrc\n", (RTGCUINTPTR)GCPtrIDT + sizeof(VBOXIDTE) * iGate, sizeof(GuestIdte), rc));
VBox/VMM/VMMAll/TRPMAll.cpp:857:        Log(("Refused to forward trap: eflags=%08x IF=%d\n", eflags.u32, eflags.Bits.u1IF));
VBox/VMM/VMMAll/TRPMAll.cpp:869:    Log(("TRAP%02X: forwarding to REM (ss rpl=%d eflags=%08X VMIF=%d handler=%08X\n", iGate, pRegFrame->ss.Sel & X86_SEL_RPL, pRegFrame->eflags.u32, PATMAreInterruptsEnabledByCtx(pVM, CPUMCTX_FROM_CORE(pRegFrame)), pVM->trpm.s.aGuestTrapHandler[iGate]));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:270:    Log(("iemSvmVmexit: Not in SVM guest mode! uExitCode=%#RX64 uExitInfo1=%#RX64 uExitInfo2=%#RX64\n", uExitCode,
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:332:            Log(("iemSvmVmrun: VMRUN instruction not intercepted -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:340:            Log(("iemSvmVmrun: Nested paging not supported -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:348:            Log(("iemSvmVmrun: AVIC not supported -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:356:            Log(("iemSvmVmrun: LBR virtualization not supported -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:363:            Log(("iemSvmVmrun: Guest ASID is invalid -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:374:            Log(("iemSvmVmrun: IO bitmap physaddr invalid. GCPhysIOBitmap=%#RX64 -> #VMEXIT\n", GCPhysIOBitmap));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:384:            Log(("iemSvmVmrun: MSR bitmap physaddr invalid. GCPhysMsrBitmap=%#RX64 -> #VMEXIT\n", GCPhysMsrBitmap));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:392:            Log(("iemSvmVmrun: CR0 no-write through with cache disabled. CR0=%#RX64 -> #VMEXIT\n", pVmcbNstGst->u64CR0));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:397:            Log(("iemSvmVmrun: CR0 reserved bits set. CR0=%#RX64 -> #VMEXIT\n", pVmcbNstGst->u64CR0));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:406:            Log(("iemSvmVmrun: DR6 and/or DR7 reserved bits set. DR6=%#RX64 DR7=%#RX64 -> #VMEXIT\n", pVmcbNstGst->u64DR6,
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:421:            Log(("iemSvmVmrun: Failed reading the IO permission bitmap at %#RGp. rc=%Rrc\n", GCPhysIOBitmap, rc));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:433:            Log(("iemSvmVmrun: Failed reading the MSR permission bitmap at %#RGp. rc=%Rrc\n", GCPhysMsrBitmap, rc));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:477:            Log(("iemSvmVmrun: EFER invalid uOldEfer=%#RX64 -> #VMEXIT\n", pVmcbNstGst->u64EFER));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:503:            Log(("iemSvmVmrun: EFER invalid. uValidEfer=%#RX64 -> #VMEXIT\n", uValidEfer));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:620:                Log(("iemSvmVmrun: Invalid event type =%#x -> #VMEXIT\n", (uint8_t)pEventInject->n.u3Type));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:628:                    Log(("iemSvmVmrun: Invalid vector for hardware exception. uVector=%#x -> #VMEXIT\n", uVector));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:634:                    Log(("iemSvmVmrun: Cannot inject #BR when not in long mode -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:664:    Log(("iemSvmVmrun: Failed to read nested-guest VMCB at %#RGp (rc=%Rrc) -> #VMEXIT\n", GCPhysVmcb, rc));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:1035:        Log(("iemSvmHandleMsrIntercept: Invalid/out-of-range MSR %#RX32 fWrite=%RTbool -> #VMEXIT\n", idMsr, fWrite));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:1061:        Log(("vmrun: VMCB physaddr (%#RGp) not valid -> #GP(0)\n", GCPhysVmcb));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:1067:        Log(("vmrun: Guest intercept -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:1090:        Log(("vmmcall: Guest intercept -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:1125:        Log(("vmload: VMCB physaddr (%#RGp) not valid -> #GP(0)\n", GCPhysVmcb));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:1131:        Log(("vmload: Guest intercept -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:1181:        Log(("vmsave: VMCB physaddr (%#RGp) not valid -> #GP(0)\n", GCPhysVmcb));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:1187:        Log(("vmsave: Guest intercept -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAllCImplSvmInstr.cpp.h:1236:        Log(("clgi: Guest intercept -> #VMEXIT\n"));
VBox/VMM/VMMAll/PGMAllShw.h:470:                            Log(("%s: pgmPhysPageMakeWritable on %RGv / %RGp %R[pgmpage]\n", __PRETTY_FUNCTION__, GCPtr, GCPhys, pPage));
VBox/VMM/VMMAll/IEMAllCImplStrInstr.cpp.h:793:        Log(("%s: declining because we're bypassing handlers\n", __FUNCTION__));
VBox/VMM/VMMAll/IEMAllCImplStrInstr.cpp.h:962:        Log(("%s: declining because we're bypassing handlers\n", __FUNCTION__));
VBox/VMM/VMMAll/IEMAllCImplStrInstr.cpp.h:1204:        Log(("%s: declining because we're bypassing handlers\n", __FUNCTION__));
VBox/VMM/VMMAll/IEMAllCImplStrInstr.cpp.h:1232:            Log(("iemCImpl_ins_op: iemSvmHandleIOIntercept failed (u16Port=%#x, cbReg=%u) rc=%Rrc\n", pCtx->dx, OP_SIZE / 8,
VBox/VMM/VMMAll/IEMAllCImplStrInstr.cpp.h:1304:            Log(("iemCImpl_rep_ins_op: iemSvmHandleIOIntercept failed (u16Port=%#x, cbReg=%u) rc=%Rrc\n", u16Port, OP_SIZE / 8,
VBox/VMM/VMMAll/IEMAllCImplStrInstr.cpp.h:1331:        Log(("%s: declining because we're bypassing handlers\n", __FUNCTION__));
VBox/VMM/VMMAll/IEMAllCImplStrInstr.cpp.h:1507:            Log(("iemCImpl_outs_op: iemSvmHandleIOIntercept failed (u16Port=%#x, cbReg=%u) rc=%Rrc\n", pCtx->dx, OP_SIZE / 8,
VBox/VMM/VMMAll/IEMAllCImplStrInstr.cpp.h:1569:            Log(("iemCImpl_rep_outs_op: iemSvmHandleIOIntercept failed (u16Port=%#x, cbReg=%u) rc=%Rrc\n", u16Port, OP_SIZE / 8,
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:115:    Log(("CPUM: Ignoring WRMSR %#x (%s), %#llx\n", idMsr, pRange->szName, uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:418:        Log(("CPUM: Invalid type set writing MTRR PhysBase MSR %#x: %#llx (%#llx)\n", idMsr, uValue, uType));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:425:        Log(("CPUM: Invalid physical address bits set writing MTRR PhysBase MSR %#x: %#llx (%#llx)\n",
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:461:        Log(("CPUM: Invalid physical address bits set writing MTRR PhysMask MSR %#x: %#llx (%#llx)\n",
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:495:            Log(("CPUM: Invalid MTRR type at %u:%u in fixed range (%#x/%s): %#llx (%#llx)\n",
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:522:        Log(("CPUM: Invalid MTRR default type value on %s: %#llx (%#llx)\n", pRange->szName, uValue, uType));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:551:            Log(("CPUM: Invalid PAT type at %u:%u in IA32_PAT: %#llx (%#llx)\n",
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:600:    Log(("CPUM: IA32_SYSENTER_ESP not canonical! %#llx\n", uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:626:    Log(("CPUM: IA32_SYSENTER_EIP not canonical! %#llx\n", uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:1090:    Log(("CPUM: IA32_MISC_ENABLE; old=%#llx written=%#llx => %#llx\n",
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:1115:            Log(("CPUM: Reading IA32_MCi_ADDR %#x -> #GP\n", idMsr));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:1118:            Log(("CPUM: Reading IA32_MCi_MISC %#x -> #GP\n", idMsr));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:1141:                Log(("CPUM: Writing non-zero value (%#llx) to IA32_MCi_STATUS %#x -> #GP\n", uValue, idMsr));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:1155:                Log(("CPUM: Writing non-zero value (%#llx) to IA32_MCi_ADDR %#x -> #GP\n", uValue, idMsr));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:1162:                Log(("CPUM: Writing non-zero value (%#llx) to IA32_MCi_MISC %#x -> #GP\n", uValue, idMsr));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:1442:        Log(("CPUM: Invalid IA32_SPEC_CTRL bits (trying to write %#llx)\n", uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:1474:    Log(("CPUM: Invalid MSR_IA32_FLUSH_CMD_ bits (trying to write %#llx)\n", uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:1544:        Log(("CPUM: wrmsr %s(%#x), %#llx -> #GP - not canonical\n", pRange->szName, idMsr, uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:1567:        Log(("CPUM: wrmsr %s(%#x), %#llx -> #GP - not canonical\n", pRange->szName, idMsr, uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:1902:        Log(("CPUM: WRMSR %#x (%s), %#llx: Write protected -> #GP\n", idMsr, pRange->szName, uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:1908:        Log(("CPUM: WRMSR %#x (%s), %#llx: Invalid limit (%d) -> #GP\n", idMsr, pRange->szName, uValue, (uint32_t)(uValue & 7)));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:1975:        Log(("CPUM: wrmsr %s(%#x), %#llx -> #GP - not canonical\n", pRange->szName, idMsr, uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:2002:        Log(("CPUM: wrmsr %s(%#x), %#llx -> #GP - not canonical\n", pRange->szName, idMsr, uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:3841:        Log(("CPUM: Invalid setting of low 12 bits set writing host-state save area MSR %#x: %#llx\n", idMsr, uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:3848:        Log(("CPUM: Invalid physical address bits set writing host-state save area MSR %#x: %#llx (%#llx)\n",
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:4777:        Log(("CPUM: wrmsr %s(%#x), %#llx -> #GP - not canonical\n", pRange->szName, idMsr, uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:4858:        Log(("CPUM: wrmsr %s(%#x), %#llx -> #GP - not canonical\n", pRange->szName, idMsr, uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:4920:        Log(("CPUM: wrmsr %s(%#x), %#llx -> #GP - not canonical\n", pRange->szName, idMsr, uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:5543:            Log(("CPUM: RDMSR %#x (%s) -> #GP(0)\n", idMsr, pRange->szName));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:5549:            Log(("CPUM: RDMSR %#x (%s) -> ring-3\n", idMsr, pRange->szName));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:5553:            Log(("CPUM: RDMSR %#x (%s) -> rcStrict=%Rrc\n", idMsr, pRange->szName, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:5561:        Log(("CPUM: Unknown RDMSR %#x -> #GP(0)\n", idMsr));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:5624:                Log(("CPUM: WRMSR %#x (%s), %#llx [%#llx] -> #GP(0)\n", idMsr, pRange->szName, uValueAdjusted, uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:5630:                Log(("CPUM: WRMSR %#x (%s), %#llx [%#llx] -> ring-3\n", idMsr, pRange->szName, uValueAdjusted, uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:5634:                Log(("CPUM: WRMSR %#x (%s), %#llx [%#llx] -> rcStrict=%Rrc\n",
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:5643:            Log(("CPUM: WRMSR %#x (%s), %#llx -> #GP(0) - invalid bits %#llx\n",
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:5652:        Log(("CPUM: Unknown WRMSR %#x, %#llx -> #GP(0)\n", idMsr, uValue));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:6227:        Log(("CPUM: Settings disallowed EFER bit. uNewEfer=%#RX64 fAllowed=%#RX64 -> #GP(0)\n", uNewEfer, fMask));
VBox/VMM/VMMAll/CPUMAllMsrs.cpp:6236:        Log(("CPUM: Illegal MSR_K6_EFER_LME change: paging is enabled!!\n"));
VBox/VMM/VMMAll/IEMAllInstructionsOneByte.cpp.h:1843:    Log(("mvex prefix is not supported!\n"));
VBox/VMM/VMMAll/IEMAllInstructionsOneByte.cpp.h:1965:            Log(("evex not supported by the guest CPU!\n"));
VBox/VMM/VMMAll/IEMAllInstructionsOneByte.cpp.h:1975:            Log(("evex not supported by the guest CPU!\n"));
VBox/VMM/VMMAll/IEMAllInstructionsOneByte.cpp.h:1984:    Log(("evex prefix is not implemented!\n"));
VBox/VMM/VMMAll/IEMAllInstructionsOneByte.cpp.h:4379:                    Log(("XOP: Invalid vvvv value: %#x!\n", bRm & 0x1f));
VBox/VMM/VMMAll/IEMAllInstructionsOneByte.cpp.h:4384:            Log(("XOP: Invalid prefix mix!\n"));
VBox/VMM/VMMAll/IEMAllInstructionsOneByte.cpp.h:4387:        Log(("XOP: XOP support disabled!\n"));
VBox/VMM/VMMAll/IEMAllInstructionsOneByte.cpp.h:6265:                    Log(("VEX3: Invalid vvvv value: %#x!\n", bRm & 0x1f));
VBox/VMM/VMMAll/IEMAllInstructionsOneByte.cpp.h:6269:        Log(("VEX3: AVX support disabled!\n"));
VBox/VMM/VMMAll/IEMAllInstructionsOneByte.cpp.h:6314:        Log(("VEX2: AVX support disabled!\n"));
VBox/VMM/VMMAll/IEMAll.cpp:63: *      - Level 1 (Log) : Errors, exceptions, interrupts and such major events.
VBox/VMM/VMMAll/IEMAll.cpp:263:        /*Log*/ LogAlways(("%s: returning IEM_RETURN_ASPECT_NOT_IMPLEMENTED (line %d)\n", __FUNCTION__, __LINE__)); \
VBox/VMM/VMMAll/IEMAll.cpp:398:            Log((RT_STR(a_Instr) ": EFER.SVME not enabled -> #UD\n")); \
VBox/VMM/VMMAll/IEMAll.cpp:403:            Log((RT_STR(a_Instr) ": Real or v8086 mode -> #UD\n")); \
VBox/VMM/VMMAll/IEMAll.cpp:408:            Log((RT_STR(a_Instr) ": CPL != 0 -> #GP(0)\n")); \
VBox/VMM/VMMAll/IEMAll.cpp:926:            Log(("IEM: rcPassUp=%Rrc! rcOldPassUp=%Rrc\n", VBOXSTRICTRC_VAL(rcPassUp), rcOldPassUp));
VBox/VMM/VMMAll/IEMAll.cpp:930:            Log(("IEM: rcPassUp=%Rrc  rcOldPassUp=%Rrc!\n", VBOXSTRICTRC_VAL(rcPassUp), rcOldPassUp));
VBox/VMM/VMMAll/IEMAll.cpp:935:        Log(("IEM: rcPassUp=%Rrc! rcOldPassUp=%Rrc\n", VBOXSTRICTRC_VAL(rcPassUp), rcOldPassUp));
VBox/VMM/VMMAll/IEMAll.cpp:940:        Log(("IEM: rcPassUp=%Rrc  rcOldPassUp=%Rrc!\n", VBOXSTRICTRC_VAL(rcPassUp), rcOldPassUp));
VBox/VMM/VMMAll/IEMAll.cpp:1401:        Log(("iemInitDecoderAndPrefetchOpcodes: %RGv - rc=%Rrc\n", GCPtrPC, rc));
VBox/VMM/VMMAll/IEMAll.cpp:1407:        Log(("iemInitDecoderAndPrefetchOpcodes: %RGv - supervisor page\n", GCPtrPC));
VBox/VMM/VMMAll/IEMAll.cpp:1413:        Log(("iemInitDecoderAndPrefetchOpcodes: %RGv - NX\n", GCPtrPC));
VBox/VMM/VMMAll/IEMAll.cpp:1469:                Log(("iemInitDecoderAndPrefetchOpcodes: %RGv/%RGp LB %#x - read status -  rcStrict=%Rrc\n",
VBox/VMM/VMMAll/IEMAll.cpp:1475:                Log((RT_SUCCESS(rcStrict)
VBox/VMM/VMMAll/IEMAll.cpp:1489:                Log(("iemInitDecoderAndPrefetchOpcodes: %RGv/%RGp LB %#x - read error - rc=%Rrc (!!)\n",
VBox/VMM/VMMAll/IEMAll.cpp:1765:                    Log(("iemOpcodeFetchMoreBytes: %RGv - rc=%Rrc\n", GCPtrFirst, rc));
VBox/VMM/VMMAll/IEMAll.cpp:1784:                Log(("iemOpcodeFetchBytesJmp: %RGv - supervisor page\n", GCPtrFirst));
VBox/VMM/VMMAll/IEMAll.cpp:1789:                Log(("iemOpcodeFetchMoreBytes: %RGv - NX\n", GCPtrFirst));
VBox/VMM/VMMAll/IEMAll.cpp:1879:                Log(("iemOpcodeFetchMoreBytes: %RGv/%RGp LB %#x - read status -  rcStrict=%Rrc\n",
VBox/VMM/VMMAll/IEMAll.cpp:1886:                Log((RT_SUCCESS(rcStrict)
VBox/VMM/VMMAll/IEMAll.cpp:1908:                Log(("iemOpcodeFetchMoreBytes: %RGv/%RGp LB %#x - read status -  rcStrict=%Rrc\n",
VBox/VMM/VMMAll/IEMAll.cpp:1915:                Log((RT_SUCCESS(rcStrict)
VBox/VMM/VMMAll/IEMAll.cpp:2015:        Log(("iemOpcodeFetchMoreBytes: %RGv - rc=%Rrc\n", GCPtrNext, rc));
VBox/VMM/VMMAll/IEMAll.cpp:2020:        Log(("iemOpcodeFetchMoreBytes: %RGv - supervisor page\n", GCPtrNext));
VBox/VMM/VMMAll/IEMAll.cpp:2025:        Log(("iemOpcodeFetchMoreBytes: %RGv - NX\n", GCPtrNext));
VBox/VMM/VMMAll/IEMAll.cpp:2049:            Log(("iemOpcodeFetchMoreBytes: %RGv/%RGp LB %#x - read status -  rcStrict=%Rrc\n",
VBox/VMM/VMMAll/IEMAll.cpp:2055:            Log((RT_SUCCESS(rcStrict)
VBox/VMM/VMMAll/IEMAll.cpp:2069:            Log(("iemOpcodeFetchMoreBytes: %RGv - read error - rc=%Rrc (!!)\n", GCPtrNext, rc));
VBox/VMM/VMMAll/IEMAll.cpp:3386:        Log(("iemMiscValidateNewSSandRsp: %#x - null selector -> #TS(0)\n", NewSS));
VBox/VMM/VMMAll/IEMAll.cpp:3393:        Log(("iemMiscValidateNewSSandRsp: %#x - RPL and CPL (%d) differs -> #TS\n", NewSS, uCpl));
VBox/VMM/VMMAll/IEMAll.cpp:3409:        Log(("iemMiscValidateNewSSandRsp: %#x - system selector (%#x) -> #TS\n", NewSS, pDesc->Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAll.cpp:3416:        Log(("iemMiscValidateNewSSandRsp: %#x - code or read only (%#x) -> #TS\n", NewSS, pDesc->Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAll.cpp:3421:        Log(("iemMiscValidateNewSSandRsp: %#x - DPL (%d) and CPL (%d) differs -> #TS\n", NewSS, pDesc->Legacy.Gen.u2Dpl, uCpl));
VBox/VMM/VMMAll/IEMAll.cpp:3429:        Log(("iemMiscValidateNewSSandRsp: %#x - segment not present -> #NP\n", NewSS));
VBox/VMM/VMMAll/IEMAll.cpp:3524:                Log(("LoadStackFromTss32Or16: out of bounds! uCpl=%d, u32Limit=%#x TSS16\n", uCpl, pCtx->tr.u32Limit));
VBox/VMM/VMMAll/IEMAll.cpp:3551:                Log(("LoadStackFromTss32Or16: out of bounds! uCpl=%d, u32Limit=%#x TSS16\n", uCpl, pCtx->tr.u32Limit));
VBox/VMM/VMMAll/IEMAll.cpp:3594:        Log(("iemRaiseLoadStackFromTss64: out of bounds! uCpl=%d uIst=%d, u32Limit=%#x\n", uCpl, uIst, pCtx->tr.u32Limit));
VBox/VMM/VMMAll/IEMAll.cpp:3649:        Log(("RaiseXcptOrIntInRealMode: %#x is out of bounds (%#x)\n", u8Vector, pCtx->idtr.cbIdt));
VBox/VMM/VMMAll/IEMAll.cpp:3807:        Log(("iemHlpTaskSwitchLoadDataSelectorInProtMode: failed to fetch selector. uSel=%u rc=%Rrc\n", uSel,
VBox/VMM/VMMAll/IEMAll.cpp:3816:        Log(("iemHlpTaskSwitchLoadDataSelectorInProtMode: invalid segment type. uSel=%u Desc.u4Type=%#x\n", uSel,
VBox/VMM/VMMAll/IEMAll.cpp:3829:            Log(("iemHlpTaskSwitchLoadDataSelectorInProtMode: Invalid priv. uSel=%u uSel.RPL=%u DPL=%u CPL=%u\n",
VBox/VMM/VMMAll/IEMAll.cpp:3838:        Log(("iemHlpTaskSwitchLoadDataSelectorInProtMode: Segment not present. uSel=%u\n", uSel));
VBox/VMM/VMMAll/IEMAll.cpp:3920:    Log(("iemTaskSwitch: enmTaskSwitch=%u NewTSS=%#x fIsNewTSS386=%RTbool EIP=%#RX32 uNextEip=%#RX32\n", enmTaskSwitch, SelTSS,
VBox/VMM/VMMAll/IEMAll.cpp:3937:        Log(("iemTaskSwitch: Invalid new TSS limit. enmTaskSwitch=%u uNewTSSLimit=%#x uNewTSSLimitMin=%#x -> #TS\n",
VBox/VMM/VMMAll/IEMAll.cpp:3954:        Log(("iemTaskSwitch: Invalid current TSS limit. enmTaskSwitch=%u uCurTSSLimit=%#x uCurTSSLimitMin=%#x -> #TS\n",
VBox/VMM/VMMAll/IEMAll.cpp:3973:        Log(("iemTaskSwitch: Failed to read new TSS. enmTaskSwitch=%u cbNewTSS=%u uNewTSSLimit=%u rc=%Rrc\n", enmTaskSwitch,
VBox/VMM/VMMAll/IEMAll.cpp:3990:            Log(("iemTaskSwitch: Failed to read new TSS descriptor in GDT. enmTaskSwitch=%u pGdt=%#RX64 rc=%Rrc\n",
VBox/VMM/VMMAll/IEMAll.cpp:3999:            Log(("iemTaskSwitch: Failed to commit new TSS descriptor in GDT. enmTaskSwitch=%u pGdt=%#RX64 rc=%Rrc\n",
VBox/VMM/VMMAll/IEMAll.cpp:4019:        Log(("iemTaskSwitch: Switching to the same TSS! enmTaskSwitch=%u GCPtr[Cur|New]TSS=%#RGv\n", enmTaskSwitch, GCPtrCurTSS));
VBox/VMM/VMMAll/IEMAll.cpp:4020:        Log(("uCurCr3=%#x uCurEip=%#x uCurEflags=%#x uCurEax=%#x uCurEsp=%#x uCurEbp=%#x uCurCS=%#04x uCurSS=%#04x uCurLdt=%#x\n",
VBox/VMM/VMMAll/IEMAll.cpp:4036:            Log(("iemTaskSwitch: Failed to read current 32-bit TSS. enmTaskSwitch=%u GCPtrCurTSS=%#RGv cb=%u rc=%Rrc\n",
VBox/VMM/VMMAll/IEMAll.cpp:4063:            Log(("iemTaskSwitch: Failed to commit current 32-bit TSS. enmTaskSwitch=%u rc=%Rrc\n", enmTaskSwitch,
VBox/VMM/VMMAll/IEMAll.cpp:4080:            Log(("iemTaskSwitch: Failed to read current 16-bit TSS. enmTaskSwitch=%u GCPtrCurTSS=%#RGv cb=%u rc=%Rrc\n",
VBox/VMM/VMMAll/IEMAll.cpp:4105:            Log(("iemTaskSwitch: Failed to commit current 16-bit TSS. enmTaskSwitch=%u rc=%Rrc\n", enmTaskSwitch,
VBox/VMM/VMMAll/IEMAll.cpp:4177:        Log(("uNewCr3=%#x uNewEip=%#x uNewEflags=%#x uNewEax=%#x uNewEsp=%#x uNewEbp=%#x uNewCS=%#04x uNewSS=%#04x uNewLdt=%#x\n",
VBox/VMM/VMMAll/IEMAll.cpp:4186:        Log(("iemTaskSwitch: Failed to commit new TSS. enmTaskSwitch=%u rc=%Rrc\n", enmTaskSwitch, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAll.cpp:4199:            Log(("iemTaskSwitch: Failed to read new TSS descriptor in GDT (2). enmTaskSwitch=%u pGdt=%#RX64 rc=%Rrc\n",
VBox/VMM/VMMAll/IEMAll.cpp:4213:            Log(("iemTaskSwitch: Failed to commit new TSS descriptor in GDT (2). enmTaskSwitch=%u pGdt=%#RX64 rc=%Rrc\n",
VBox/VMM/VMMAll/IEMAll.cpp:4336:            Log(("iemTaskSwitch: fetching LDT failed. enmTaskSwitch=%u uNewLdt=%u cbGdt=%u rc=%Rrc\n", enmTaskSwitch,
VBox/VMM/VMMAll/IEMAll.cpp:4344:            Log(("iemTaskSwitch: Invalid LDT. enmTaskSwitch=%u uNewLdt=%u DescNewLdt.Legacy.u=%#RX64 -> #TS\n", enmTaskSwitch,
VBox/VMM/VMMAll/IEMAll.cpp:4389:            Log(("iemTaskSwitch: Null stack segment. enmTaskSwitch=%u uNewSS=%#x -> #TS\n", enmTaskSwitch, uNewSS));
VBox/VMM/VMMAll/IEMAll.cpp:4397:            Log(("iemTaskSwitch: failed to fetch SS. uNewSS=%#x rc=%Rrc\n", uNewSS,
VBox/VMM/VMMAll/IEMAll.cpp:4407:            Log(("iemTaskSwitch: SS invalid descriptor type. uNewSS=%#x u1DescType=%u u4Type=%#x\n",
VBox/VMM/VMMAll/IEMAll.cpp:4416:            Log(("iemTaskSwitch: Invalid priv. for SS. uNewSS=%#x SS.DPL=%u uNewCpl=%u -> #TS\n", uNewSS, DescSS.Legacy.Gen.u2Dpl,
VBox/VMM/VMMAll/IEMAll.cpp:4424:            Log(("iemTaskSwitch: SS not present. uNewSS=%#x -> #NP\n", uNewSS));
VBox/VMM/VMMAll/IEMAll.cpp:4473:            Log(("iemTaskSwitch #TS: Null code segment. enmTaskSwitch=%u uNewCS=%#x\n", enmTaskSwitch, uNewCS));
VBox/VMM/VMMAll/IEMAll.cpp:4482:            Log(("iemTaskSwitch: failed to fetch CS. uNewCS=%u rc=%Rrc\n", uNewCS, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAll.cpp:4490:            Log(("iemTaskSwitch: CS invalid descriptor type. uNewCS=%#x u1DescType=%u u4Type=%#x -> #TS\n", uNewCS,
VBox/VMM/VMMAll/IEMAll.cpp:4499:            Log(("iemTaskSwitch: confirming CS DPL > RPL. uNewCS=%#x u4Type=%#x DPL=%u -> #TS\n", uNewCS, DescCS.Legacy.Gen.u4Type,
VBox/VMM/VMMAll/IEMAll.cpp:4508:            Log(("iemTaskSwitch: non-confirming CS DPL RPL mismatch. uNewCS=%#x u4Type=%#x DPL=%u -> #TS\n", uNewCS,
VBox/VMM/VMMAll/IEMAll.cpp:4516:            Log(("iemTaskSwitch: CS not present. uNewCS=%#x -> #NP\n", uNewCS));
VBox/VMM/VMMAll/IEMAll.cpp:4544:        Log(("iemTaskSwitch: Debug Trap set in new TSS. Not implemented!\n"));
VBox/VMM/VMMAll/IEMAll.cpp:4577:                Log(("iemTaskSwitch: SS=%#x ESP=%#x cbStackFrame=%#x is out of bounds -> #SS\n",
VBox/VMM/VMMAll/IEMAll.cpp:4587:                Log(("iemTaskSwitch: SS=%#x ESP=%#x cbStackFrame=%#x (expand down) is out of bounds -> #SS\n",
VBox/VMM/VMMAll/IEMAll.cpp:4600:            Log(("iemTaskSwitch: Can't push error code to new task's stack. %s-bit TSS. rc=%Rrc\n",
VBox/VMM/VMMAll/IEMAll.cpp:4609:        Log(("iemHlpTaskSwitchLoadDataSelectorInProtMode: New EIP exceeds CS limit. uNewEIP=%#RX32 CS limit=%u -> #GP(0)\n",
VBox/VMM/VMMAll/IEMAll.cpp:4615:    Log(("iemTaskSwitch: Success! New CS:EIP=%#04x:%#x SS=%#04x\n", pCtx->cs.Sel, pCtx->eip, pCtx->ss.Sel));
VBox/VMM/VMMAll/IEMAll.cpp:4647:        Log(("RaiseXcptOrIntInProtMode: %#x is out of bounds (%#x)\n", u8Vector, pCtx->idtr.cbIdt));
VBox/VMM/VMMAll/IEMAll.cpp:4655:    Log(("iemRaiseXcptOrIntInProtMode: vec=%#x P=%u DPL=%u DT=%u:%u A=%u %04x:%04x%04x\n",
VBox/VMM/VMMAll/IEMAll.cpp:4665:        Log(("RaiseXcptOrIntInProtMode %#x - not system selector (%#x) -> #GP\n", u8Vector, Idte.Gate.u4Type));
VBox/VMM/VMMAll/IEMAll.cpp:4687:            Log(("RaiseXcptOrIntInProtMode %#x - invalid type (%#x) -> #GP\n", u8Vector, Idte.Gate.u4Type));
VBox/VMM/VMMAll/IEMAll.cpp:4718:            Log(("RaiseXcptOrIntInProtMode %#x - CPL (%d) > DPL (%d) -> #GP\n", u8Vector, pVCpu->iem.s.uCpl, Idte.Gate.u2Dpl));
VBox/VMM/VMMAll/IEMAll.cpp:4726:        Log(("RaiseXcptOrIntInProtMode %#x - not present -> #NP\n", u8Vector));
VBox/VMM/VMMAll/IEMAll.cpp:4748:            Log(("RaiseXcptOrIntInProtMode %#x - failed to fetch TSS selector %#x, rc=%Rrc\n", u8Vector, SelTSS,
VBox/VMM/VMMAll/IEMAll.cpp:4758:            Log(("RaiseXcptOrIntInProtMode %#x - TSS selector %#x of task gate not a system descriptor or not available %#RX64\n",
VBox/VMM/VMMAll/IEMAll.cpp:4766:            Log(("RaiseXcptOrIntInProtMode %#x - TSS selector %#x not present %#RX64\n", u8Vector, SelTSS, DescTSS.Legacy.au64));
VBox/VMM/VMMAll/IEMAll.cpp:4778:        Log(("RaiseXcptOrIntInProtMode %#x - CS=%#x -> #GP\n", u8Vector, NewCS));
VBox/VMM/VMMAll/IEMAll.cpp:4787:        Log(("RaiseXcptOrIntInProtMode %#x - CS=%#x - rc=%Rrc\n", u8Vector, NewCS, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAll.cpp:4794:        Log(("RaiseXcptOrIntInProtMode %#x - CS=%#x - system selector (%#x) -> #GP\n", u8Vector, NewCS, DescCS.Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAll.cpp:4799:        Log(("RaiseXcptOrIntInProtMode %#x - CS=%#x - data selector (%#x) -> #GP\n", u8Vector, NewCS, DescCS.Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAll.cpp:4810:        Log(("RaiseXcptOrIntInProtMode %#x - CS=%#x - DPL (%d) > CPL (%d) -> #GP\n",
VBox/VMM/VMMAll/IEMAll.cpp:4818:        Log(("RaiseXcptOrIntInProtMode %#x - CS=%#x - segment not present -> #NP\n", u8Vector, NewCS));
VBox/VMM/VMMAll/IEMAll.cpp:4830:        Log(("RaiseXcptOrIntInProtMode %#x - EIP=%#x > cbLimitCS=%#x (CS=%#x) -> #GP(0)\n",
VBox/VMM/VMMAll/IEMAll.cpp:4848:        Log(("RaiseXcptOrIntInProtMode %#x - CS=%#x - New CPL (%d) != 0 w/ VM=1 -> #GP\n", u8Vector, NewCS, uNewCpl));
VBox/VMM/VMMAll/IEMAll.cpp:4871:            Log(("iemRaiseXcptOrIntInProtMode: Forcing ESP=%#x to 16 bits\n", uNewEsp));
VBox/VMM/VMMAll/IEMAll.cpp:4888:                Log(("RaiseXcptOrIntInProtMode: %#x - SS=%#x ESP=%#x cbStackFrame=%#x is out of bounds -> #GP\n",
VBox/VMM/VMMAll/IEMAll.cpp:4898:                Log(("RaiseXcptOrIntInProtMode: %#x - SS=%#x ESP=%#x cbStackFrame=%#x (expand down) is out of bounds -> #GP\n",
VBox/VMM/VMMAll/IEMAll.cpp:5107:        Log(("iemRaiseXcptOrIntInLongMode: %#x is out of bounds (%#x)\n", u8Vector, pCtx->idtr.cbIdt));
VBox/VMM/VMMAll/IEMAll.cpp:5116:    Log(("iemRaiseXcptOrIntInLongMode: vec=%#x P=%u DPL=%u DT=%u:%u IST=%u %04x:%08x%04x%04x\n",
VBox/VMM/VMMAll/IEMAll.cpp:5126:        Log(("iemRaiseXcptOrIntInLongMode %#x - not system selector (%#x) -> #GP\n", u8Vector, Idte.Gate.u4Type));
VBox/VMM/VMMAll/IEMAll.cpp:5139:            Log(("iemRaiseXcptOrIntInLongMode %#x - invalid type (%#x) -> #GP\n", u8Vector, Idte.Gate.u4Type));
VBox/VMM/VMMAll/IEMAll.cpp:5148:            Log(("iemRaiseXcptOrIntInLongMode %#x - CPL (%d) > DPL (%d) -> #GP\n", u8Vector, pVCpu->iem.s.uCpl, Idte.Gate.u2Dpl));
VBox/VMM/VMMAll/IEMAll.cpp:5156:        Log(("iemRaiseXcptOrIntInLongMode %#x - not present -> #NP\n", u8Vector));
VBox/VMM/VMMAll/IEMAll.cpp:5164:        Log(("iemRaiseXcptOrIntInLongMode %#x - CS=%#x -> #GP\n", u8Vector, NewCS));
VBox/VMM/VMMAll/IEMAll.cpp:5173:        Log(("iemRaiseXcptOrIntInLongMode %#x - CS=%#x - rc=%Rrc\n", u8Vector, NewCS, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAll.cpp:5180:        Log(("iemRaiseXcptOrIntInLongMode %#x - CS=%#x - system selector (%#x) -> #GP\n", u8Vector, NewCS, DescCS.Legacy.Gen.u4Type));
VBox/VMM/VMMAll/IEMAll.cpp:5187:        Log(("iemRaiseXcptOrIntInLongMode %#x - CS=%#x - not 64-bit code selector (%#x, L=%u, D=%u) -> #GP\n",
VBox/VMM/VMMAll/IEMAll.cpp:5200:        Log(("iemRaiseXcptOrIntInLongMode %#x - CS=%#x - DPL (%d) > CPL (%d) -> #GP\n",
VBox/VMM/VMMAll/IEMAll.cpp:5209:        Log(("iemRaiseXcptOrIntInLongMode %#x - CS=%#x - segment not present -> #NP\n", u8Vector, NewCS));
VBox/VMM/VMMAll/IEMAll.cpp:5219:        Log(("iemRaiseXcptOrIntInLongMode %#x - RIP=%#RX64 - Not canonical -> #GP(0)\n", u8Vector, uNewRip));
VBox/VMM/VMMAll/IEMAll.cpp:5368:        Log(("iemRaiseXcptOrInt: V8086 IOPL check failed for int %#x -> #GP(0)\n", u8Vector));
VBox/VMM/VMMAll/IEMAll.cpp:5408:        Log(("iemRaiseXcptOrInt: %#x at %04x:%RGv cbInstr=%#x fFlags=%#x uErr=%#x uCr2=%llx\n",
VBox/VMM/VMMAll/IEMAll.cpp:5412:        Log(("iemRaiseXcptOrInt: %#x at %04x:%RGv cbInstr=%#x fFlags=%#x uErr=%#x uCr2=%llx; prev=%#x depth=%d flags=%#x\n",
VBox/VMM/VMMAll/IEMAll.cpp:5552:    Log(("iemRaiseXcptOrInt: returns %Rrc (vec=%#x); cs:rip=%04x:%RGv ss:rsp=%04x:%RGv cpl=%u\n",
VBox/VMM/VMMAll/IEMAll.cpp:6018:# define IEMOP_BITCH_ABOUT_STUB() Log(("Stub: %s (line %d)\n", __FUNCTION__, __LINE__));
VBox/VMM/VMMAll/IEMAll.cpp:6046:        Log(("Unsupported instruction %Rfn\n", __FUNCTION__)); \
VBox/VMM/VMMAll/IEMAll.cpp:6057:        Log(("Unsupported instruction %Rfn\n", __FUNCTION__)); \
VBox/VMM/VMMAll/IEMAll.cpp:7887:            Log(("iemMemSegCheckWriteAccessEx: %#x (index %u) - bad selector -> #GP\n", uSel, iSegReg));
VBox/VMM/VMMAll/IEMAll.cpp:7925:            Log(("iemMemSegCheckReadAccessEx: %#x (index %u) - bad selector -> #GP\n", uSel, iSegReg));
VBox/VMM/VMMAll/IEMAll.cpp:8089:            Log(("iemMemPageTranslateAndCheckAccess: GCPtrMem=%RGv - read-only page -> #PF\n", GCPtrMem));
VBox/VMM/VMMAll/IEMAll.cpp:8099:            Log(("iemMemPageTranslateAndCheckAccess: GCPtrMem=%RGv - user access to kernel page -> #PF\n", GCPtrMem));
VBox/VMM/VMMAll/IEMAll.cpp:8109:            Log(("iemMemPageTranslateAndCheckAccess: GCPtrMem=%RGv - NX -> #PF\n", GCPtrMem));
VBox/VMM/VMMAll/IEMAll.cpp:8179:    /*Log(("PGMPhysIemGCPhys2Ptr %Rrc pLock=%.*Rhxs\n", rc, sizeof(*pLock), pLock));*/
VBox/VMM/VMMAll/IEMAll.cpp:8315:                        Log(("iemMemBounceBufferCommitAndUnmap: PGMPhysWrite GCPhysFirst=%RGp/%#x GCPhysSecond=%RGp/%#x %Rrc\n",
VBox/VMM/VMMAll/IEMAll.cpp:8323:                        Log(("iemMemBounceBufferCommitAndUnmap: PGMPhysWrite GCPhysFirst=%RGp/%#x GCPhysSecond=%RGp/%#x %Rrc (postponed)\n",
VBox/VMM/VMMAll/IEMAll.cpp:8333:                        Log(("iemMemBounceBufferCommitAndUnmap: PGMPhysWrite GCPhysFirst=%RGp/%#x GCPhysSecond=%RGp/%#x %Rrc (!!)\n",
VBox/VMM/VMMAll/IEMAll.cpp:8344:                    Log(("iemMemBounceBufferCommitAndUnmap: PGMPhysWrite GCPhysFirst=%RGp/%#x %Rrc\n",
VBox/VMM/VMMAll/IEMAll.cpp:8357:                        Log(("iemMemBounceBufferCommitAndUnmap: PGMPhysWrite GCPhysFirst=%RGp/%#x %Rrc GCPhysSecond=%RGp/%#x\n",
VBox/VMM/VMMAll/IEMAll.cpp:8364:                        Log(("iemMemBounceBufferCommitAndUnmap: PGMPhysWrite GCPhysFirst=%RGp/%#x %Rrc GCPhysSecond=%RGp/%#x %Rrc\n",
VBox/VMM/VMMAll/IEMAll.cpp:8373:                        Log(("iemMemBounceBufferCommitAndUnmap: PGMPhysWrite GCPhysFirst=%RGp/%#x GCPhysSecond=%RGp/%#x %Rrc (postponed)\n",
VBox/VMM/VMMAll/IEMAll.cpp:8383:                        Log(("iemMemBounceBufferCommitAndUnmap: PGMPhysWrite GCPhysFirst=%RGp/%#x %Rrc GCPhysSecond=%RGp/%#x %Rrc (!!)\n",
VBox/VMM/VMMAll/IEMAll.cpp:8393:                Log(("iemMemBounceBufferCommitAndUnmap: PGMPhysWrite GCPhysFirst=%RGp/%#x GCPhysSecond=%RGp/%#x %Rrc (postponed)\n",
VBox/VMM/VMMAll/IEMAll.cpp:8406:                Log(("iemMemBounceBufferCommitAndUnmap: PGMPhysWrite GCPhysFirst=%RGp/%#x %Rrc [GCPhysSecond=%RGp/%#x] (!!)\n",
VBox/VMM/VMMAll/IEMAll.cpp:8427:                        Log(("iemMemBounceBufferCommitAndUnmap: PGMPhysSimpleWriteGCPhys GCPhysFirst=%RGp/%#x GCPhysSecond=%RGp/%#x %Rrc (!!)\n",
VBox/VMM/VMMAll/IEMAll.cpp:8436:                Log(("iemMemBounceBufferCommitAndUnmap: PGMPhysSimpleWriteGCPhys GCPhysFirst=%RGp/%#x %Rrc [GCPhysSecond=%RGp/%#x] (!!)\n",
VBox/VMM/VMMAll/IEMAll.cpp:8480:    Log(("IEM Wrote %RGp: %.*Rhxs\n", pVCpu->iem.s.aMemBbMappings[iMemMap].GCPhysFirst,
VBox/VMM/VMMAll/IEMAll.cpp:8483:        Log(("IEM Wrote %RGp: %.*Rhxs [2nd page]\n", pVCpu->iem.s.aMemBbMappings[iMemMap].GCPhysSecond,
VBox/VMM/VMMAll/IEMAll.cpp:8566:                    Log(("iemMemBounceBufferMapPhys: PGMPhysRead GCPhysSecond=%RGp rcStrict2=%Rrc (!!)\n",
VBox/VMM/VMMAll/IEMAll.cpp:8581:                    Log(("iemMemBounceBufferMapPhys: PGMPhysRead GCPhysSecond=%RGp rcStrict2=%Rrc (rcStrict=%Rrc) (!!)\n",
VBox/VMM/VMMAll/IEMAll.cpp:8588:                Log(("iemMemBounceBufferMapPhys: PGMPhysRead GCPhysFirst=%RGp rcStrict=%Rrc (!!)\n",
VBox/VMM/VMMAll/IEMAll.cpp:8607:                    Log(("iemMemBounceBufferMapPhys: PGMPhysSimpleReadGCPhys GCPhysSecond=%RGp rc=%Rrc (!!)\n", GCPhysSecond, rc));
VBox/VMM/VMMAll/IEMAll.cpp:8613:                Log(("iemMemBounceBufferMapPhys: PGMPhysSimpleReadGCPhys GCPhysFirst=%RGp rc=%Rrc (!!)\n", GCPhysFirst, rc));
VBox/VMM/VMMAll/IEMAll.cpp:8711:                    Log(("iemMemBounceBufferMapPhys: PGMPhysRead GCPhysFirst=%RGp rcStrict=%Rrc (!!)\n",
VBox/VMM/VMMAll/IEMAll.cpp:8723:                    Log(("iemMemBounceBufferMapPhys: PGMPhysSimpleReadGCPhys GCPhysFirst=%RGp rcStrict=%Rrc (!!)\n",
VBox/VMM/VMMAll/IEMAll.cpp:10267:        Log(("sidt/sgdt: Guest intercept -> #VMEXIT\n"));
VBox/VMM/VMMAll/IEMAll.cpp:10960:            Log(("iemMemFetchSelDesc: LDT selector %#x is out of bounds (%3x) or ldtr is NP (%#x)\n",
VBox/VMM/VMMAll/IEMAll.cpp:10973:            Log(("iemMemFetchSelDesc: GDT selector %#x is out of bounds (%3x)\n", uSel, pCtx->gdtr.cbGdt));
VBox/VMM/VMMAll/IEMAll.cpp:11009:            Log(("iemMemFetchSelDesc: system selector %#x is out of bounds\n", uSel));
VBox/VMM/VMMAll/IEMAll.cpp:14411:        //Log(("REM and IEM ends up with different registers!\n"));
VBox/VMM/VMMAll/IEMAll.cpp:14871:                Log(("IEM: rcPassUp=%Rrc! rcStrict=%Rrc\n", rcPassUp, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAll.cpp:14877:                Log(("IEM: rcPassUp=%Rrc  rcStrict=%Rrc!\n", rcPassUp, VBOXSTRICTRC_VAL(rcStrict)));
VBox/VMM/VMMAll/IEMAll.cpp:15019:            Log(("iemRCRawMaybeReenter: VINF_EM_RESCHEDULE\n"));
VBox/VMM/VMMAll/IEMAll.cpp:15279:     * Log the state.
VBox/VMM/VMMAll/IEMAll.cpp:15298:     * Log and return.
VBox/VMM/VMMAll/IEMAll.cpp:15366:                 * Log the state.
VBox/VMM/VMMAll/IEMAll.cpp:15504:            Log(("IEMInjectTrap: %#4x ext\n", u8TrapNo));
VBox/VMM/VMMAll/IEMAll.cpp:15510:            Log(("IEMInjectTrap: %#4x soft\n", u8TrapNo));
VBox/VMM/VMMAll/IEMAll.cpp:15516:            Log(("IEMInjectTrap: %#4x trap err=%#x cr2=%#RGv\n", u8TrapNo, uErrCode, uCr2));
VBox/VMM/VMMAll/IEMAll.cpp:16352:                Log(("IEMR3ProcessForceFlag: iMemMap=%u GCPhysFirst=%RGp LB %#x %Rrc => %Rrc\n",
VBox/VMM/VMMAll/IEMAll.cpp:16365:                Log(("IEMR3ProcessForceFlag: iMemMap=%u GCPhysSecond=%RGp LB %#x %Rrc => %Rrc\n",
VBox/VMM/VMMAll/EMAll.cpp:519:        Log(("EMInterpretDisasOne: Failed to convert %RTsel:%RGv (cpl=%d) - rc=%Rrc !!\n",
VBox/VMM/VMMAll/EMAll.cpp:824:        Log(("EMInterpretInstruction: returns %Rrc\n", VBOXSTRICTRC_VAL(rcEm)));
VBox/VMM/VMMAll/EMAll.cpp:856:        Log(("EMInterpretInstruction: returns %Rrc\n", VBOXSTRICTRC_VAL(rc)));
VBox/VMM/VMMAll/EMAll.cpp:954:        Log(("EMInterpretInstruction: returns %Rrc\n", VBOXSTRICTRC_VAL(rcEm)));
VBox/VMM/VMMAll/EMAll.cpp:989:        Log(("EMInterpretInstructionEx: returns %Rrc\n", VBOXSTRICTRC_VAL(rc)));
VBox/VMM/VMMAll/EMAll.cpp:1075:        Log(("EMInterpretInstruction: returns %Rrc\n", VBOXSTRICTRC_VAL(rcEm)));
VBox/VMM/VMMAll/EMAll.cpp:1108:        Log(("EMInterpretInstructionDisasState: returns %Rrc\n", VBOXSTRICTRC_VAL(rc)));
VBox/VMM/VMMAll/EMAll.cpp:1223:        Log(("emInterpretIret: iret to CS:EIP=%04X:%08X eflags=%x\n", cs, eip, eflags));
VBox/VMM/VMMAll/EMAll.cpp:1229:            Log(("emInterpretIret: return to different privilege level (rpl=%d cpl=%d)\n", rpl, cpl));
VBox/VMM/VMMAll/EMAll.cpp:1230:            Log(("emInterpretIret: SS:ESP=%04x:%08x\n", ss, esp));
VBox/VMM/VMMAll/EMAll.cpp:1294:    Log(("Emulate: CPUID %x/%x -> %08x %08x %08x %08x\n", iLeaf, iSubLeaf, pRegFrame->eax, pRegFrame->ebx, pRegFrame->ecx, pRegFrame->edx));
VBox/VMM/VMMAll/EMAll.cpp:1425:        Log(("EMInterpretMWait: unexpected ecx value %x -> recompiler\n", pRegFrame->ecx));
VBox/VMM/VMMAll/EMAll.cpp:1431:        Log(("EMInterpretMWait: unsupported X86_CPUID_MWAIT_ECX_BREAKIRQIF0 -> recompiler\n"));
VBox/VMM/VMMAll/EMAll.cpp:1450:        Log(("emInterpretMonitor: unexpected ecx=%x -> recompiler!!\n", pRegFrame->ecx));
VBox/VMM/VMMAll/EMAll.cpp:1748:    Log(("EM Wrote: %RGv %.*Rhxs rc=%Rrc\n", GCPtrDst, RT_MAX(RT_MIN(cb, 64), 1), pvSrc, rc));
VBox/VMM/VMMAll/EMAll.cpp:1817:            Log(("Unknown opcode %d\n", pDis->pCurInstr->uOpcode));
VBox/VMM/VMMAll/EMAll.cpp:2268:        Log(("%s %RGv imm%d=%RX64-> emulation failed due to page fault!\n", emGetMnemonic(pDis), GCPtrPar1, pDis->Param2.cb*8, ValPar2));
VBox/VMM/VMMAll/EMAll.cpp:2517:        Log(("emInterpretLockBitTest %s: %RGv imm%d=%RX64 -> emulation failed due to page fault!\n",
VBox/VMM/VMMAll/EMAll.cpp:2584:            Log(("emInterpretMov: unexpected type=%d rip=%RGv\n", param2.type, (RTGCPTR)pRegFrame->rip));
VBox/VMM/VMMAll/EMAll.cpp:2614:        Log(("EMInterpretInstruction: OP_MOV cs=%x->%x\n", pRegFrame->cs.Sel, uValCS));
VBox/VMM/VMMAll/EMAll.cpp:2783:            Log(("STOSWD is crosses pages, chicken out to the recompiler; GCDest=%RGv cbSize=%#x offIncrement=%d cTransfers=%#x\n",
VBox/VMM/VMMAll/EMAll.cpp:2795:            Log(("STOSWD will generate a trap -> recompiler, rc=%d\n", rc));
VBox/VMM/VMMAll/EMAll.cpp:3279:            Log(("Trying to set reserved CR4 bits: NewCR4=%#llx InvalidBits=%#llx\n", val, val & ~(uint64_t)fValid));
VBox/VMM/VMMAll/EMAll.cpp:3297:            Log(("emInterpretMovCRx: CR4: %#RX64->%#RX64 => R3\n", oldval, val));
VBox/VMM/VMMAll/EMAll.cpp:3577:    Log(("Emulate %s at %RGv\n", emGetMnemonic(pDis), (RTGCPTR)pRegFrame->rip));
VBox/VMM/VMMAll/EMAll.cpp:3739:                Log(("WARNING: refusing instruction emulation for user-mode code!!\n"));
VBox/VMM/VMMAll/EMAll.cpp:3776:        //Log(("EMInterpretInstruction: wrong prefix!!\n"));
VBox/VMM/VMMAll/PDMAll.cpp:321:        Log(("PDMVmmDevHeapR3ToGCPhys: pv=%p pvVMMDevHeap=%p cbVMMDevHeap=%#x\n",
VBox/VMM/VMMAll/PDMAll.cpp:325:        Log(("PDMVmmDevHeapR3ToGCPhys: GCPhysVMMDevHeap=%RGp (pv=%p)\n", pVM->pdm.s.GCPhysVMMDevHeap, pv));
VBox/VMM/VMMAll/PGMAllPhys.cpp:677:            Log(("PGM: cHandyPages=%u out of %u -> allocate more; VM_FF_PGM_NO_MEMORY=%RTbool\n",
VBox/VMM/VMMAll/PGMAllPhys.cpp:716:                Log(("PGM: VM_FF_TO_R3 - cHandyPages=%u out of %u\n", pVM->pgm.s.cHandyPages, RT_ELEMENTS(pVM->pgm.s.aHandyPages)));
VBox/VMM/VMMAll/PGMAllPhys.cpp:835:        Log(("PGM: Replaced shared page %#x at %RGp with %#x / %RHp\n", PGM_PAGE_GET_PAGEID(pPage),
VBox/VMM/VMMAll/PGMAllPhys.cpp:1029:        Log(("pgmPhysRecheckLargePage: page %RGp can be reused!\n", GCPhys - _2M));
VBox/VMM/VMMAll/PGMAllPhys.cpp:2130:    Log(("pgmPhysGCPhys2R3Ptr(,%RGp,): dont use this API!\n", GCPhys)); /** @todo eliminate this API! */
VBox/VMM/VMMAll/PGMAllPhys.cpp:2379:            Log(("pgmPhysReadHandler: GCPhys=%RGp cb=%#x pPage=%R[pgmpage] phys/virt %s/%s\n", GCPhys, cb, pPage, R3STRING(pVirt->pszDesc), R3STRING(pPhys->pszDesc) ));
VBox/VMM/VMMAll/PGMAllPhys.cpp:2944:                Log(("pgmPhysWriteHandler: overlapping phys and virt handlers at %RGp %R[pgmpage]; cbRange=%#x\n", GCPhys, pPage, cbRange));
VBox/VMM/VMMAll/PGMAllPhys.cpp:3728:            Log(("PGMPhysWriteGCPtr: Writing to RO page %RGv %#x\n", GCPtrDst, cb));
VBox/VMM/VMMAll/PGMAllPhys.cpp:3752:            Log(("PGMPhysWriteGCPtr: Writing to RO page %RGv %#x\n", GCPtrDst, cb));
VBox/VMM/VMMAll/PGMAllPhys.cpp:3842:                    Log(("PGMPhysInterpretedRead: pvDst=%p pvSrc=%p cb=%d\n", pvDst, (uint8_t *)pvSrc + (GCPtrSrc & PAGE_OFFSET_MASK), cb));
VBox/VMM/VMMAll/PGMAllPhys.cpp:3952:    Log(("PGMPhysInterpretedRead: GCPtrSrc=%RGv cb=%#x -> #PF(%#x)\n", GCPtrSrc, cb, uErr));
VBox/VMM/VMMAll/PGMAllPhys.cpp:4021:                        Log(("PGMPhysInterpretedReadNoHandlers: pvDst=%p pvSrc=%p (%RGv) cb=%d\n",
VBox/VMM/VMMAll/PGMAllPhys.cpp:4070:                            Log(("PGMPhysInterpretedReadNoHandlers: pvDst=%p pvSrc=%p (%RGv) cb=%d [2]\n",
VBox/VMM/VMMAll/PGMAllPhys.cpp:4146:        Log(("PGMPhysInterpretedReadNoHandlers: GCPtrSrc=%RGv cb=%#x -> Raised #PF(%#x)\n", GCPtrSrc, cb, uErr));
VBox/VMM/VMMAll/PGMAllPhys.cpp:4149:    Log(("PGMPhysInterpretedReadNoHandlers: GCPtrSrc=%RGv cb=%#x -> #PF(%#x) [!raised]\n", GCPtrSrc, cb, uErr));
VBox/VMM/VMMAll/PGMAllPhys.cpp:4219:                        Log(("PGMPhysInterpretedWriteNoHandlers: pvDst=%p (%RGv) pvSrc=%p cb=%d\n",
VBox/VMM/VMMAll/PGMAllPhys.cpp:4272:                            Log(("PGMPhysInterpretedWriteNoHandlers: pvDst=%p (%RGv) pvSrc=%p cb=%d\n",
VBox/VMM/VMMAll/PGMAllPhys.cpp:4354:        Log(("PGMPhysInterpretedWriteNoHandlers: GCPtrDst=%RGv cb=%#x -> Raised #PF(%#x)\n", GCPtrDst, cb, uErr));
VBox/VMM/VMMAll/PGMAllPhys.cpp:4357:    Log(("PGMPhysInterpretedWriteNoHandlers: GCPtrDst=%RGv cb=%#x -> #PF(%#x) [!raised]\n", GCPtrDst, cb, uErr));
VBox/VMM/VMMAll/MMAllHyper.cpp:1131:            Log(("%p  %06x USED offNext=%06x offPrev=-%06x %s%s\n",
VBox/VMM/VMMAll/MMAllHyper.cpp:1136:            Log(("%p  %06x USED offNext=%06x offPrev=-%06x %d%s\n",
VBox/VMM/VMMAll/MMAllHyper.cpp:1144:            Log(("%p  %06x USED offNext=%06x offPrev=-%06x\n",
VBox/VMM/VMMAll/MMAllHyper.cpp:1149:        Log(("%p  %06x FREE offNext=%06x offPrev=-%06x : cb=%06x offNext=%06x offPrev=-%06x\n",
VBox/VMM/VMMAll/MMAllHyper.cpp:1234: * Dumps the hypervisor heap to Log.
VBox/VMM/VMMAll/MMAllHyper.cpp:1239:    Log(("MMHyperHeapDump: *** heap dump - start ***\n"));
VBox/VMM/VMMAll/MMAllHyper.cpp:1251:    Log(("MMHyperHeapDump: *** heap dump - end ***\n"));
VBox/VMM/VMMRC/CSAMRC.cpp:81:        Log(("csamRCCodePageWriteHandler: fPIF=0 -> stack fault in patch generated code at %08RX32!\n", pRegFrame->eip));
VBox/VMM/VMMRC/CSAMRC.cpp:101:    Log(("csamRCCodePageWriteHandler: code page write at %RGv original address %RGv (cpl=%d)\n", pvFault, (RTGCUINTPTR)pvRange + offRange, cpl));
VBox/VMM/VMMRC/CSAMRC.cpp:129:    Log(("csamRCCodePageWriteHandler: enabled r/w for page %RGv\n", pvFault));
VBox/VMM/VMMRC/VMMRC.cpp:97:            Log(("VMMRCEntry: VMMRC_DO_VMMRC_INIT - uArg=%u (svn revision) u64TS=%RX64; rc=%Rrc\n", uArg, u64TS, rc));
VBox/VMM/VMMRC/CPUMRC.cpp:56:    Log(("********************************************************\n"));
VBox/VMM/VMMRC/CPUMRC.cpp:57:    Log(("cpumRCHandleNPAndGP: eip=%RX32 uUser=%#x\n", pRegFrame->eip, uUser));
VBox/VMM/VMMRC/CPUMRC.cpp:58:    Log(("********************************************************\n"));
VBox/VMM/VMMRC/SELMRC.cpp:116:            Log(("selmRCSyncGDTEntry: Sel=%d Desc=%.8Rhxs: detected conflict!!\n", Sel, &Desc));
VBox/VMM/VMMRC/SELMRC.cpp:121:        Log(("selmRCSyncGDTEntry: Sel=%d Desc=%.8Rhxs: potential conflict (still not present)!\n", Sel, &Desc));
VBox/VMM/VMMRC/SELMRC.cpp:133:    //Log(("O: base=%08X limit=%08X attr=%04X\n", X86DESC_BASE(*pShwDescr)), X86DESC_LIMIT(*pShwDescr), (pShwDescr->au32[1] >> 8) & 0xFFFF ));
VBox/VMM/VMMRC/SELMRC.cpp:134:    //Log(("N: base=%08X limit=%08X attr=%04X\n", X86DESC_BASE(Desc)), X86DESC_LIMIT(Desc), (Desc.au32[1] >> 8) & 0xFFFF ));
VBox/VMM/VMMRC/SELMRC.cpp:150:                    Log(("GDT write to selector in %s register %04X (now stale)\n", g_aszSRegNms[iSReg], paSReg[iSReg].Sel));
VBox/VMM/VMMRC/SELMRC.cpp:158:                    Log(("GDT write to selector in %s register %04X (no longer stale)\n", g_aszSRegNms[iSReg], paSReg[iSReg].Sel));
VBox/VMM/VMMRC/SELMRC.cpp:162:                    Log(("GDT write to selector in %s register %04X (no important change)\n", g_aszSRegNms[iSReg], paSReg[iSReg].Sel));
VBox/VMM/VMMRC/SELMRC.cpp:165:                Log(("GDT write to selector in %s register %04X (out of sync)\n", g_aszSRegNms[iSReg], paSReg[iSReg].Sel));
VBox/VMM/VMMRC/SELMRC.cpp:214:                    Log(("selmRCSyncGDTSegRegs: Updated %s\n", g_aszSRegNms[iSReg]));
VBox/VMM/VMMRC/SELMRC.cpp:217:                    Log(("selmRCSyncGDTSegRegs: Bad shadow descriptor %#x (for %s): %.8Rhxs \n",
VBox/VMM/VMMRC/SELMRC.cpp:278:        Log(("LDTR selector change -> fall back to HC!!\n"));
VBox/VMM/VMMRC/SELMRC.cpp:415:        Log(("selmRCGuestTSSWritePfHandler: R0 stack: %RTsel:%RGv -> %RTsel:%RGv\n",
VBox/VMM/VMMRC/SELMRC.cpp:429:        Log(("selmRCGuestTSSWritePfHandler: R1 stack: %RTsel:%RGv -> %RTsel:%RGv\n",
VBox/VMM/VMMRC/SELMRC.cpp:453:            Log(("selmRCGuestTSSWritePfHandler: R0 stack: %RTsel:%RGv -> %RTsel:%RGv [x-page]\n",
VBox/VMM/VMMRC/SELMRC.cpp:473:                Log(("TSS offIoBitmap changed: old=%#x new=%#x -> resync in ring-3\n", pVM->selm.s.offGuestIoBitmap, offIoBitmap));
VBox/VMM/VMMRC/SELMRC.cpp:478:                Log(("TSS offIoBitmap: old=%#x new=%#x [unchanged]\n", pVM->selm.s.offGuestIoBitmap, offIoBitmap));
VBox/VMM/VMMRC/SELMRC.cpp:488:                Log(("TSS IntRedirBitmap Changed: offIoBitmap=%x offIntRedirBitmap=%x cbTSS=%x offGuestTss=%x cbWrite=%x\n",
VBox/VMM/VMMRC/PATMRC.cpp:101:        Log(("PATMGCHandleWriteToPatchPage: Found page %RRv for write to %RRv %d bytes (page low:high %RRv:%RRv\n",
VBox/VMM/VMMRC/PATMRC.cpp:188:                Log(("PATMRC: lookup %x jump table=%x\n", pCtxCore->edx, pCtxCore->edi));
VBox/VMM/VMMRC/PATMRC.cpp:199:                            Log(("Patch block %RRv called as function\n", pRec->patch.pPrivInstrGC));
VBox/VMM/VMMRC/PATMRC.cpp:237:                Log(("PATMRC: Dispatch pending interrupt; eip=%x->%x\n", pCtxCore->eip, pCtxCore->edi));
VBox/VMM/VMMRC/PATMRC.cpp:263:                Log(("PATMRC: Dispatch pending interrupt (iret); eip=%x->%x\n", pCtxCore->eip, pCtxCore->edi));
VBox/VMM/VMMRC/PATMRC.cpp:282:                Log(("PATMRC: Do iret to V86 code; eip=%x\n", pCtxCore->eip));
VBox/VMM/VMMRC/PATMRC.cpp:308:                Log(("PATMRC: CLI at %x (current IF=%d iopl=%d)\n", pCtxCore->eip, !!(pVM->patm.s.CTXSUFF(pGCState)->uVMFlags & X86_EFL_IF), X86_EFL_GET_IOPL(pVM->patm.s.CTXSUFF(pGCState)->uVMFlags) ));
VBox/VMM/VMMRC/PATMRC.cpp:313:                Log(("PATMRC: STI at %x (current IF=%d iopl=%d)\n", pCtxCore->eip, !!(pVM->patm.s.CTXSUFF(pGCState)->uVMFlags & X86_EFL_IF), X86_EFL_GET_IOPL(pVM->patm.s.CTXSUFF(pGCState)->uVMFlags) ));
VBox/VMM/VMMRC/PATMRC.cpp:318:                Log(("PATMRC: POPF setting IF at %x (current IF=%d iopl=%d)\n", pCtxCore->eip, !!(pVM->patm.s.CTXSUFF(pGCState)->uVMFlags & X86_EFL_IF), X86_EFL_GET_IOPL(pVM->patm.s.CTXSUFF(pGCState)->uVMFlags)));
VBox/VMM/VMMRC/PATMRC.cpp:323:                Log(("PATMRC: POPF at %x (current IF=%d iopl=%d)\n", pCtxCore->eip, !!(pVM->patm.s.CTXSUFF(pGCState)->uVMFlags & X86_EFL_IF), X86_EFL_GET_IOPL(pVM->patm.s.CTXSUFF(pGCState)->uVMFlags)));
VBox/VMM/VMMRC/PATMRC.cpp:328:                Log(("PATMRC: PUSHF at %x (current IF=%d iopl=%d)\n", pCtxCore->eip, !!(pVM->patm.s.CTXSUFF(pGCState)->uVMFlags & X86_EFL_IF), X86_EFL_GET_IOPL(pVM->patm.s.CTXSUFF(pGCState)->uVMFlags) ));
VBox/VMM/VMMRC/PATMRC.cpp:333:                Log(("PATMRC: IF=1 escape from %x\n", pCtxCore->eip));
VBox/VMM/VMMRC/PATMRC.cpp:364:                                Log(("PATMRC: IRET->VM stack frame: return address %04X:%x eflags=%08x ss:esp=%04X:%x\n", selCS, eip, uEFlags, selSS, esp));
VBox/VMM/VMMRC/PATMRC.cpp:365:                                Log(("PATMRC: IRET->VM stack frame: DS=%04X ES=%04X FS=%04X GS=%04X\n", selDS, selES, selFS, selGS));
VBox/VMM/VMMRC/PATMRC.cpp:369:                            Log(("PATMRC: IRET stack frame: return address %04X:%x eflags=%08x ss:esp=%04X:%x\n", selCS, eip, uEFlags, selSS, esp));
VBox/VMM/VMMRC/PATMRC.cpp:372:                        Log(("PATMRC: IRET stack frame: return address %04X:%x eflags=%08x\n", selCS, eip, uEFlags));
VBox/VMM/VMMRC/PATMRC.cpp:374:                Log(("PATMRC: IRET from %x (IF->1) current eflags=%x\n", pCtxCore->eip, pVM->patm.s.CTXSUFF(pGCState)->uVMFlags));
VBox/VMM/VMMRC/PATMRC.cpp:406:                                Log(("PATMRC: GATE->VM stack frame: return address %04X:%x eflags=%08x ss:esp=%04X:%x\n", selCS, eip, uEFlags, selSS, esp));
VBox/VMM/VMMRC/PATMRC.cpp:407:                                Log(("PATMRC: GATE->VM stack frame: DS=%04X ES=%04X FS=%04X GS=%04X\n", selDS, selES, selFS, selGS));
VBox/VMM/VMMRC/PATMRC.cpp:411:                            Log(("PATMRC: GATE stack frame: return address %04X:%x eflags=%08x ss:esp=%04X:%x\n", selCS, eip, uEFlags, selSS, esp));
VBox/VMM/VMMRC/PATMRC.cpp:414:                        Log(("PATMRC: GATE stack frame: return address %04X:%x eflags=%08x\n", selCS, eip, uEFlags));
VBox/VMM/VMMRC/PATMRC.cpp:421:                Log(("PATMRC: RET from %x to %x ESP=%x iopl=%d\n", pCtxCore->eip, pCtxCore->edx, pCtxCore->ebx, X86_EFL_GET_IOPL(pVM->patm.s.CTXSUFF(pGCState)->uVMFlags)));
VBox/VMM/VMMRC/PATMRC.cpp:426:                Log(("PATMRC: CALL to %RRv return addr %RRv ESP=%x iopl=%d\n", pVM->patm.s.CTXSUFF(pGCState)->GCCallPatchTargetAddr, pVM->patm.s.CTXSUFF(pGCState)->GCCallReturnAddr, pCtxCore->edx, X86_EFL_GET_IOPL(pVM->patm.s.CTXSUFF(pGCState)->uVMFlags)));
VBox/VMM/VMMRC/PATMRC.cpp:490:            Log(("PATMHandleInt3PatchTrap found int3 for %s at %x\n", patmGetInstructionString(pRec->patch.opcode, 0), pCtxCore->eip));
VBox/VMM/VMMRC/PATMRC.cpp:533:                    Log(("PATMRCHandleInt3PatchTrap: returns %Rrc\n", VBOXSTRICTRC_TODO(rcStrict)));
VBox/VMM/VMMRC/PATMRC.cpp:537:            Log(("IEMExecOneBypassWithPrefetchedByPC failed with %Rrc\n", VBOXSTRICTRC_TODO(rcStrict)));
VBox/VMM/VMMRC/TRPMRCHandlers.cpp:70:    if (!(fDbgEFlags1 & X86_EFL_IF)) Log(("%s: IF=0 ##\n", __FUNCTION__)); \
VBox/VMM/VMMRC/TRPMRCHandlers.cpp:76:            Log(("%s: IF=%d->%d IOPL=%d->%d !#\n", __FUNCTION__, \
VBox/VMM/VMMRC/TRPMRCHandlers.cpp:79:        else if (!(fDbgEFlags2 & X86_EFL_IF)) Log(("%s: IF=0 [ret] ##\n", __FUNCTION__)); \
VBox/VMM/VMMRC/TRPMRCHandlers.cpp:269:                Log(("trpmGCExitTrap: u8Interrupt=%d (%#x) rc=%Rrc\n", u8Interrupt, u8Interrupt, rc));
VBox/VMM/VMMRC/TRPMRCHandlers.cpp:575:            Log(("TRPMGCTrap06Handler: Failed to convert %RTsel:%RX32 (cpl=%d) - rc=%Rrc !!\n", pRegFrame->cs.Sel, pRegFrame->eip, pRegFrame->ss.Sel & X86_SEL_RPL, rc));
VBox/VMM/VMMRC/TRPMRCHandlers.cpp:621:            Log(("TRPMGCTrap06Handler: pc=%08x op=%d\n", pRegFrame->eip, Cpu.pCurInstr->uOpcode));
VBox/VMM/VMMRC/TRPMRCHandlers.cpp:1088:        Log(("trpmGCTrap0dHandler: Failed to convert %RTsel:%RX32 (cpl=%d) - rc=%Rrc !!\n",
VBox/VMM/VMMRC/TRPMRCHandlers.cpp:1326:    Log(("trpmGCHyperGeneric: uEip=%x %p-%p\n", uEip, paHandlers, pEndRecord));
VBox/VMM/VMMRC/TRPMRCHandlers.cpp:1426:    Log(("********************************************************\n"));
VBox/VMM/VMMRC/TRPMRCHandlers.cpp:1427:    Log(("trpmRCTrapInGeneric: eip=%RX32 uUser=%#x\n", pRegFrame->eip, uUser));
VBox/VMM/VMMRC/TRPMRCHandlers.cpp:1428:    Log(("********************************************************\n"));
VBox/VMM/VMMRC/TRPMRC.cpp:124:            Log(("trpmRCGuestIDTWriteHandler: write to gate %x (%x) offset %x cb=%d\n", iGate, iGate1, offRange, cb));
VBox/VMM/VMMRC/TRPMRC.cpp:138:    Log(("trpmRCGuestIDTWritePfHandler: eip=%RGv write to gate %x offset %x\n", pRegFrame->eip, iGate, offRange));
VBox/VMM/VMMRC/PDMRCDevice.cpp:84:        Log(("pdmRCDevHlp_PCIPhysRead: caller=%p/%d: returns %Rrc - Not bus master! GCPhys=%RGp cbRead=%#zx\n",
VBox/VMM/VMMRC/PDMRCDevice.cpp:112:        Log(("pdmRCDevHlp_PCIPhysWrite: caller=%p/%d: returns %Rrc - Not bus master! GCPhys=%RGp cbWrite=%#zx\n",
VBox/VMM/VMMRC/PDMRCDevice.cpp:240:    Log(("pdmRCDevHlp_PhysRead: caller=%p/%d: returns %Rrc\n", pDevIns, pDevIns->iInstance, VBOXSTRICTRC_VAL(rcStrict) ));
VBox/VMM/VMMRC/PDMRCDevice.cpp:255:    Log(("pdmRCDevHlp_PhysWrite: caller=%p/%d: returns %Rrc\n", pDevIns, pDevIns->iInstance, VBOXSTRICTRC_VAL(rcStrict) ));
VBox/VMM/VMMRC/PDMRCDevice.cpp:268:    Log(("pdmRCDevHlp_A20IsEnabled: caller=%p/%d: returns %RTbool\n", pDevIns, pDevIns->iInstance, fEnabled));
VBox/VMM/VMMRZ/PGMRZDynMap.cpp:876:        /*Log(("#%d: iEntry=%4d uEntry=%#llx pvEntry=%p HCPhys=%RHp \n", i, iEntry, uEntry, pvEntry, pPgLvl->a[i].HCPhys));*/
VBox/VMM/VMMRZ/PGMRZDynMap.cpp:1952:        Log(("PGMRZDynMapReleaseAutoSet: cEntries=%d\n", cEntries));
VBox/VMM/VMMRZ/PGMRZDynMap.cpp:1986:        Log(("PGMDynMapFlushAutoSet: cEntries=%d\n", pSet->cEntries));
VBox/VMM/VMMRZ/PGMRZDynMap.cpp:2068:        Log(("pgmDynMapFlushSubset: cEntries=%d iSubset=%d\n", pSet->cEntries, iSubset));
VBox/VMM/VMMRZ/PGMRZDynMap.cpp:2260:        Log(("pgmRZDynMapUnusedHint: pvHint=%p ignored because of overflow! %s(%d) %s\n", pvHint, pszFile, iLine, pszFunction));
VBox/VMM/include/CSAMInternal.h:276:        Log(("We don't support far jumps here!! (%08X)\n", pCpu->Param1.fUse));
VBox/VMM/include/SELMInline.h:41:        Log(("selmIsShwDescGoodForSReg: Not present\n"));
VBox/VMM/include/SELMInline.h:47:        Log(("selmIsShwDescGoodForSReg: System descriptor\n"));
VBox/VMM/include/SELMInline.h:55:            Log(("selmIsShwDescGoodForSReg: Stack must be writable\n"));
VBox/VMM/include/SELMInline.h:60:            Log(("selmIsShwDescGoodForSReg: CPL(%d) > DPL(%d)\n", uCpl, pShwDesc->Gen.u2Dpl - pShwDesc->Gen.u1Available));
VBox/VMM/include/SELMInline.h:70:                Log(("selmIsShwDescGoodForSReg: CS needs code segment\n"));
VBox/VMM/include/SELMInline.h:76:            Log(("selmIsShwDescGoodForSReg: iSReg=%u execute only\n", iSReg));
VBox/VMM/include/SELMInline.h:86:            Log(("selmIsShwDescGoodForSReg: iSReg=%u DPL=%u CPL=%u RPL=%u\n", iSReg,
VBox/VMM/include/SELMInline.h:115:        Log(("selmIsGstDescGoodForSReg: Not present\n"));
VBox/VMM/include/SELMInline.h:121:        Log(("selmIsGstDescGoodForSReg: System descriptor\n"));
VBox/VMM/include/SELMInline.h:129:            Log(("selmIsGstDescGoodForSReg: Stack must be writable\n"));
VBox/VMM/include/SELMInline.h:134:            Log(("selmIsGstDescGoodForSReg: CPL(%d) > DPL(%d)\n", uCpl, pGstDesc->Gen.u2Dpl));
VBox/VMM/include/SELMInline.h:144:                Log(("selmIsGstDescGoodForSReg: CS needs code segment\n"));
VBox/VMM/include/SELMInline.h:150:            Log(("selmIsGstDescGoodForSReg: iSReg=%u execute only\n", iSReg));
VBox/VMM/include/SELMInline.h:163:            Log(("selmIsGstDescGoodForSReg: iSReg=%u DPL=%u CPL=%u RPL=%u InRawMode=%u\n", iSReg,
VBox/VMM/include/SELMInline.h:249:        Log(("selmIsSRegStale32: Attributes changed (%#x -> %#x) for %u\n", pSReg->Attr.u, X86DESC_GET_HID_ATTR(pShwDesc), iSReg));
VBox/VMM/include/SELMInline.h:255:        Log(("selmIsSRegStale32: base changed (%#llx -> %#x) for %u\n", pSReg->u64Base, X86DESC_BASE(pShwDesc), iSReg));
VBox/VMM/include/SELMInline.h:261:        Log(("selmIsSRegStale32: limit changed (%#x -> %#x) for %u\n", pSReg->u32Limit, X86DESC_LIMIT_G(pShwDesc), iSReg));
VBox/VMM/include/PATMInternal.h:666:        Log(("We don't support far jumps here!! (%08X)\n", pCpu->Param1.fUse));
VBox/VMM/include/TMInternal.h:219:        Log(("%s: %p: %d -> %d\n", __FUNCTION__, (pTimer), (pTimer)->enmState, state)); \
VBox/VMM/include/TMInternal.h:234:         Log(("%s: %p: %d -> %d %RTbool\n", __FUNCTION__, (pTimer), StateOld, StateNew, fRc)); \
VBox/VMM/include/EMHandleRCTmpl.h:194:                    Log(("emR3RawHandleRC: recheck gate %x -> valid=%d\n", u8Interrupt, TRPMR3GetGuestTrapHandler(pVM, u8Interrupt) != TRPM_INVALID_HANDLER));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:275:        Log(("VBoxNetFltLinuxInit\n"));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:310:    Log(("VBoxNetFltLinuxUnload\n"));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:323:    Log(("VBoxNetFltLinuxUnload - done\n"));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:549:    Log(("vboxNetFltLinuxRetainNetDev\n"));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:560:            Log(("vboxNetFltLinuxRetainNetDev: Device %p(%s) retained. ref=%d\n",
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:572:    Log(("vboxNetFltLinuxRetainNetDev - done\n"));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:591:    Log(("vboxNetFltLinuxReleaseNetDev\n"));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:596:        Log(("vboxNetFltLinuxReleaseNetDev: Device %p(%s) released. ref=%d\n",
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:605:    Log(("vboxNetFltLinuxReleaseNetDev - done\n"));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:720:        Log(("vboxNetFltLinuxSkBufFromSG: Failed to allocate sk_buff(%u).\n", pSG->cbTotal));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:1057:        Log(("vboxNetFltLinuxPacketHandler: Devices do not match, pThis may be wrong! pThis=%p\n", pThis));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:1239:    Log(("VBoxNetFlt: (int)%02x:%02x:%02x:%02x:%02x:%02x"
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:1472:        Log(("VBoxNetFlt: Dropping the sk_buff (failure case).\n"));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:1506:        Log(("VBoxNetFlt: Failed to allocate SG buffer.\n"));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:1823:    Log(("vboxNetFltLinuxAttachToInterface: Device %p(%s) retained. ref=%d\n",
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:1831:    Log(("vboxNetFltLinuxAttachToInterface: Got pDev=%p pThis=%p pThis->u.s.pDev=%p\n",
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:1847:    Log(("vboxNetFltLinuxAttachToInterface: this=%p: Packet handler installed.\n", pThis));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:1897:        Log(("vboxNetFltLinuxAttachToInterface: Device %p(%s) released. ref=%d\n",
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:1924:        Log(("vboxNetFltLinuxUnregisterDevice: this=%p: packet handler removed.\n", pThis));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:1941:        Log(("vboxNetFltLinuxUnregisterDevice: this=%p: xmit queue purged.\n", pThis));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:1942:        Log(("vboxNetFltLinuxUnregisterDevice: Device %p(%s) released. ref=%d\n",
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:1965:        Log(("vboxNetFltLinuxDeviceIsUp: enabled promiscuous mode on %s (%d)\n", pThis->szName, pDev->promiscuity));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:1968:        Log(("vboxNetFltLinuxDeviceIsUp: no need to enable promiscuous mode on %s (%d)\n", pThis->szName, pDev->promiscuity));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:1980:        Log(("vboxNetFltLinuxDeviceGoingDown: disabled promiscuous mode on %s (%d)\n", pThis->szName, pDev->promiscuity));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:1983:        Log(("vboxNetFltLinuxDeviceGoingDown: no need to disable promiscuous mode on %s (%d)\n", pThis->szName, pDev->promiscuity));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:2001:    Log(("vboxNetFltLinuxDeviceMtuChange: set MTU for %s to %d\n", pThis->szName, pDev->mtu));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:2050:    Log(("VBoxNetFlt: got event %s(0x%lx) on %s, pDev=%p pThis=%p pThis->u.s.pDev=%p\n",
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:2142:            Log(("%s: %s: IPv4 addr %RTnaipv4 mask %RTnaipv4\n",
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:2170:            Log(("%s: %s: IPv6 addr %RTnaipv6/%u\n",
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:2195:    Log(("VBoxNetFlt: %s: IPv4 event %s(0x%lx) %s: addr %RTnaipv4 mask %RTnaipv4\n",
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:2240:    Log(("VBoxNetFlt: %s: IPv6 event %s(0x%lx) %s: %RTnaipv6\n",
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:2367:            Log(("vboxNetFltPortOsSetActive: enabled promiscuous mode on %s (%d)\n", pThis->szName, pDev->promiscuity));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:2376:                Log(("vboxNetFltPortOsSetActive: disabled promiscuous mode on %s (%d)\n", pThis->szName, pDev->promiscuity));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:2382:            Log(("VBoxNetFlt: fIf=%#x; %d->%d\n", fIf, cPromiscBefore, pDev->promiscuity));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:2402:        Log(("vboxNetFltOsDisconnectIt: this=%p: Packet handler removed.\n", pThis));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:2461:        Log(("vboxNetFltOsDeleteInstance: this=%p: xmit queue purged.\n", pThis));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:2462:        Log(("vboxNetFltOsDeleteInstance: Device %p(%s) released. ref=%d\n",
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:2476:    Log(("vboxNetFltOsDeleteInstance: this=%p: Notifier removed.\n", pThis));
VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c:2505:    Log(("vboxNetFltOsInitInstance: this=%p: Notifier installed.\n", pThis));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:599:    Log((DEVICE_NAME ":_info returns %d\n", rc));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:631:                    Log((DEVICE_NAME ":vboxNetFltSolarisSetupIp6Polling: no poll interval property specified. Skipping Ipv6 polling.\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:944:    Log((DEVICE_NAME ":VBoxNetFltSolarisModOpen returns 0, DevMinor=%d pQueue=%p\n", DevMinor, pStream->pReadQueue));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:1119:                    Log((DEVICE_NAME ":VBoxNetFltSolarisModReadPut M_DATA\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:1135:                    Log((DEVICE_NAME ":VBoxNetFltSolarisModReadPut: M_PCPROTO %d\n", Prim));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:1167:                                    Log((DEVICE_NAME ":VBoxNetFltSolarisModReadPut: DL_NOTE_PHYS_ADDR. New Mac=%.*Rhxs\n",
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:1175:                                        Log((DEVICE_NAME ":VBoxNetFltSolarisModReadPut: DL_NOTE_LINK_UP.\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:1182:                                        Log((DEVICE_NAME ":VBoxNetFltSolarisModReadPut: DL_NOTE_LINK_DOWN.\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:1194:                            Log((DEVICE_NAME ":VBoxNetFltSolarisModReadPut: DL_BIND_ACK. Bound to requested SAP!\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:1215:                                Log((DEVICE_NAME ":VBoxNetFltSolarisModReadPut: M_PCPROTO: DL_OK_ACK: fPromisc is ON.\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:1220:                                Log((DEVICE_NAME ":VBoxNetFltSolarisModReadPut: M_PCPROTO: DL_OK_ACK: fPromisc is OFF.\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:1238:                        Log((DEVICE_NAME ":VBoxNetFltSolarisModReadPut: Mode acknowledgement. RawMode is %s\n",
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:1264:                    Log((DEVICE_NAME ":VBoxNetFltSolarisModReadPut: M_FLUSH\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:1563:        Log((DEVICE_NAME ":vboxNetFltSolarisCachePhysAddr: DL_PHYS_ADDR_ACK: Mac=%.*Rhxs\n",
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:1934:        Log((DEVICE_NAME ":vboxNetFltSolarisDetermineModPos: cMod=%d\n", cMod));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:1950:            Log((DEVICE_NAME ":vboxNetFltSolarisDetermineModPos: failed to alloc memory for StrList.\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:1968:                    Log((DEVICE_NAME ":vboxNetFltSolarisDetermineModPos: Success! Found %s at %d.\n", DEVICE_NAME, i));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:2369:                                            Log((DEVICE_NAME ":vboxNetFltSolarisAttachIp4: Success! %s %s@(IPv4:%d Arp:%d) "
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:2587:                                        Log((DEVICE_NAME ":vboxNetFltSolarisAttachIp6: Success! %s %s@(IPv6:%d) "
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:2635:        Log((DEVICE_NAME ":vboxNetFltSolarisAttachIp6: failed to get IPv6 flags.\n", pThis->szName));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:2721:                Log((DEVICE_NAME ":vboxNetFltSolarisSetupIp6Polling: Ipv6 %d second timer begins firing in 10 seconds.\n",
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:2950:        Log((DEVICE_NAME ":vboxNetFltSolarisMBlkToSG pulling up to length.\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:2962:    Log((DEVICE_NAME ":vboxNetFltSolarisMBlkToSG iSeg=%d pSG->cbTotal=%d msgdsize=%d\n", iSeg, pSG->cbTotal, msgdsize(pMsg)));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3192:                Log((DEVICE_NAME ":vboxNetFltSolarisQueueLoopback initialized head. checksum=%u.\n",
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3202:                Log((DEVICE_NAME ":vboxNetFltSolarisQueueLoopback re-used head checksum=%u cLoopback=%d.\n",
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3221:                Log((DEVICE_NAME ":vboxNetFltSolarisQueueLoopback added head checksum=%u cLoopback=%d.\n", pCur->Checksum,
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3254:        Log((DEVICE_NAME ":vboxNetFltSolarisQueueLoopback recycled tail!! checksum=%u cLoopback=%d\n", pCur->Checksum,
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3342:        Log((DEVICE_NAME ":vboxNetFltSolarisIsOurMBlk found packet %p Checksum=%u cLoopback=%d\n", pMsg, Checksum,
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3347:    Log((DEVICE_NAME ":vboxNetFltSolarisIsOurMBlk returns %d.\n", fIsOurPacket));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3421:        Log((DEVICE_NAME ":Avoiding packet loopback.\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3479:                Log((DEVICE_NAME ":Recv VLAN Pcp=%u Cfi=%u Id=%u\n", VLAN_PRI(RT_BE2H_U16(pVlanHdr->Data)),
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3505:                        Log((DEVICE_NAME ":Stripped VLAN tag.\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3586:            Log((DEVICE_NAME ":Chained mblk_t.\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3595:            Log((DEVICE_NAME ":msgdsize returns %d\n", cbFullMsg));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3640:                    Log((DEVICE_NAME ":fixed TCP checksum.\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3652:                    Log((DEVICE_NAME ":Fixed UDP checksum."));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3720:            Log((DEVICE_NAME ":Chained IP packet. Skipping validity check.\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3749:        /* Log((DEVICE_NAME ":%.*Rhxd\n", MBLKL(pMsg), pMsg->b_rptr)); */
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3931:                Log((DEVICE_NAME ":vboxNetFltPortOsXmit INTNETTRUNKDIR_WIRE\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:3967:                Log((DEVICE_NAME ":vboxNetFltPortOsXmit INTNETTRUNKDIR_HOST ARP\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:4003:                     Log((DEVICE_NAME ":vboxNetFltPortOsXmit INTNETTRUNKDIR_HOST IPv6\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFlt-solaris.c:4014:                    Log((DEVICE_NAME ":vboxNetFltPortOsXmit INTNETTRUNKDIR_HOST IPv4\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:273:    Log((DEVICE_NAME ":_init\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:323:    Log((DEVICE_NAME ":_fini\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:361:    Log((DEVICE_NAME ":VBoxNetFltSolarisAttach pDip=%p enmCmd=%d\n", pDip, enmCmd));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:394:    Log((DEVICE_NAME ":VBoxNetFltSolarisDetach pDip=%p enmCmd=%d\n", pDip, enmCmd));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:429:    Log((DEVICE_NAME ":VBoxNetFltSolarisGetInfo pDip=%p enmCmd=%d pArg=%p instance=%d\n", pDip, enmCmd, getminor((dev_t)pvArg)));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:462:    Log((DEVICE_NAME ":vboxNetFltSolarisMBlkFromSG pThis=%p pSG=%p\n", pThis, pSG));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:527:    Log((DEVICE_NAME ":vboxNetFltSolarisMBlkToSG pThis=%p pMsg=%p pSG=%p cSegs=%d\n", pThis, pMsg, pSG, cSegs));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:554:        Log((DEVICE_NAME ":vboxNetFltSolarisMBlkToSG pulling up to length.\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:566:    Log((DEVICE_NAME ":vboxNetFltSolarisMBlkToSG iSeg=%d pSG->cbTotal=%d msgdsize=%d\n", iSeg, pSG->cbTotal, msgdsize(pMsg)));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:605:            Log((DEVICE_NAME ":Chained IP packet. Skipping validity check.\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:634:        /* Log((DEVICE_NAME ":%.*Rhxd\n", MBLKL(pMsg), pMsg->b_rptr)); */
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:661:    Log((DEVICE_NAME ":vboxNetFltSolarisRecv pvData=%p pMsg=%p fLoopback=%d cbData=%d\n", pvData, pMsg, fLoopback,
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:795:        Log((DEVICE_NAME ":vboxNetFltSolarisReportInfo phys mac %.6Rhxs\n", &pThis->u.s.MacAddr));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:841:            Log((DEVICE_NAME ":vboxNetFltSolarisInitVNIC succesfully initialized VNIC.\n"));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:910:    Log((DEVICE_NAME ":vboxNetFltSolarisInitVNICTemplate pThis=%p pVNICTemplate=%p\n", pThis, pVNICTemplate));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1084:    Log((DEVICE_NAME ":vboxNetFltSolarisCreateVNIC pThis=%p\n", pThis));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1143:        Log((DEVICE_NAME ":vboxNetFltSolarisCreateVNIC pThis=%p VLAN Id=%u\n", pThis, uVLANId));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1185:                Log((DEVICE_NAME ":vboxNetFltSolarisCreateVNIC created VNIC '%s' over '%s' with random mac %.6Rhxs\n",
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1287:    Log((DEVICE_NAME ":vboxNetFltPortOsSetActive pThis=%p fActive=%d\n", pThis, fActive));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1320:    Log((DEVICE_NAME ":vboxNetFltOsDisconnectIt pThis=%p\n", pThis));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1327:    Log((DEVICE_NAME ":vboxNetFltOsConnectIt pThis=%p\n", pThis));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1334:    Log((DEVICE_NAME ":vboxNetFltOsDeleteInstance pThis=%p\n", pThis));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1358:    Log((DEVICE_NAME ":vboxNetFltOsInitInstance pThis=%p pvContext=%p\n", pThis, pvContext));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1371:            Log((DEVICE_NAME ":vboxNetFltOsInitInstance pThis=%p physical interface '%s' detected.\n", pThis, pThis->szName));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1379:                Log((DEVICE_NAME ":vboxNetFltOsInitInstance pThis=%p VNIC template '%s' detected.\n", pThis, pThis->szName));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1386:            Log((DEVICE_NAME ":vboxNetFltOsInitInstance pThis=%p VNIC '%s' detected.\n", pThis, pThis->szName));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1448:        Log((DEVICE_NAME ":vboxNetFltPortOsXmit pThis=%p cbData=%d\n", pThis, MBLKL(pMsg)));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1470:    Log((DEVICE_NAME ":vboxNetFltPortOSNotifyMacAddress pszIf=%s pszVNIC=%s MAC=%.6Rhxs\n", pThis->szName,
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1533:                Log((DEVICE_NAME ":vboxNetFltPortOsNotifyMacAddress successfully added unicast address %.6Rhxs\n", pMac));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1570:    Log((DEVICE_NAME ":vboxNetFltPortOsConnectInterface pThis=%p pvIf=%p\n", pThis, pvIf));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1661:    Log((DEVICE_NAME ":vboxNetFltPortOsDisconnectInterface pThis=%p\n", pThis));
VBox/HostDrivers/VBoxNetFlt/solaris/VBoxNetFltBow-solaris.c:1684:            Log((DEVICE_NAME ":vboxNetFltPortOsDisconnectInterface destroying pVNIC=%p\n", pVNIC));
VBox/HostDrivers/VBoxNetFlt/VBoxNetFlt.c:1365:            Log(("VBoxNetFlt: V1 factory query\n"));
VBox/HostDrivers/VBoxNetFlt/VBoxNetFlt.c:1368:            Log(("VBoxNetFlt: unknown factory interface query (%s)\n", pszInterfaceUuid));
VBox/HostDrivers/VBoxNetFlt/VBoxNetFlt.c:1372:        Log(("VBoxNetFlt: rc=%Rrc, uuid=%s\n", rc, pszInterfaceUuid));
VBox/HostDrivers/VBoxNetFlt/VBoxNetFlt.c:1468:            Log(("VBoxNetFlt: pSession=%p\n", SUPR0IdcGetSession(&pGlobals->SupDrvIDC)));
VBox/HostDrivers/VBoxNetFlt/freebsd/VBoxNetFlt-freebsd.c:165:    Log(("VBoxNetFltFreeBSDModuleEvent\n"));
VBox/HostDrivers/VBoxNetFlt/freebsd/VBoxNetFlt-freebsd.c:701:    Log(("%s: fActive:%d\n", __func__, fActive));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetFltP-win.cpp:1296:                Log(("lb_rp"));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:66:#undef Log
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:67:#define Log(x) DbgPrint x
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:652:            Log(("vboxNetLwfWinChangeState: state change %s -> %s\n",
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:656:            Log(("ERROR! vboxNetLwfWinChangeState: failed state change %s (actual=%s) -> %s\n",
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:665:        Log(("vboxNetLwfWinChangeState: state change %s -> %s\n",
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:750:            Log(("vboxNetLwfWinOidRequest: host wanted to set packet filter value to:\n"));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:826:        Log(("vboxNetLwfWinOidRequestComplete: locally originated request (%p) completed, status=0x%x\n", pRequest, Status));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:982:    Log(("vboxNetLwfWinDevCreate: NdisRegisterDeviceEx returned 0x%x\n", Status));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:1628:    Log(("vboxNetLwfWinStatus: Got status indication: %s\n", vboxNetLwfWinStatusToText(pIndication->StatusCode)));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:1634:            Log(("vboxNetLwfWinStatus: Reporting status: %s\n", vboxNetLwfWinStatusToText(pIndication->StatusCode)));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:1656:        Log(("vboxNetLwfWinForwardToIntNet: trunk is inactive, won't forward\n"));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:1694:        Log(("vboxNetLwfWinForwardToIntNet: list=%d buffers=%d\n", nLists, nBuffers));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:1696:    Log(("vboxNetLwfWinForwardToIntNet: lists=%d drop=%s don't=%s\n", nLists, fDropIt ? "true":"false", fDontDrop ? "true":"false"));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:1704:    Log(("vboxNetLwfWinIsRunning: state=%d\n", ASMAtomicReadU32(&pModule->enmState)));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:1811:            Log(("vboxNetLwfWinSendNetBufferListsComplete: our list %p, next=%p, previous=%p, head=%p\n", pList, pNextList, pPrevList, pBufLists));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:1826:            Log(("vboxNetLwfWinSendNetBufferListsComplete: passing list %p, next=%p, previous=%p, head=%p\n", pList, pNextList, pPrevList, pBufLists));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2055:    Log(("vboxNetLwfWinRegister: registering filter driver...\n"));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2063:        Log(("vboxNetLwfWinRegister: successfully registered filter driver; registering device...\n"));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2066:        Log(("vboxNetLwfWinRegister: vboxNetLwfWinDevCreate() returned 0x%x\n", Status));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2081:        Log(("vboxNetLwfWinStartInitIdcThread: IDC state change Diconnected -> Connecting\n"));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2090:        Log(("vboxNetLwfWinStartInitIdcThread: create IDC initialization thread, status=0x%x\n", Status));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2097:            Log(("vboxNetLwfWinStartInitIdcThread: IDC state change Connecting -> Diconnected\n"));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2143:            Log(("NETLWF: started successfully\n"));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2195:                Log(("vboxNetLwfWinInitIdcWorker: state change (Connecting -> %s) while initializing IDC, deleted IDC, rc=0x%x\n",
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2200:                Log(("vboxNetLwfWinInitIdcWorker: IDC state change Connecting -> Connected\n"));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2220:    Log(("vboxNetLwfWinTryFiniIdc: IDC state change %s -> Stopping\n", vboxNetLwfWinIdcStateToText(enmPrevState)));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2252:            Log(("vboxNetLwfWinTryFiniIdc: deleted IDC, rc=0x%x\n", rc));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2418:        Log(("vboxNetLwfWinToggleOffloading: set offloading off\n"));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2426:            Log(("vboxNetLwfWinToggleOffloading: restored offloading config\n"));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2505:                    Log(("vboxNetLwfWinIpAddrChangeCallback: ignoring %s address (%RTnaipv4)\n",
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2510:                Log(("vboxNetLwfWinIpAddrChangeCallback: %s IPv4 addr=%RTnaipv4 on luid=(%u,%u)\n",
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2521:                    Log(("vboxNetLwfWinIpAddrChangeCallback: ignoring link-local address (%RTnaipv6)\n",
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2525:                Log(("vboxNetLwfWinIpAddrChangeCallback: %s IPv6 addr=%RTnaipv6 scope=%d luid=(%u,%u)\n",
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2537:        Log(("vboxNetLwfWinIpAddrChangeCallback: pRow=%p pfnNotifyHostAddress=%p\n",
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2565:            Log(("vboxNetLwfWinRegisterIpAddrNotifier: notifier=%p\n", pThis->u.s.WinIf.hNotifier));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2576:    Log(("vboxNetLwfWinUnregisterIpAddrNotifier: notifier=%p\n", pThis->u.s.WinIf.hNotifier));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2617:    Log(("vboxNetFltOsInitInstance: trunk name=%s\n", pThis->szName));
VBox/HostDrivers/VBoxNetFlt/win/drv/VBoxNetLwf-win.cpp:2626:            Log(("vboxNetFltOsInitInstance: found matching module, name=%s\n", pThis->szName));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:230:                Log(("VBoxNetFltDarwinDetectPCountOffset: Adjusted if_pcount offset to %x from %x.\n", offTry1, g_offIfNetPCount));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:257:        Log(("VBoxNetFltDarwinStart\n"));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:295:    Log(("VBoxNetFltDarwinStop\n"));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:305:        Log(("VBoxNetFltDarwinStop - failed, busy.\n"));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:844:                        Log(("vboxNetFltDarwinIffEvent: enabled promiscuous mode on %s (%d)\n", pThis->szName, VBOX_GET_PCOUNT(pIfNet)));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:847:                        Log(("vboxNetFltDarwinIffEvent: ifnet_set_promiscuous failed on %s, err=%d (%d)\n", pThis->szName, err, VBOX_GET_PCOUNT(pIfNet)));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:857:                        Log(("vboxNetFltDarwinIffEvent: fixed IFF_PROMISC on %s (%d)\n", pThis->szName, VBOX_GET_PCOUNT(pIfNet)));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:859:                        Log(("vboxNetFltDarwinIffEvent: failed to fix IFF_PROMISC on %s, err=%d flags=%#x (%d)\n",
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:863:                    Log(("vboxNetFltDarwinIffEvent: online, '%s'. flags=%#x (%d)\n", pThis->szName, ifnet_flags(pIfNet), VBOX_GET_PCOUNT(pIfNet)));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:866:                Log(("vboxNetFltDarwinIffEvent: %s goes down (%d)\n", pThis->szName, VBOX_GET_PCOUNT(pIfNet)));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:871:            Log(("vboxNetFltDarwinIffEvent: pThis->u.s.pIfNet=%p pIfNet=%p (%d)\n", pThis->u.s.pIfNet, pIfNet, VALID_PTR(pIfNet) ? VBOX_GET_PCOUNT(pIfNet) : -1));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:874:        Log(("vboxNetFltDarwinIffEvent: vendor_code=%#x kev_class=%#x kev_subclass=%#x event_code=%#x\n",
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1068:            Log(("VBoxFltDrv: failed to find ifnet '%s' (err=%d)\n", pThis->szName, err));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1307:                                Log(("vboxNetFlt: fixed IFF_PROMISC on %s (%d->%d)\n", pThis->szName, cPromiscBefore, VBOX_GET_PCOUNT(pIfNet)));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1309:                                Log(("VBoxNetFlt: failed to fix IFF_PROMISC on %s, err=%d (%d->%d)\n",
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1314:                        Log(("VBoxNetFlt: ifnet_set_promiscuous -> err=%d grr! (%d->%d)\n", err, cPromiscBefore, VBOX_GET_PCOUNT(pIfNet)));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1317:                    Log(("VBoxNetFlt: Waiting for the link to come up... (%d->%d)\n", cPromiscBefore, VBOX_GET_PCOUNT(pIfNet)));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1332:                Log(("VBoxNetFlt: fIf=%#x; %d->%d\n", fIf, cPromiscBefore, VBOX_GET_PCOUNT(pIfNet)));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1485:            Log(("> inet %RTnaipv4\n", sin->sin_addr.s_addr));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1500:            Log(("> inet6 %RTnaipv6\n", &sin6->sin6_addr));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1528:        Log(("vboxNetFltDarwinSysSockUpcall: %p != %p?\n",
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1547:                Log(("vboxNetFltDarwinSysSockUpcall: EWOULDBLOCK - we are done\n"));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1551:                Log(("sock_receivembuf: error %d\n", error));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1557:            Log(("vboxNetFltDarwinSysSockUpcall: %u bytes is too short\n", (unsigned int)len));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1567:                Log(("vboxNetFltDarwinSysSockUpcall: %u bytes is too short for KEV_INET_SUBCLASS\n",
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1594:                    Log(("KEV_INET_NEW_ADDR %.*s%d: %RTnaipv4\n", IFNAMSIZ, link->if_name, link->if_unit, pAddr->IPv4.u));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1599:                    Log(("KEV_INET_ADDR_DELETED %.*s%d: %RTnaipv4\n", IFNAMSIZ, link->if_name, link->if_unit, pAddr->IPv4.u));
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1604:                    Log(("KEV INET event %u %.*s%d: addr %RTnaipv4\n",
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1613:                Log(("vboxNetFltDarwinSysSockUpcall: %u bytes is too short for KEV_INET6_SUBCLASS\n",
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1639:                    Log(("KEV_INET6_NEW_USER_ADDR %.*s%d: %RTnaipv6\n",
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1644:                    Log(("KEV_INET6_NEW_LL_ADDR %.*s%d: %RTnaipv6\n",
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1649:                    Log(("KEV_INET6_NEW_RTADV_ADDR %.*s%d: %RTnaipv6\n",
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1659:                    Log(("KEV_INET6_ADDR_DELETED %.*s%d: %RTnaipv6\n",
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1667:                    Log(("KEV INET6 event %u %.*s%d: addr %RTnaipv6\n",
VBox/HostDrivers/VBoxNetFlt/darwin/VBoxNetFlt-darwin.cpp:1673:            Log(("vboxNetFltDarwinSysSockUpcall: subclass %u ignored\n", (unsigned)msg->kev_subclass));
VBox/HostDrivers/Support/linux/SUPDrv-linux.c:342:            Log(("VBoxDrv::ModuleInit\n"));
VBox/HostDrivers/Support/linux/SUPDrv-linux.c:385:    Log(("VBoxDrv::ModuleInit returning %#x (minor:%d & %d)\n", rc, gMiscDeviceSys.minor, gMiscDeviceUsr.minor));
VBox/HostDrivers/Support/linux/SUPDrv-linux.c:395:    Log(("VBoxDrvLinuxUnload\n"));
VBox/HostDrivers/Support/linux/SUPDrv-linux.c:428:    Log(("VBoxDrvLinuxCreate: pFilp=%p pid=%d/%d %s\n", pFilp, RTProcSelf(), current->pid, current->comm));
VBox/HostDrivers/Support/linux/SUPDrv-linux.c:437:        Log(("VBoxDrvLinuxCreate: euid=%d, expected 0 (root)\n", vboxdrvLinuxEuid()));
VBox/HostDrivers/Support/linux/SUPDrv-linux.c:454:    Log(("VBoxDrvLinuxCreate: g_DevExt=%p pSession=%p rc=%d/%d (pid=%d/%d %s)\n",
VBox/HostDrivers/Support/linux/SUPDrv-linux.c:483:    Log(("VBoxDrvLinuxClose: pFilp=%p pSession=%p pid=%d/%d %s\n",
VBox/HostDrivers/Support/linux/SUPDrv-linux.c:646:        Log(("VBoxDrvLinuxIOCtl: copy_from_user(,%#lx,) failed; uCmd=%#x\n", ulArg, uCmd));
VBox/HostDrivers/Support/linux/SUPDrv-linux.c:651:        Log(("VBoxDrvLinuxIOCtl: bad header magic %#x; uCmd=%#x\n", Hdr.fFlags & SUPREQHDR_FLAGS_MAGIC_MASK, uCmd));
VBox/HostDrivers/Support/linux/SUPDrv-linux.c:661:        Log(("VBoxDrvLinuxIOCtl: too big cbBuf=%#x; uCmd=%#x\n", cbBuf, uCmd));
VBox/HostDrivers/Support/linux/SUPDrv-linux.c:666:        Log(("VBoxDrvLinuxIOCtl: bad ioctl cbBuf=%#x _IOC_SIZE=%#x; uCmd=%#x\n", cbBuf, _IOC_SIZE(uCmd), uCmd));
VBox/HostDrivers/Support/linux/SUPDrv-linux.c:677:        Log(("VBoxDrvLinuxIOCtl: copy_from_user(,%#lx, %#x) failed; uCmd=%#x\n", ulArg, Hdr.cbIn, uCmd));
VBox/HostDrivers/Support/linux/SUPDrv-linux.c:709:        Log(("VBoxDrvLinuxIOCtl: pFilp=%p uCmd=%#x ulArg=%p failed, rc=%d\n", pFilp, uCmd, (void *)ulArg, rc));
VBox/HostDrivers/Support/SUPR3HardenedMain.cpp:575:/** Log volume name (for attempting volume flush). */
VBox/HostDrivers/Support/SUPR3HardenedMain.cpp:1449:                    SUP_DPRINTF(("Log file opened: " VBOX_VERSION_STRING "r%u g_hStartupLog=%p g_uNtVerCombined=%#x\n",
VBox/HostDrivers/Support/SUPDrvGip.cpp:598:        Log(("SUPR0GipMap: GIP is not available!\n"));
VBox/HostDrivers/Support/SUPDrvGip.cpp:1487:            Log(("supdrvGipMpEvent: Gip master %#lx -> %#lx\n", (long)idGipMaster, (long)idNewGipMaster));
VBox/HostDrivers/Support/SUPDrvGip.cpp:1567:                    Log(("supdrvGipInitDetermineAsyncTsc: iCpu=%d cLoops=%d CurTsc=%llx PrevTsc=%llx\n",
VBox/HostDrivers/Support/SUPDrvGip.cpp:1599:    Log(("supdrvGipInitDetermineAsyncTsc: returns %d; iEndCpu=%d rc=%d offMin=%llx offMax=%llx\n",
VBox/HostDrivers/Support/SUPDrvGip.cpp:1982:                                Log(("supdrvTscDeltaInit: cpu[%u] delta %lld\n", iCpu, pGip->aCPUs[iCpu].i64TSCDelta));
VBox/HostDrivers/Support/SUPDrvGip.cpp:2014:                                Log(("supdrvGipCreate: %u ns interval.\n", u32Interval));
VBox/HostDrivers/Support/SUPLib.cpp:405:    Log(("SUP: Fake mode!\n"));
VBox/HostDrivers/Support/SUPSvc.cpp:172:            Log(("supSvcCreateAndStartServices: %s -> %Rrc\n", g_aServices[i].pszName, rc));
VBox/HostDrivers/Support/SUPSvc.cpp:241:            Log(("supSvcTryStopServices: %s -> %Rrc\n", g_aServices[i].pszName, rc));
VBox/HostDrivers/Support/SUPSvc.cpp:394:    Log(("supSvcDisplayErrorV: %s", pszFormat)); /** @todo format it! */
VBox/HostDrivers/Support/freebsd/SUPDrv-freebsd.c:177:        Log(("VBoxDrvFreeBSDLoad:\n"));
VBox/HostDrivers/Support/freebsd/SUPDrv-freebsd.c:203:    Log(("VBoxDrvFreeBSDUnload:\n"));
VBox/HostDrivers/Support/freebsd/SUPDrv-freebsd.c:243:        Log(("VBoxDrvFreeBSDOpen: fOpen=%#x expected %#x\n", fOpen, O_RDWR));
VBox/HostDrivers/Support/freebsd/SUPDrv-freebsd.c:257:        Log(("VBoxDrvFreeBSDOpen: pSession=%p\n", pSession));
VBox/HostDrivers/Support/freebsd/SUPDrv-freebsd.c:289:    Log(("vboxdrvFreeBSDDtr: pSession=%p\n", pSession));
VBox/HostDrivers/Support/freebsd/SUPDrv-freebsd.c:418:        Log(("VBoxDrvFreeBSDIOCtlSlow: huh? cbReq=%#x ulCmd=%#lx\n", cbReq, ulCmd));
VBox/HostDrivers/Support/freebsd/SUPDrv-freebsd.c:443:            Log(("VBoxDrvFreeBSDIOCtlSlow: returns %d / %d ulCmd=%lx\n", 0, pHdr->rc, ulCmd));
VBox/HostDrivers/Support/freebsd/SUPDrv-freebsd.c:457:        Log(("VBoxDrvFreeBSDIOCtlSlow: ulCmd=%lx pData=%p failed, rc=%d\n", ulCmd, pvData, rc));
VBox/HostDrivers/Support/win/SUPR3HardenedMain-win.cpp:2296:     * Log the result and process pending WinVerifyTrust work if we can.
VBox/HostDrivers/Support/win/SUPR3HardenedMain-win.cpp:2405:     * Log the unload call.
VBox/HostDrivers/Support/win/SUPR3HardenedMain-win.cpp:2633:             * Log the incident if it's not the initial call.
VBox/HostDrivers/Support/win/SUPR3HardenedMain-win.cpp:3815:         * Log the KiOpPrefetchPatchCount value if available, hoping it might
VBox/HostDrivers/Support/win/SUPR3HardenedMain-win.cpp:4976:                /* Log the KiOpPrefetchPatchCount value if available, hoping it might sched some light on spider38's case. */
VBox/HostDrivers/Support/win/SUPR3HardenedMain-win.cpp:6020:     * Log details and upgrade select adversaries.
VBox/HostDrivers/Support/win/SUPR3HardenedMain-win.cpp:6137:     * Log information about important system files.
VBox/HostDrivers/Support/win/SUPHardenedVerifyProcess-win.cpp:2097:     * Log the image timestamp when in the hardened exe.
VBox/HostDrivers/Support/win/SUPHardenedVerify-win.h:107:    /** Log name. */
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:631:        Log(("VBoxDrv::DriverEntry\n"));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:694:                    Log(("VBoxDrv::DriverEntry returning STATUS_SUCCESS\n"));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:698:                Log(("supdrvInitDevExit failed with vrc=%d!\n", vrc));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:712:        Log(("RTR0Init failed with vrc=%d!\n", vrc));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:730:    Log(("VBoxDrvNtUnload at irql %d\n", KeGetCurrentIrql()));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:792:    Log(("VBoxDrvNtCreate: RequestorMode=%d\n", pIrp->RequestorMode));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1000:        Log(("VBoxDrvNtCleanup: pDevExt=%p pFileObj=%p pNtProtect=%p\n", pDevExt, pFileObj, pNtProtect));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1014:        Log(("VBoxDrvNtCleanup: pDevExt=%p pFileObj=%p pSession=%p\n", pDevExt, pFileObj, pSession));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1042:        Log(("VBoxDrvNtClose: pDevExt=%p pFileObj=%p pNtProtect=%p\n", pDevExt, pFileObj, pNtProtect));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1056:        Log(("VBoxDrvNtCleanup: pDevExt=%p pFileObj=%p pSession=%p\n", pDevExt, pFileObj, pSession));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1250:                            Log(("VBoxDrvNtFastIoDeviceControl: Error reading %u bytes of user memory at %p (uCmd=%#x)\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1259:                    Log(("VBoxDrvNtFastIoDeviceControl: Mismatching sizes (%#x) - Hdr=%#lx/%#lx Irp=%#lx/%#lx!\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1267:            Log(("VBoxDrvNtFastIoDeviceControl: not buffered request (%#x) - not supported\n", uCmd));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1274:        Log(("VBoxDrvNtFastIoDeviceControl: WOW64 req - not supported\n"));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1397:                Log(("VBoxDrvNtDeviceControlSlow: Mismatching sizes (%#x) - Hdr=%#lx/%#lx Irp=%#lx/%#lx!\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1408:            Log(("VBoxDrvNtDeviceControlSlow: not buffered request (%#x) - not supported\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1416:        Log(("VBoxDrvNtDeviceControlSlow: WOW64 req - not supported\n"));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1495:                Log(("VBoxDrvNtInternalDeviceControl: Mismatching sizes (%#x) - Hdr=%#lx Irp=%#lx/%#lx!\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1508:        Log(("VBoxDrvNtInternalDeviceControl: not buffered request (%#x) - not supported\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1532:    Log(("VBoxDrvNtRead\n"));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1648:    Log(("VBoxDrvNtNotSupportedStub\n"));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1669:    Log(("VBoxPowerDispatchCallback: %x %x\n", pvArgument1, pvArgument2));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1675:            Log(("VBoxPowerDispatchCallback: about to go into suspend mode!\n"));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:1677:            Log(("VBoxPowerDispatchCallback: resumed!\n"));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:2005:            Log(("ImageAddress=%p SectionPointer=%p ImageLength=%#x cbImageBits=%#x rcNt=%#x '%ls'\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:2031:            Log(("rcNt=%#x '%ls'\n", rcNt, pwcsFilename));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:2059:                    Log(("WARNING: see @bugref{4853} for cause of this failure on Windows 7 x64\n"));
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:3431:        Log(("vboxdrv/NewProcessEx: ctx=%04zx/%p pid=%04zx ppid=%04zx ctor=%04zx/%04zx rcNt=%#x %.*ls\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:3546:                Log(("vboxdrv/ProcessHandlePre: %sctx=%04zx/%p wants %#x to %p in pid=%04zx [%d] %s\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:3559:                Log(("vboxdrv/ProcessHandlePre: %sctx=%04zx/%p wants %#x to %p in pid=%04zx [%d] %s [debugger]\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:3665:                Log(("vboxdrv/ProcessHandlePre: %sctx=%04zx/%p wants %#x to %p/pid=%04zx [%d], allow %#x => %#x; %s [prev=%#x]\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:3680:                Log(("vboxdrv/ProcessHandlePre: ctx=%04zx/%p[%p] dup from %04zx/%p with %#x to %p in pid=%04zx [%d] %s\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:3735:                Log(("vboxdrv/ProcessHandlePre: %sctx=%04zx/%p[%p] dup from %04zx/%p with %#x to %p in pid=%04zx [%d] %s\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:3836:                Log(("vboxdrv/ThreadHandlePre: %sctx=%04zx/%p wants %#x to %p in pid=%04zx [%d] self\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:3847:                Log(("vboxdrv/ThreadHandlePre: %sctx=%04zx/%p wants %#x to %p in pid=%04zx [%d] %s [debugger]\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:3898:                Log(("vboxdrv/ThreadHandlePre: %sctx=%04zx/%p wants %#x to %p in pid=%04zx [%d], allow %#x => %#x; %s [prev=%#x]\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:3914:                Log(("vboxdrv/ThreadHandlePre: %sctx=%04zx/%p[%p] dup from %04zx/%p with %#x to %p in pid=%04zx [%d] self\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:3943:                Log(("vboxdrv/ThreadHandlePre: %sctx=%04zx/%p[%p] dup from %04zx/%p with %#x to %p in pid=%04zx [%d], allow %#x => %#x; %s\n",
VBox/HostDrivers/Support/win/SUPDrv-win.cpp:4878:                        Log(("vboxdrv: ObRegisterCallbacks was not found; ignored pre-Vista\n"));
VBox/HostDrivers/Support/SUPDrv.cpp:80: *      Log     - useful stuff, like failures.
VBox/HostDrivers/Support/SUPDrv.cpp:838:        Log(("Failed to create spinlock, rc=%d!\n", rc));
VBox/HostDrivers/Support/SUPDrv.cpp:922:                Log(("supdrvCleanupSession: destroying %p/%d (%p/%p) cpid=%RTproc pid=%RTproc dtor=%p\n",
VBox/HostDrivers/Support/SUPDrv.cpp:1868:                Log(("SUP_IOCTL_CALL_VMMR0: rc=%Rrc op=%u out=%u arg=%RX64 p/t=%RTproc/%RTthrd\n",
VBox/HostDrivers/Support/SUPDrv.cpp:1907:                Log(("SUP_IOCTL_CALL_VMMR0_BIG: rc=%Rrc op=%u out=%u arg=%RX64 p/t=%RTproc/%RTthrd\n",
VBox/HostDrivers/Support/SUPDrv.cpp:2413:            Log(("Unknown IOCTL %#lx\n", (long)uIOCtl));
VBox/HostDrivers/Support/SUPDrv.cpp:2498:            Log(("Unknown IOCTL %#lx\n", (long)uIOCtl));
VBox/HostDrivers/Support/SUPDrv.cpp:2722:            Log(("Unknown IDC %#lx\n", (long)uReq));
VBox/HostDrivers/Support/SUPDrv.cpp:2812:    Log(("SUPR0ObjRegister: returns %p (pvUser1=%p, pvUser=%p)\n", pObj, pvUser1, pvUser2));
VBox/HostDrivers/Support/SUPDrv.cpp:2916:        /*Log(("SUPR0AddRef: pUsage=%p:{.pObj=%p, .pNext=%p}\n", pUsage, pUsage->pObj, pUsage->pNext));*/
VBox/HostDrivers/Support/SUPDrv.cpp:2929:        /*Log(("SUPR0AddRef: pUsagePre=%p:{.pObj=%p, .pNext=%p}\n", pUsagePre, pUsagePre->pObj, pUsagePre->pNext));*/
VBox/HostDrivers/Support/SUPDrv.cpp:3051:        Log(("SUPR0ObjRelease: destroying %p/%d (%p/%p) cpid=%RTproc pid=%RTproc dtor=%p\n",
VBox/HostDrivers/Support/SUPDrv.cpp:3210:        Log(("pvR3 (%p) must be page aligned and not NULL!\n", (void *)pvR3));
VBox/HostDrivers/Support/SUPDrv.cpp:3286:        Log(("Null pointer. All of these should be set: pSession=%p ppvR0=%p ppvR3=%p pHCPhys=%p\n",
VBox/HostDrivers/Support/SUPDrv.cpp:3293:        Log(("Illegal request cPages=%d, must be greater than 0 and smaller than 256.\n", cPages));
VBox/HostDrivers/Support/SUPDrv.cpp:3369:        Log(("Null pointer. All of these should be set: pSession=%p ppvR3=%p ppvR0=%p paPages=%p\n",
VBox/HostDrivers/Support/SUPDrv.cpp:3376:        Log(("Illegal request cPages=%d, must be greater than 0 and smaller than 256.\n", cPages));
VBox/HostDrivers/Support/SUPDrv.cpp:3457:        Log(("Illegal request cb=%u; must be greater than 0 and smaller than 4MB.\n", cb));
VBox/HostDrivers/Support/SUPDrv.cpp:3546:    Log(("Failed to find %p!!!\n", (void *)uPtr));
VBox/HostDrivers/Support/SUPDrv.cpp:3598:        Log(("SUPR0PageAlloc: Illegal request cb=%u; must be greater than 0 and smaller than %uMB (VBOX_MAX_ALLOC_PAGE_COUNT pages).\n", cPages, VBOX_MAX_ALLOC_PAGE_COUNT * (_1M / _4K)));
VBox/HostDrivers/Support/SUPDrv.cpp:4787:        Log(("Illegal address %p\n", (void *)uPtr));
VBox/HostDrivers/Support/SUPDrv.cpp:4832:    Log(("Failed to find %p!!! (eType=%d)\n", (void *)uPtr, eType));
VBox/HostDrivers/Support/SUPDrv.cpp:4881:            Log(("supdrvIOCtl_LdrOpen: To many existing references to '%s'!\n", pReq->u.In.szName));
VBox/HostDrivers/Support/SUPDrv.cpp:4891:        Log(("supdrvIOCtl_LdrOpen: Not adding '%s' to image list, loader interface is locked down!\n", pReq->u.In.szName));
VBox/HostDrivers/Support/SUPDrv.cpp:4903:        Log(("supdrvIOCtl_LdrOpen: RTMemAlloc() failed\n"));
VBox/HostDrivers/Support/SUPDrv.cpp:4946:        Log(("supdrvIOCtl_LdrOpen(%s): failed - %Rrc\n", pReq->u.In.szName, rc));
VBox/HostDrivers/Support/SUPDrv.cpp:4991:            Log(("Out of range (%p LB %#x): %s=%p\n", pImage->pvImage, pImage->cbImageBits, pszWhat, pv));
VBox/HostDrivers/Support/SUPDrv.cpp:5001:                Log(("Bad entry point address: %s=%p (rc=%Rrc)\n", pszWhat, pv, rc)); NOREF(pszWhat);
VBox/HostDrivers/Support/SUPDrv.cpp:5026:    Log(("SUP_IOCTL_LDR_LOAD: %s [rc=%Rrc]\n", pReq->u.Out.szError, rc));
VBox/HostDrivers/Support/SUPDrv.cpp:5181:            Log(("vboxdrv: Loaded '%s' at %p\n", pImage->szName, pImage->pvImage));
VBox/HostDrivers/Support/SUPDrv.cpp:5214:        Log(("supdrvIOCtl_LdrLoad: calling pfnModuleInit=%p\n", pImage->pfnModuleInit));
VBox/HostDrivers/Support/SUPDrv.cpp:5288:        Log(("SUP_IOCTL_LDR_FREE: couldn't find image!\n"));
VBox/HostDrivers/Support/SUPDrv.cpp:5349:            Log(("supdrvIOCtl_LdrFree: Dangling objects in %p/%s!\n", pImage->pvImage, pImage->szName));
VBox/HostDrivers/Support/SUPDrv.cpp:5381:        Log(("supdrvIOCtl_LdrLockDown: Image loader interface locked down\n"));
VBox/HostDrivers/Support/SUPDrv.cpp:5419:        Log(("SUP_IOCTL_LDR_GET_SYMBOL: couldn't find image!\n"));
VBox/HostDrivers/Support/SUPDrv.cpp:5427:        Log(("SUP_IOCTL_LDR_GET_SYMBOL: invalid image state %d (%#x)!\n", uState, uState)); NOREF(uState);
VBox/HostDrivers/Support/SUPDrv.cpp:5660:        Log(("supdrvLdrFree: Warning: unloading '%s' image, while loader interface is locked down!\n", pImage->szName));
VBox/HostDrivers/Support/SUPDrv.cpp:5815:        Log(("SUP_IOCTL_CALL_SERVICE: rc=%Rrc op=%u out=%u arg=%RX64 p/t=%RTproc/%RTthrd\n",
VBox/HostDrivers/Support/SUPSvcGrant.cpp:168:    Log(("supSvcGrantSessionThread(%p):\n", pThis));
VBox/HostDrivers/Support/SUPSvcGrant.cpp:186:        Log(("supSvcGrantSessionThread(%p): No parent\n", pThis));
VBox/HostDrivers/Support/SUPSvcGrant.cpp:192:        Log(("supSvcGrantSessionThread(%p): No session handle\n", pThis));
VBox/HostDrivers/Support/SUPSvcGrant.cpp:199:    Log(("supSvcGrantSessionThread(%p): exits\n"));
VBox/HostDrivers/Support/SUPSvcGrant.cpp:397:            Log(("supSvcGrantThreadListen: starting session %p\n", pSession));
VBox/HostDrivers/Support/SUPSvcGrant.cpp:416:            Log(("supSvcGrantThreadListen: dropping connection, state %s\n", supSvcGrantStateName(enmState)));
VBox/HostDrivers/Support/SUPSvcGrant.cpp:519:                    Log(("supSvcGrantThread: supSvcGrantDoListening returns %Rrc, exiting\n", rc));
VBox/HostDrivers/Support/SUPSvcGrant.cpp:526:                Log(("supSvcGrantThread: Done\n"));
VBox/HostDrivers/Support/SUPSvcGrant.cpp:625:    Log(("supSvcGrantWait(,%s,%s): returns %Rrc\n",
VBox/HostDrivers/Support/SUPSvcGrant.cpp:675:                                Log(("supSvcGrantCreate: returns VINF_SUCCESS (pThis=%p)\n", pThis));
VBox/HostDrivers/Support/SUPSvcGrant.cpp:731:    Log(("supSvcGrantCreate: returns %Rrc\n", rc));
VBox/HostDrivers/Support/SUPSvcGrant.cpp:1000:    Log(("supSvcGrantStopAndDestroy: done (rc=%Rrc)\n", rc));
VBox/HostDrivers/Support/os2/SUPDrv-os2.cpp:100:        Log(("VBoxDrvInit: pszArgs=%s\n", pszArgs));
VBox/HostDrivers/Support/os2/SUPDrv-os2.cpp:169:    Log(("VBoxDrvOpen: g_DevExt=%p pSession=%p rc=%d pid=%d\n", &g_DevExt, pSession, rc, (int)RTProcSelf()));
VBox/HostDrivers/Support/os2/SUPDrv-os2.cpp:176:    Log(("VBoxDrvClose: pid=%d sfn=%d\n", (int)RTProcSelf(), sfn));
VBox/HostDrivers/Support/os2/SUPDrv-os2.cpp:300:        Log(("VBoxDrvIOCtl: pSession=%p iFunction=%#x pvParm=%p pvData=%p *pcbParm=%d *pcbData=%d\n", pSession, iFunction, pvParm, pvData, *pcbParm, *pcbData));
VBox/HostDrivers/Support/darwin/SUPDrv-darwin.cpp:485:    Log(("VBoxDrvDarwinOpen: pid=%d '%s'\n", proc_pid(pProcess), szName));
VBox/HostDrivers/Support/darwin/SUPDrv-darwin.cpp:555:    Log(("VBoxDrvDarwinOpen: g_DevExt=%p pSession=%p rc=%d pid=%d\n", &g_DevExt, pSession, rc, proc_pid(pProcess)));
VBox/HostDrivers/Support/darwin/SUPDrv-darwin.cpp:567:    Log(("VBoxDrvDarwinClose: pid=%d\n", (int)RTProcSelf()));
VBox/HostDrivers/Support/darwin/SUPDrv-darwin.cpp:792:        Log(("VBoxDrvDarwinIOCtlSlow: huh? cbReq=%#x iCmd=%#lx\n", cbReq, iCmd));
VBox/HostDrivers/Support/darwin/SUPDrv-darwin.cpp:844:        Log(("VBoxDrvDarwinIOCtlSlow: pid=%d iCmd=%lx pData=%p failed, rc=%d\n", proc_pid(pProcess), iCmd, (void *)pData, rc));
VBox/HostDrivers/Support/darwin/SUPDrv-darwin.cpp:1728:                    Log(("org_virtualbox_SupDrvClient::start: created session %p for pid %d\n", m_pSession, (int)RTProcSelf()));
VBox/HostDrivers/Support/darwin/SUPDrv-darwin.cpp:1791:        Log(("SupDrvClient::sessionClose: pSession == NULL, pid=%d; freed already?\n", (int)Process));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSBMon-solaris.c:585:    Log((DEVICE_NAME ": VBoxUSBMonSolarisIOCtl: pid=%d\n", (int)RTProcSelf()));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSBMon-solaris.c:681:            Log(("vboxUSBMonSolarisProcessIOCtl: idVendor=%#x idProduct=%#x bcdDevice=%#x bDeviceClass=%#x "
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSBMon-solaris.c:691:            Log(("vboxUSBMonSolarisProcessIOCtl: Manufacturer=%s Product=%s Serial=%s\n",
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSBMon-solaris.c:700:            Log((DEVICE_NAME ": vboxUSBMonSolarisProcessIOCtl: ADD_FILTER (Process:%d) returned %d\n", pState->Process, rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSBMon-solaris.c:711:            Log((DEVICE_NAME ": vboxUSBMonSolarisProcessIOCtl: REMOVE_FILTER (Process:%d) returned %d\n", pState->Process, rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSBMon-solaris.c:722:            Log((DEVICE_NAME ": vboxUSBMonSolarisProcessIOCtl: RESET_DEVICE (Process:%d) returned %d\n", pState->Process, rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSBMon-solaris.c:733:            Log((DEVICE_NAME ": vboxUSBMonSolarisProcessIOCtl: CLIENT_INFO (Process:%d) returned %d\n", pState->Process, rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSBMon-solaris.c:746:            Log((DEVICE_NAME ": vboxUSBMonSolarisProcessIOCtl: GET_VERSION returned %d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSBMon-solaris.c:800:        Log((DEVICE_NAME ": vboxUSBMonSolarisResetDevice: usb_reset_device for %s level=%s rc=%d\n", pszDevicePath,
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSBMon-solaris.c:865:            Log((DEVICE_NAME ": vboxUSBMonSolarisClientInfo: Found %s, rc=%d\n", pClientInfo->szDeviceIdent, rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSBMon-solaris.c:905:            Log((DEVICE_NAME ": Client registered (ClientPath=%s Ident=%s)\n", pClient->Info.szClientPath,
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSBMon-solaris.c:942:                Log((DEVICE_NAME ": Client unregistered (ClientPath=%s Ident=%s)\n", pCur->Info.szClientPath,
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSBMon-solaris.c:1004:    Log((DEVICE_NAME ": VBoxUSBMonSolarisElectDriver: idVendor=%#x idProduct=%#x bcdDevice=%#x bDeviceClass=%#x "
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSBMon-solaris.c:1014:    Log((DEVICE_NAME ": VBoxUSBMonSolarisElectDriver: Manufacturer=%s Product=%s Serial=%s\n",
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSBMon-solaris.c:1027:        Log((DEVICE_NAME ": VBoxUSBMonSolarisElectDriver: No matching filters, device %#x:%#x uninteresting\n",
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:473:         * Log only when it changes / first time, since _init() seems to be called often (e.g. on failed attaches).
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:642:                                    Log((DEVICE_NAME ": VBoxUSBSolarisAttach: cbMaxBulkXfer=%d\n", pState->cbMaxBulkXfer));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:754:                        Log((DEVICE_NAME ": VBoxUSBSolarisAttach: Not a USB device\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1195:            Log((DEVICE_NAME ": VBoxUSBSolarisPower: USB_DEV_PWRSTATE_OK failed\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1380:            Log((DEVICE_NAME ": vboxUsbSolarisProcessIOCtl: SEND_URB returned %d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1391:            Log((DEVICE_NAME ": vboxUsbSolarisProcessIOCtl: REAP_URB returned %d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1402:            Log((DEVICE_NAME ": vboxUsbSolarisProcessIOCtl: CLEAR_EP returned %d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1413:            Log((DEVICE_NAME ": vboxUsbSolarisProcessIOCtl: SET_CONFIG returned %d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1424:            Log((DEVICE_NAME ": vboxUsbSolarisProcessIOCtl: SET_INTERFACE returned %d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1444:            Log((DEVICE_NAME ": vboxUsbSolarisProcessIOCtl: CLOSE_DEVICE returned %d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1455:            Log((DEVICE_NAME ": vboxUsbSolarisProcessIOCtl: ABORT_PIPE returned %d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1466:            Log((DEVICE_NAME ": vboxUsbSolarisProcessIOCtl: GET_CONFIG returned %d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1479:            Log((DEVICE_NAME ": vboxUsbSolarisProcessIOCtl: GET_VERSION returned %d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1536:                Log((DEVICE_NAME ": vboxUsbSolarisInitPower: Failed to create power components\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1545:        Log((DEVICE_NAME ": vboxUsbSolarisInitPower: Failed to enable remote wakeup, No PM!\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1578:                Log((DEVICE_NAME ": vboxUsbSolarisDestroyPower: Raising power failed! rc=%d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1582:                Log((DEVICE_NAME ": vboxUsbSolarisDestroyPower: Failed to disable remote wakeup\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1589:            Log((DEVICE_NAME ": vboxUsbSolarisDestroyPower: Lowering power failed! rc=%d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1715:            Log((DEVICE_NAME ": vboxUsbSolarisIsUSBDevice: Compatible[%d]=%s\n", cCompatible, ppszCompatible[cCompatible]));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1718:                Log((DEVICE_NAME ": vboxUsbSolarisIsUSBDevice: Verified device as USB. pszCompatible=%s\n",
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1729:        Log((DEVICE_NAME ": vboxUsbSolarisIsUSBDevice: USB property lookup failed, rc=%d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1743:                Log((DEVICE_NAME ": vboxUsbSolarisIsUSBDevice: Parent compatible[%d]=%s\n", cCompatible,
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1747:                    Log((DEVICE_NAME ": vboxUsbSolarisIsUSBDevice: Verified device as USB. parent pszCompatible=%s\n",
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1758:            Log((DEVICE_NAME ": vboxUsbSolarisIsUSBDevice: USB parent property lookup failed. rc=%d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:1761:        Log((DEVICE_NAME ": vboxUsbSolarisIsUSBDevice: Failed to obtain parent device for property lookup\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2003:                    Log((DEVICE_NAME ": vboxUsbSolarisReapUrb: pvUrbR3=%p pvDataR3=%p cbData=%d\n", pUrbReq->pvUrbR3,
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2119:                Log((DEVICE_NAME ": vboxUsbSolarisClearEndPoint: bEndpoint=%#x[%d] returns %d\n", bEndpoint, iEpIndex, rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2125:                Log((DEVICE_NAME ": vboxUsbSolarisClearEndPoint: Not opened to be cleared. Faking success. bEndpoint=%#x\n",
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2137:        Log((DEVICE_NAME ": vboxUsbSolarisClearEndPoint: Device not online, state=%d\n", pState->DevState));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2228:    Log((DEVICE_NAME ": vboxUsbSolarisGetConfig: Returns %d bConfig=%u\n", rc, *pbConfig));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2259:            Log((DEVICE_NAME ": vboxUsbSolarisSetInterface: Success, bIf=%#x bAlt=%#x\n", bIf, bAlt, rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2319:    Log((DEVICE_NAME ": vboxUsbSolarisCloseDevice: Returns %d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2375:                Log((DEVICE_NAME ": vboxUsbSolarisAbortPipe: usb_pipe_drain_reqs returns %d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2449:    Log((DEVICE_NAME ": vboxUsbSolarisInitEp: Success, %s[%2d] %s %s bEndpoint=%#x\n", !pEpData ? "Default " : "Endpoint",
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2641:            Log((DEVICE_NAME ": vboxUsbSolarisCloseAllPipes: Closing[%d]\n", i));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2653:            Log((DEVICE_NAME ": vboxUsbSolarisCloseAllPipes: Closed default pipe\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2684:        Log((DEVICE_NAME ": vboxUsbSolarisOpenPipe: Default pipe opened\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2721:            Log((DEVICE_NAME ": vboxUsbSolarisOpenPipe: bEndpoint=%#x cbMaxIsocData=%u\n", pEp->EpDesc.bEndpointAddress,
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2760:            Log((DEVICE_NAME ": vboxUsbSolarisClosePipe: Closed default pipe\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2779:            Log((DEVICE_NAME ": vboxUsbSolarisClosePipe: Pipe bmAttributes=%#x bEndpoint=%#x\n", pEp->EpDesc.bmAttributes,
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2791:        Log((DEVICE_NAME ": vboxUsbSolarisClosePipe: Success, bEndpoint=%#x\n", pEp->EpDesc.bEndpointAddress));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:2968:        Log((DEVICE_NAME ": vboxUsbSolarisDeQueueUrb: URB failed! URBStatus=%d bEndpoint=%#x\n", URBStatus, pUrb->bEndpoint));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3302:        Log((DEVICE_NAME ": vboxUsbSolarisBulkXferCompleted: Pipe Gone!\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3426:        Log((DEVICE_NAME ": vboxUsbSolarisIsocXfer: Isoc. IN - Queueing\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3437:                Log((DEVICE_NAME ": vboxUsbSolarisIsocXfer: Max Isoc. data %d bytes queued\n", pEp->cbMaxIsocData));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3452:    Log((DEVICE_NAME ": vboxUsbSolarisIsocXfer: enmDir=%#x cIsocPkts=%d aIsocPkts[0]=%d cbDataR3=%d\n", pUrb->enmDir,
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3562:                Log((DEVICE_NAME ": vboxUsbSolarisIsocInXferCompleted: Stopping polling! Too many errors\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3574:                Log((DEVICE_NAME ": vboxUsbSolarisIsocInXferCompleted: cIsocInUrbs=%d cbIsocInLandedReqs=%d\n", pEp->cIsocInUrbs,
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3630:        Log((DEVICE_NAME ": vboxUsbSolarisIsocInXferCompleted: State Gone\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3650:        Log((DEVICE_NAME ": vboxUsbSolarisIsocInXferError: State Gone\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3659:        Log((DEVICE_NAME ": vboxUsbSolarisIsocInXferError: Pipe Gone\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3675:            Log((DEVICE_NAME ": vboxUsbSolarisIsocInXferError: Resubmitted Isoc. IN request due to unavailable resources\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3690:            Log((DEVICE_NAME ": vboxUsbSolarisIsocInXferError: Stopping Isoc. IN polling due to rc=%d\n",
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3708:        Log((DEVICE_NAME ": vboxUsbSolarisIsocInXferError: Deleting last queued URB as it failed\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3743:            Log((DEVICE_NAME ": vboxUsbSolarisIsocOutXferCompleted: cIsocPkts=%d cbData=%d cbActPkt=%d\n", pUrb->cIsocPkts,
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3765:            Log((DEVICE_NAME ": vboxUsbSolarisIsocOutXferCompleted: Missing private data!?! Dropping OUT pUrb\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3768:        Log((DEVICE_NAME ": vboxUsbSolarisIsocOutXferCompleted: Pipe Gone\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3871:        Log((DEVICE_NAME ": vboxUsbSolarisDeviceRestore: Not the same device\n"));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:3973:    Log((DEVICE_NAME ": vboxUsbSolarisDeviceSuspend: Returns %d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:4009:            Log((DEVICE_NAME ": vboxUsbSolarisPowerBusy: Busy component failed! rc=%d\n", rc));
VBox/HostDrivers/VBoxUSB/solaris/VBoxUSB-solaris.c:4041:            Log((DEVICE_NAME ": vboxUsbSolarisPowerIdle: Idle component failed! rc=%d\n", rc));
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:319:        Log(("USBFilter: %p - enmType=%d!\n", pFilter, pFilter->enmType));
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:325:        Log(("USBFilter: %p - offCurEnd=%#x!\n", pFilter, pFilter->offCurEnd));
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:334:        Log(("USBFilter: %p - bad null string\n", pFilter));
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:344:            Log(("USBFilter: %p - string at %#x isn't terminated!\n",
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:357:            Log(("USBFilter: %p - string at %#x isn't used by anyone! (%s)\n",
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:367:        Log(("USBFilter: %p - offCurEnd=%#x currently at %#x\n",
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:376:            Log(("USBFilter: %p - str tab isn't zero padded! %#x: %c\n",
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:396:                    Log(("USBFilter: %p - #%d/%d u16Value=%d expected 0!\n",
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:406:                    Log(("USBFilter: %p - #%d / %d - not numeric field\n",
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:416:                    Log(("USBFilter: %p - #%d / %d - not numeric field\n",
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:423:                    Log(("USBFilter: %p - #%d / %d - off=%#x max=%#x\n",
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:431:                    Log(("USBFilter: %p - #%d / %d - bad num expr: %s (rc=%Rrc)\n",
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:441:                    Log(("USBFilter: %p - #%d / %d - not string field\n",
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:448:                    Log(("USBFilter: %p - #%d / %d - off=%#x max=%#x\n",
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:458:                    Log(("USBFilter: %p - #%d / %d - not string field\n",
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:465:                    Log(("USBFilter: %p - #%d / %d - off=%#x max=%#x\n",
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:473:                    Log(("USBFilter: %p - #%d / %d - bad string pattern: %s (rc=%Rrc)\n",
VBox/HostDrivers/VBoxUSB/USBFilter.cpp:480:                Log(("USBFilter: %p - #%d enmMatch=%d!\n", pFilter, i, pFilter->aFields[i].enmMatch));
VBox/HostDrivers/VBoxUSB/win/dev/VBoxUsbRt.cpp:263:                        Log(("Aborting Pipe %d handle %x address %x\n", j,
VBox/HostDrivers/VBoxUSB/win/mon/VBoxUsbMon.cpp:188:    Log(("%.*ls", pUnicodeString->Length / 2, pUnicodeString->Buffer));
VBox/HostDrivers/VBoxUSB/win/cmn/VBoxUsbTool.cpp:257:        Log(("Resetting the control pipe??\n"));
VBox/HostDrivers/VBoxUSB/win/lib/VBoxUsbLib-win.cpp:963:                 Log(("SUPUSB_IOCTL_GET_DEVICE: DeviceIoControl no longer connected\n"));
VBox/HostDrivers/VBoxUSB/win/lib/VBoxUsbLib-win.cpp:978:                 Log(("SUPUSBFLT_IOCTL_GET_DEVICE: DeviceIoControl no longer connected\n"));
VBox/HostDrivers/VBoxUSB/win/lib/VBoxUsbLib-win.cpp:1124:    Log(("usblibInsertFilter: Manufacturer=%s Product=%s Serial=%s\n",
VBox/HostDrivers/VBoxUSB/win/lib/VBoxUsbLib-win.cpp:1161:    Log(("usblibRemoveFilter %p\n", pvId));
VBox/HostDrivers/VBoxUSB/win/lib/VBoxUsbLib-win.cpp:1331:    Log(("usbproxy: usbLibInit\n"));
VBox/HostDrivers/VBoxUSB/os2/usbcalls.c:804:    Log(("BulkRead: usStatus=%d rc=%ld usDataProcessed=%d usDataRemain=%d ulDataLen=%ld\n",
VBox/HostDrivers/VBoxUSB/os2/usbcalls.c:893:    Log(("BulkWrite: usStatus=%d rc=%ld usDataProcessed=%d usDataRemain=%d ulDataLen=%ld\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:327:    Log(("VBoxUSBStart\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:380:    Log(("VBoxUSBStop: g_cInstances=%d\n", g_cInstances));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:395:    Log(("VBoxUSBStop - done\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:475:    Log(("VBoxUSB::init([%p], %p) new g_cInstances=%d\n", this, pDictionary, cInstances));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:496:    Log(("VBoxUSB::free([%p]) new g_cInstances=%d\n", this, cInstances));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:507:    Log(("VBoxUSB::start([%p], %p {%s})\n", this, pProvider, pProvider->getName()));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:526:    Log(("VBoxUSB::stop([%p], %p (%s))\n", this, pProvider, pProvider->getName()));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:538:    Log(("VBoxUSB::open([%p], %p, %#x, %p)\n", this, pForClient, fOptions, pvArg));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:540:    Log(("VBoxUSB::open([%p], %p, %#x, %p) -> %d\n", this, pForClient, fOptions, pvArg, fRc));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:552:    Log(("VBoxUSB::close([%p], %p, %#x)\n", this, pForClient, fOptions));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:564:    Log(("VBoxUSB::terminate([%p], %#x): g_cInstances=%d\n", this, fOptions, g_cInstances));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:566:    Log(("VBoxUSB::terminate([%p], %#x): returns %d\n", this, fOptions, fRc));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:595:        Log(("VBoxUSBClient::initWithTask([%p], %p, %p, %#x) -> false (no task)\n", this, OwningTask, pvSecurityId, u32Type));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:600:        Log(("VBoxUSBClient::initWithTask: Bade cookie %#x\n", u32Type));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:605:    Log(("VBoxUSBClient::initWithTask([%p], %p(->%p:{.pid=%d}, %p, %#x)\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:622:        Log(("VBoxUSBClient::initWithTask([%p], %p(->%p:{.pid=%d}, %p, %#x) -> true; new g_cInstances=%d\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:628:    Log(("VBoxUSBClient::initWithTask([%p], %p(->%p:{.pid=%d}, %p, %#x) -> false\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:642:    Log(("VBoxUSBClient::free([%p]) new g_cInstances=%d\n", this, cInstances));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:653:    Log(("VBoxUSBClient::start([%p], %p)\n", this, pProvider));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:671:        Log(("VBoxUSBClient::start: %p isn't org_virtualbox_VBoxUSB\n", pProvider));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:683:    Log(("VBoxUSBClient::clientClose([%p:{.m_Process=%d}])\n", this, (int)m_Process));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:737:    Log(("VBoxUSBClient::clientDied([%p]) m_Task=%p R0Process=%p Process=%d\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:753:    Log(("VBoxUSBClient::terminate([%p], %#x)\n", this, fOptions));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:765:    Log(("VBoxUSBClient::finalize([%p], %#x)\n", this, fOptions));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:776:    Log(("VBoxUSBClient::stop([%p])\n", this));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:854:    Log(("VBoxUSBClient::addFilter: [%p:{.m_Process=%d}] pFilter=%p pOut=%p\n", this, (int)m_Process, pFilter, pOut));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:868:     * Log the filter details.
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:898:    Log(("VBoxUSBClient::addFilter: returns *pOut={.rc=%d, .uId=%p}\n", pOut->rc, (void *)pOut->uId));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:915:    Log(("VBoxUSBClient::removeFilter: [%p:{.m_Process=%d}] *puId=%p m_Proc\n", this, (int)m_Process, *puId));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:933:    Log(("VBoxUSBClient::removeFilter: returns *prc=%d\n", *prc));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:996:    Log(("VBoxUSBDevice::init([%p], %p) new g_cInstances=%d\n", this, pDictionary, cInstances));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1023:    Log(("VBoxUSBDevice::free([%p]) new g_cInstances=%d\n", this, cInstances));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1049:    Log(("VBoxUSBDevice::probe([%p], %p {%s}, %p={%d})\n", this,
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1092:                    Log(("VBoxUSBDevice::probe: pObj=%p pNum=%p - %d/%s - rc=%d!\n", pObj, pNum, i, s_aProps[i].pszName, vrc));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1095:                Log(("VBoxUSBDevice::probe: pObj=%p pNum=%p - %d/%s!\n", pObj, pNum, i, s_aProps[i].pszName));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1106:                    Log(("VBoxUSBDevice::probe: pObj=%p pStr=%p - %d/%s - rc=%d!\n", pObj, pStr, i, s_aProps[i].pszName, vrc));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1109:                Log(("VBoxUSBDevice::probe: pObj=%p pStr=%p - %d/%s\n", pObj, pStr, i, s_aProps[i].pszName));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1122:        Log(("VBoxUSBDevice::probe: returns NULL uId=%d\n", uId));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1134:    Log(("%p: m_Owner=%d m_uId=%d\n", this, (int)m_Owner, (int)m_uId));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1136:    Log(("VBoxUSBDevice::probe: returns %p and *pi32Score=%d\n", pRet, *pi32Score));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1153:    Log(("VBoxUSBDevice::start([%p:{.m_Owner=%d, .m_uId=%p}], %p {%s})\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1190:        Log(("VBoxUSBDevice::start: failed to set the '" VBOXUSB_OWNER_KEY "' property!\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1192:        Log(("VBoxUSBDevice::start: failed to set the '" VBOXUSB_CLIENT_KEY "' property!\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1194:        Log(("VBoxUSBDevice::start: failed to set the '" VBOXUSB_FILTER_KEY "' property!\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1202:        Log(("VBoxUSBDevice::start: failed to open the device!\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1205:    Log(("VBoxUSBDevice::start: returns %d\n", true));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1221:    Log(("VBoxUSBDevice::stop([%p], %p {%s})\n", this, pProvider, pProvider->getName()));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1253:            Log(("VBoxUSBDevice::stop([%p], %p {%s}): m_pDevice=%p unload & ReEnumerateDevice -> %#x\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1262:                Log(("VBoxUSBDevice::stop([%p], %p {%s}): pDevice=%p unload & ReEnumerateDevice -> %#x\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1266:                Log(("VBoxUSBDevice::stop([%p], %p {%s}): failed to cast provider to IOUSBDevice\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1276:            Log(("VBoxUSBDevice::stop([%p], %p {%s}): m_pDevice=%p close & ReEnumerateDevice -> %#x\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1309:    Log(("VBoxUSBDevice::stop: returns void\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1321:    Log(("VBoxUSBDevice::terminate([%p], %#x)\n", this, fOptions));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1359:    Log(("VBoxUSBDevice::message([%p], %#x {%s}, %p {%s}, %p) - pid=%d\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1383:                Log(("VBoxUSBDevice::message([%p],%p {%s}, %p) - pid=%d: not seize - closing...\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1396:                    Log(("VBoxUSBDevice::message([%p],%p {%s}, %p) - pid=%d task=%p: client process, closing.\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1407:                    Log(("VBoxUSBDevice::message([%p],%p {%s}, %p) - pid=%d task=%p: not client process!\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1411:                Log(("VBoxUSBDevice::message: failed to set the '" VBOXUSB_CLIENT_KEY "' property!\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1429:                    Log(("VBoxUSBDevice::message: failed to set the '" VBOXUSB_CLIENT_KEY "' property!\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1441:                    Log(("VBoxUSBDevice::message([%p], %p {%s}) - ReEnumerateDevice() -> %#x\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1449:                    Log(("VBoxUSBDevice::message: attempting to re-open the device...\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1453:                        Log(("VBoxUSBDevice::message: failed to open the device!\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1474:                    Log(("VBoxUSBDevice::message: closing the device (%p)...\n", m_pDevice));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1479:                Log(("VBoxUSBDevice::message: releasing the device (%p)...\n", m_pDevice));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1492:    Log(("VBoxUSBDevice::message([%p], %#x {%s}, %p {%s}, %p) -> %#x\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1539:                        Log(("VBoxUSBDevice::scheduleReleaseByOwner: %p {%s} - used by %d\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1552:                        Log(("VBoxUSBDevice::scheduleReleaseByOwner: %p {%s} - ReEnumerateDevice -> %#x\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1582:            Log(("VBoxUSBDevice::MyInterestHandler: kIOMessageServiceIsAttemptingOpen - pvRefCon=%p pProvider=%p pvMsgArg=%p cbMsgArg=%d\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1587:            Log(("VBoxUSBDevice::MyInterestHandler: kIOMessageServiceWasClosed - pvRefCon=%p pProvider=%p pvMsgArg=%p cbMsgArg=%d\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1592:            Log(("VBoxUSBDevice::MyInterestHandler: kIOMessageServiceIsTerminated - pvRefCon=%p pProvider=%p pvMsgArg=%p cbMsgArg=%d\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1597:            Log(("VBoxUSBDevice::MyInterestHandler: kIOUSBMessagePortHasBeenReset - pvRefCon=%p pProvider=%p pvMsgArg=%p cbMsgArg=%d\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1602:            Log(("VBoxUSBDevice::MyInterestHandler: %#x (%s) - pvRefCon=%p pProvider=%p pvMsgArg=%p cbMsgArg=%d\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1637:    Log(("VBoxUSBInterface::init([%p], %p) new g_cInstances=%d\n", this, pDictionary, cInstances));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1656:    Log(("VBoxUSBInterfaces::free([%p]) new g_cInstances=%d\n", this, cInstances));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1671:    Log(("VBoxUSBInterface::probe([%p], %p {%s}, %p={%d})\n", this,
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1682:        Log(("VBoxUSBInterface::probe: pParent=%p {%s}\n", pParent, pParent->getName()));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1703:        Log(("VBoxUSBInterface::probe: returns NULL\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1710:    Log(("VBoxUSBInterface::probe: returns %p and *pi32Score=%d - hijack it.\n", pRet, *pi32Score));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1721:    Log(("VBoxUSBInterface::start([%p], %p {%s})\n", this, pProvider, pProvider->getName()));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1738:            Log(("VBoxUSBInterface::start: failed to open the interface!\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1747:    Log(("VBoxUSBInterface::start: returns %d\n", fRc));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1758:    Log(("org_virtualbox_VBoxUSBInterface::stop([%p], %p {%s})\n", this, pProvider, pProvider->getName()));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1779:    Log(("VBoxUSBInterface::stop: returns void\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1791:    Log(("VBoxUSBInterface::terminate([%p], %#x)\n", this, fOptions));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1802:    Log(("VBoxUSBInterface::message([%p], %#x {%s}, %p {%s}, %p)\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1815:                Log(("VBoxUSBInterface::message([%p],%p {%s}, %p) - pid=%d: not seize - closing...\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1827:                    Log(("VBoxUSBInterface::message([%p],%p {%s}, %p) - pid=%d task=%p: client process, closing.\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1837:                    Log(("VBoxUSBInterface::message([%p],%p {%s}, %p) - pid=%d task=%p: not client process!\n",
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1848:                Log(("VBoxUSBInterface::message: attempting to re-open the interface...\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1852:                    Log(("VBoxUSBInterface::message: failed to open the interface!\n"));
VBox/HostDrivers/VBoxUSB/darwin/VBoxUSB.cpp:1886:    Log(("VBoxUSBInterface::message([%p], %#x {%s}, %p {%s}, %p) -> %#x\n",
VBox/HostDrivers/VBoxPci/VBoxPci.c:81:        Log(("VBoxRawPci: rc=%Rrc, uuid=%s\n", rc, pszInterfaceUuid));
VBox/HostDrivers/VBoxPci/VBoxPci.c:664:            Log(("VBoxRawPci: pSession=%p\n", SUPR0IdcGetSession(&pGlobals->SupDrvIDC)));
VBox/HostDrivers/VBoxPci/linux/VBoxPci-linux.c:224:    Log(("VBoxPciLinuxUnload - done\n"));
VBox/HostDrivers/win/VBoxDbgLog.h:90:        Log((VBOX_DBG_LOG_PREFIX_FMT"WARNING! ", VBOX_DBG_LOG_PREFIX_PARMS)); \
VBox/HostDrivers/win/VBoxDbgLog.h:91:        Log(_a);                                                                  \
VBox/HostDrivers/win/VBoxDbgLog.h:92:        Log((VBOX_DBG_LOG_SUFFIX_FMT VBOX_DBG_LOG_SUFFIX_PARMS));             \
VBox/HostDrivers/win/VBoxDbgLog.h:108:#define LOG(_a) _LOGMSG(Log, _a)
VBox/HostDrivers/win/VBoxDbgLog.h:113:#define LOG_EXACT(_a) _LOGMSG_EXACT(Log, _a)
VBox/HostDrivers/win/VBoxDbgLog.h:117:        _LOGMSG_STR(Log, _a, "c"); \
VBox/HostDrivers/win/VBoxDbgLog.h:120:        _LOGMSG_STR(Log, _a, "c"); \
VBox/HostDrivers/win/VBoxDbgLog.h:123:        _LOGMSG_USTR(Log, _a); \
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:325:    Log(("VBoxNetAdpLinuxOpen: pid=%d/%d %s\n", RTProcSelf(), current->pid, current->comm));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:333:        Log(("VBoxNetAdpLinuxOpen: admin privileges required!\n"));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:350:    Log(("VBoxNetAdpLinuxClose: pid=%d/%d %s\n",
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:376:    Log(("VBoxNetAdpLinuxIOCtl: param len %#x; uCmd=%#x; add=%#x\n", _IOC_SIZE(uCmd), uCmd, VBOXNETADP_CTL_ADD));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:379:        Log(("VBoxNetAdpLinuxIOCtl: bad ioctl sizeof(Req)=%#x _IOC_SIZE=%#x; uCmd=%#x.\n", sizeof(Req), _IOC_SIZE(uCmd), uCmd));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:386:            Log(("VBoxNetAdpLinuxIOCtl: _IOC_DIR(uCmd)=%#x; IOC_OUT=%#x\n", _IOC_DIR(uCmd), IOC_OUT));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:389:                Log(("VBoxNetAdpLinuxIOCtl: copy_from_user(,%#lx,) failed; uCmd=%#x.\n", ulArg, uCmd));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:392:            Log(("VBoxNetAdpLinuxIOCtl: Add %s\n", Req.szName));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:399:                    Log(("VBoxNetAdpLinuxIOCtl: '%s' already exists\n", Req.szName));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:407:                Log(("VBoxNetAdpLinuxIOCtl: vboxNetAdpCreate -> %Rrc\n", rc));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:422:            Log(("VBoxNetAdpLinuxIOCtl: Successfully added '%s'\n", Req.szName));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:428:                Log(("VBoxNetAdpLinuxIOCtl: copy_from_user(,%#lx,) failed; uCmd=%#x.\n", ulArg, uCmd));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:431:            Log(("VBoxNetAdpLinuxIOCtl: Remove %s\n", Req.szName));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:436:                Log(("VBoxNetAdpLinuxIOCtl: '%s' not found\n", Req.szName));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:443:                Log(("VBoxNetAdpLinuxIOCtl: vboxNetAdpDestroy('%s') -> %Rrc\n", Req.szName, rc));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:446:            Log(("VBoxNetAdpLinuxIOCtl: Successfully removed '%s'\n", Req.szName));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:483:        Log(("VBoxNetAdpLinuxInit\n"));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:514:    Log(("VBoxNetAdpLinuxUnload\n"));
VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c:526:    Log(("VBoxNetAdpLinuxUnload - done\n"));
VBox/HostDrivers/VBoxNetAdp/solaris/VBoxNetAdp-solaris.c:280:    Log((DEVICE_NAME ":_info returns %d\n", rc));
VBox/HostDrivers/VBoxNetAdp/solaris/VBoxNetAdp-solaris.c:469:    Log((DEVICE_NAME ":VBoxNetAdpSolarisGenerateMac Generated %.*Rhxs\n", sizeof(RTMAC), &pMac));
VBox/HostDrivers/VBoxNetAdp/solaris/VBoxNetAdp-solaris.c:480:        Log((DEVICE_NAME ":vboxNetAdpSolarisSetMacAddress updated MAC %.*Rhxs\n", sizeof(RTMAC), &pState->CurrentMac));
VBox/HostDrivers/VBoxNetAdp/VBoxNetAdp.c:117:            Log(("vboxNetAdpCreate: found empty slot: %d\n", i));
VBox/HostDrivers/VBoxNetAdp/VBoxNetAdp.c:120:                Log(("vboxNetAdpCreate: using name: %s\n", pcszName));
VBox/HostDrivers/VBoxNetAdp/VBoxNetAdp.c:136:                Log(("vboxNetAdpCreate: pThis=%p pThis->iUnit=%d, pThis->szName=%s\n",
VBox/HostDrivers/VBoxNetAdp/VBoxNetAdp.c:148:                Log(("vboxNetAdpCreate: vboxNetAdpOsCreate failed with '%Rrc'.\n", rc));
VBox/HostDrivers/VBoxNetAdp/VBoxNetAdp.c:156:    Log(("vboxNetAdpCreate: no empty slots!\n"));
VBox/HostDrivers/VBoxNetAdp/freebsd/VBoxNetAdp-freebsd.c:123:    Log(("VBoxNetAdpFreeBSDModuleEvent\n"));
VBox/HostDrivers/VBoxNetAdp/freebsd/VBoxNetAdp-freebsd.c:131:                Log(("RTR0Init failed %d\n", rc));
VBox/HostDrivers/VBoxNetAdp/freebsd/VBoxNetAdp-freebsd.c:138:                Log(("vboxNetAdpInit failed %d\n", rc));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:818:            Log(("VBoxNetFlt: unknown factory interface query (%s)\n", pszInterfaceUuid));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:822:        Log(("VBoxNetFlt: rc=%Rrc, uuid=%s\n", rc, pszInterfaceUuid));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:859:        Log(("vboxNetAdpWinFactoryCreateAndConnect: evaluating adapter=%s\n", pAdapter->szName));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:865:            Log(("vboxNetAdpWinFactoryCreateAndConnect: found matching adapter, name=%s\n", pszName));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:950:                    Log(("vboxNetAdpWinInitIdcWorker: state change (Connecting -> %s) while initializing IDC, closed IDC, rc=0x%x\n",
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:955:                    Log(("vboxNetAdpWinInitIdcWorker: IDC state change Connecting -> Connected\n"));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:977:        Log(("vboxNetAdpWinStartInitIdcThread: IDC state change Diconnected -> Connecting\n"));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:986:        Log(("vboxNetAdpWinStartInitIdcThread: create IDC initialization thread, status=0x%x\n", Status));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:993:            Log(("vboxNetAdpWinStartInitIdcThread: IDC state change Connecting -> Diconnected\n"));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:1076:        Log(("vboxNetAdpWinAllocAdapter: Out of memory while allocating adapter context (size=%d)\n", sizeof(VBOXNETADP_ADAPTER)));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:1176:            Log(("vboxNetAdpWinInitializeEx: Failed to allocate the adapter context with 0x%x\n", Status));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:1192:            Log(("vboxNetAdpWinInitializeEx: NdisMSetMiniportAttributes(registration) failed with 0x%x\n", Status));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:1244:            Log(("vboxNetAdpWinInitializeEx: NdisMSetMiniportAttributes(general) failed with 0x%x\n", Status));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:1629:    Log(("vboxNetAdpWinCancelSend: We should not be here!\n"));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:1657:    Log(("vboxNetAdpWinDevicePnPEventNotify: PnP event=%d\n", NetDevicePnPEvent->DevicePnPEvent));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:1667:    Log(("vboxNetAdpWinShutdownEx: action=%d\n", ShutdownAction));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:1676:    Log(("vboxNetAdpWinCancelOidRequest: req id=%p\n", RequestId));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:1695:    Log(("vboxNetAdpWinUnload: IDC state change %s -> Stopping\n", vboxNetAdpWinIdcStateToText(enmPrevState)));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:1730:            Log(("vboxNetAdpWinUnload: closed IDC, rc=0x%x\n", rc));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:1779:    Log(("vboxNetAdpWinRegister: registering miniport driver...\n"));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:1788:        Log(("vboxNetAdpWinRegister: successfully registered miniport driver; registering device...\n"));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:1792:        Log(("ERROR! vboxNetAdpWinRegister: failed to register miniport driver, status=0x%x", Status));
VBox/HostDrivers/VBoxNetAdp/win/VBoxNetAdp-win.cpp:1836:                Log(("NETADP: started successfully\n"));
VBox/HostDrivers/VBoxNetAdp/darwin/VBoxNetAdp-darwin.cpp:297:                Log(("vboxNetAdpDarwinRegisterDevice: Failed to set flags (err=%d).\n", err));
VBox/HostDrivers/VBoxNetAdp/darwin/VBoxNetAdp-darwin.cpp:301:            Log(("vboxNetAdpDarwinRegisterDevice: Failed to attach to interface (err=%d).\n", err));
VBox/HostDrivers/VBoxNetAdp/darwin/VBoxNetAdp-darwin.cpp:305:        Log(("vboxNetAdpDarwinRegisterDevice: Failed to allocate interface (err=%d).\n", err));
VBox/HostDrivers/VBoxNetAdp/darwin/VBoxNetAdp-darwin.cpp:324:        Log(("vboxNetAdpDarwinUnregisterDevice: Failed to bring down interface "
VBox/HostDrivers/VBoxNetAdp/darwin/VBoxNetAdp-darwin.cpp:328:        Log(("vboxNetAdpDarwinUnregisterDevice: Failed to detach interface "
VBox/HostDrivers/VBoxNetAdp/darwin/VBoxNetAdp-darwin.cpp:338:        Log(("vboxNetAdpUnregisterDevice: Failed to release interface (err=%d).\n", err));
VBox/HostDrivers/VBoxNetAdp/darwin/VBoxNetAdp-darwin.cpp:359:    Log(("VBoxNetAdpDarwinOpen: pid=%d '%s'\n", proc_pid(pProcess), szName));
VBox/HostDrivers/VBoxNetAdp/darwin/VBoxNetAdp-darwin.cpp:370:    Log(("VBoxNetAdpDarwinClose: pid=%d\n", proc_pid(pProcess)));
VBox/HostDrivers/VBoxNetAdp/darwin/VBoxNetAdp-darwin.cpp:391:    Log(("VBoxNetAdpDarwinIOCtl: param len %#x; iCmd=%#lx\n", cbReq, iCmd));
VBox/HostDrivers/VBoxNetAdp/darwin/VBoxNetAdp-darwin.cpp:401:            Log(("VBoxNetAdpDarwinIOCtl: szName=%s\n", pReq->szName));
VBox/HostDrivers/VBoxNetAdp/darwin/VBoxNetAdp-darwin.cpp:411:            Log(("VBoxNetAdpDarwinIOCtl: Added '%s'\n", pReq->szName));
VBox/HostDrivers/VBoxNetAdp/darwin/VBoxNetAdp-darwin.cpp:427:            Log(("VBoxNetAdpDarwinIOCtl: Removed %s\n", pReq->szName));
VBox/HostDrivers/VBoxNetAdp/darwin/VBoxNetAdp-darwin.cpp:465:        Log(("VBoxNetAdpDarwinStart\n"));
VBox/HostDrivers/VBoxNetAdp/darwin/VBoxNetAdp-darwin.cpp:509:    Log(("VBoxNetAdpDarwinStop\n"));
VBox/Storage/VD.cpp:1155:    Log(("Freeing I/O context %#p\n", pIoCtx));
VBox/Storage/VD.cpp:1536:    Log(("Defer pIoCtx=%#p\n", pIoCtx));
VBox/Storage/VD.cpp:1701:        Log(("Interferring read while allocating a new block => deferring read\n"));
VBox/Storage/VD.cpp:2669:            Log(("Interferring write while allocating a new block => deferring write\n"));
VBox/Storage/VD.cpp:3634:    Log(("I/O task list cleared\n"));
VBox/Storage/VD.cpp:3766:    Log(("Deferring I/O task pIoTask=%p\n", pIoTask));
VBox/Storage/VD.cpp:4030:            Log(("Spawning pIoTask=%p pIoCtx=%p\n", pIoTask, pIoCtx));
VBox/Storage/VD.cpp:4130:            Log(("Spawning pIoTask=%p pIoCtx=%p\n", pIoTask, pIoCtx));
VBox/Storage/ISCSI.cpp:2954:    /* Log any errors here but ignore the PDU. */
VBox/Storage/ISCSI.cpp:4622:                /* Log failures but continue. */
VBox/Storage/ISCSI.cpp:4632:        /* Log errors but continue. */
VBox/Storage/Parallels.cpp:228:                        Log(("cSectors=%u\n", parallelsHeader.cSectors));
VBox/Storage/VHDX.cpp:78:    /** Log UUID. */
VBox/Storage/VHDX.cpp:101:/** Current Log format version. */
VBox/Storage/VHDX.cpp:161: * VHDX Log entry header.
VBox/Storage/VHDX.cpp:180:    /** Log UUID. */
VBox/Storage/VDIfVfs2.cpp:109:    Log(("%s\n",  __FUNCTION__));
VBox/Storage/VDIfVfs2.cpp:118:    Log(("%s\n",  __FUNCTION__));
VBox/Storage/VDIfVfs2.cpp:127:    Log(("%s\n",  __FUNCTION__));
VBox/Storage/VDIfVfs2.cpp:136:    Log(("%s\n",  __FUNCTION__));
VBox/Storage/VDIfVfs2.cpp:145:    Log(("%s\n",  __FUNCTION__));
VBox/Storage/VDIfVfs2.cpp:156:    Log(("%s\n",  __FUNCTION__));
VBox/Storage/VDIfVfs2.cpp:165:    Log(("%s\n",  __FUNCTION__));
VBox/Storage/testcase/VDMemDisk.cpp:18:#define LOGGROUP LOGGROUP_DEFAULT /** @todo Log group */
VBox/Storage/testcase/VDIoBackend.cpp:18:#define LOGGROUP LOGGROUP_DEFAULT /** @todo Log group */
VBox/Storage/testcase/VDIoBackendMem.cpp:18:#define LOGGROUP LOGGROUP_DEFAULT /** @todo Log group */
VBox/Storage/VHD.cpp:734:    Log(("Open a dynamic disk.\n"));
VBox/HostServices/SharedOpenGL/crserverlib/server_main.c:2931:            Log(("svcCall: SHCRGL_GUEST_FN_WRITE\n"));
VBox/HostServices/SharedOpenGL/crserverlib/server_main.c:3036:            Log(("svcCall: SHCRGL_GUEST_FN_READ\n"));
VBox/HostServices/SharedOpenGL/crserverlib/server_main.c:3094:            Log(("svcCall: SHCRGL_GUEST_FN_WRITE_READ\n"));
VBox/HostServices/SharedOpenGL/crserverlib/server_main.c:3642:            Log(("svcCall: SHCRGL_GUEST_FN_WRITE\n"));
VBox/HostServices/SharedOpenGL/crserverlib/server_main.c:3696:            Log(("svcCall: SHCRGL_GUEST_FN_INJECT\n"));
VBox/HostServices/SharedOpenGL/crserverlib/server_main.c:3748:            Log(("svcCall: SHCRGL_GUEST_FN_READ\n"));
VBox/HostServices/SharedOpenGL/crserverlib/server_main.c:3803:            Log(("svcCall: SHCRGL_GUEST_FN_WRITE_READ\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:106:    Log(("SHARED_CROPENGL svcUnload\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:125:    Log(("SHARED_CROPENGL svcConnect: u32ClientID = %d\n", u32ClientID));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:144:    Log(("SHARED_CROPENGL svcDisconnect: u32ClientID = %d\n", u32ClientID));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:157:    Log(("SHARED_CROPENGL svcSaveState: u32ClientID = %d\n", u32ClientID));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:209:    Log(("SHARED_CROPENGL svcLoadState: u32ClientID = %d\n", u32ClientID));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:428:    Log(("SHARED_CROPENGL svcCall: u32ClientID = %d, fn = %d, cParms = %d, pparms = %d\n", u32ClientID, u32Function, cParms, paParms));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:436:        Log(("    pparms[%d]: type %d value %d\n", i, paParms[i].type, paParms[i].u.uint32));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:444:            Log(("svcCall: SHCRGL_GUEST_FN_WRITE\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:477:            Log(("svcCall: SHCRGL_GUEST_FN_INJECT\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:517:            Log(("svcCall: SHCRGL_GUEST_FN_READ\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:556:            Log(("svcCall: SHCRGL_GUEST_FN_WRITE_READ\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:604:            Log(("svcCall: SHCRGL_GUEST_FN_SET_VERSION\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:638:            Log(("svcCall: SHCRGL_GUEST_FN_SET_PID\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:664:            Log(("svcCall: SHCRGL_GUEST_FN_WRITE_BUFFER\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:708:            Log(("svcCall: SHCRGL_GUEST_FN_WRITE_READ_BUFFERED\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:768:            Log(("svcCall: SHCRGL_GUEST_FN_GET_CAPS_NEW\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:801:            Log(("svcCall: SHCRGL_GUEST_FN_GET_CAPS_LEGACY\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:868:    Log(("SHARED_CROPENGL svcHostCall: fn = %d, cParms = %d, pparms = %d\n", u32Function, cParms, paParms));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:876:        Log(("    pparms[%d]: type %d value %d\n", i, paParms[i].type, paParms[i].u.uint32));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:908:            Log(("svcCall: SHCRGL_HOST_FN_SET_DISPLAY\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:989:            Log(("svcCall: SHCRGL_HOST_FN_SET_VM\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:1022:            Log(("svcCall: SHCRGL_HOST_FN_SET_VISIBLE_REGION\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:1044:            Log(("svcCall: SHCRGL_HOST_FN_SCREEN_CHANGED\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:1168:            Log(("svcCall: SHCRGL_HOST_FN_DEV_RESIZE\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:1203:            Log(("svcCall: SHCRGL_HOST_FN_VIEWPORT_CHANGED\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:1247:            Log(("svcCall: SHCRGL_HOST_FN_VIEWPORT_CHANGED\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:1295:            Log(("svcCall: SHCRGL_HOST_FN_SET_OUTPUT_REDIRECT\n"));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:1387:            /* Log scaling factor rounded to nearest 'int' value (not so precise). */
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:1522:    Log(("SHARED_CROPENGL VBoxHGCMSvcLoad: ptable = %p\n", ptable));
VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:1530:        Log(("VBoxHGCMSvcLoad: ptable->cbSize = %d, ptable->u32Version = 0x%08X\n", ptable->cbSize, ptable->u32Version));
VBox/HostServices/SharedOpenGL/OpenGLTest/OpenGLTestApp.cpp:148:                       "Log opened %s\n",
VBox/HostServices/SharedFolders/vbsfpath.cpp:125:                    Log(("Found original name %s (%s)\n", &pDirEntry->szName[0], pszStartComponent));
VBox/HostServices/SharedFolders/vbsfpath.cpp:137:        Log(("vbsfCorrectCasing %s failed with %Rrc\n", pszStartComponent, rc));
VBox/HostServices/SharedFolders/vbsfpath.cpp:214:        Log(("Handle case insensitive guest fs on top of host case sensitive fs for %s\n", pszFullPath));
VBox/HostServices/SharedFolders/vbsfpath.cpp:233:                    Log(("Found valid partial path %s\n", pszFullPath));
VBox/HostServices/SharedFolders/vbsfpath.cpp:300:                Log(("Unable to find suitable component rc=%d\n", rc));
VBox/HostServices/SharedFolders/mappings.cpp:209:    Log(("vbsfMappingsAdd %ls\n", pMapName->String.ucs2));
VBox/HostServices/SharedFolders/mappings.cpp:276:    Log(("vbsfMappingsAdd: added mapping %s to %ls\n", pszFolderName, pMapName->String.ucs2));
VBox/HostServices/SharedFolders/mappings.cpp:296:    Log(("vbsfMappingsRemove %ls\n", pMapName->String.ucs2));
VBox/HostServices/SharedFolders/mappings.cpp:315:                Log(("vbsfMappingsRemove: mapping %ls removed\n", pMapName->String.ucs2));
VBox/HostServices/SharedFolders/mappings.cpp:466:            Log(("vbsfMappingsQuery: passed string too short (%d < %d bytes)!\n",
VBox/HostServices/SharedFolders/mappings.cpp:577:        Log(("vbsfMapFolder %s\n", pszMapName->String.utf8));
VBox/HostServices/SharedFolders/mappings.cpp:581:        Log(("vbsfMapFolder %ls\n", pszMapName->String.ucs2));
VBox/HostServices/SharedFolders/mappings.cpp:666:    Log(("vbsfUnmapFolder\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:256:            Log(("FLAG: SHFL_CF_ACCESS_NONE\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:263:            Log(("FLAG: SHFL_CF_ACCESS_READ\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:270:            Log(("FLAG: SHFL_CF_ACCESS_WRITE\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:277:            Log(("FLAG: SHFL_CF_ACCESS_READWRITE\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:293:            Log(("FLAG: SHFL_CF_ACCESS_ATTR_NONE\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:300:            Log(("FLAG: SHFL_CF_ACCESS_ATTR_READ\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:307:            Log(("FLAG: SHFL_CF_ACCESS_ATTR_WRITE\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:314:            Log(("FLAG: SHFL_CF_ACCESS_ATTR_READWRITE\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:325:        Log(("FLAG: SHFL_CF_ACCESS_DENYNONE\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:330:        Log(("FLAG: SHFL_CF_ACCESS_DENYREAD\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:335:        Log(("FLAG: SHFL_CF_ACCESS_DENYWRITE\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:340:        Log(("FLAG: SHFL_CF_ACCESS_DENYALL\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:351:            Log(("FLAGS: SHFL_CF_ACT_OPEN_IF_EXISTS and SHFL_CF_ACT_CREATE_IF_NEW\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:356:            Log(("FLAGS: SHFL_CF_ACT_OPEN_IF_EXISTS and SHFL_CF_ACT_FAIL_IF_NEW\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:360:            Log(("FLAGS: invalid open/create action combination\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:368:            Log(("FLAGS: SHFL_CF_ACT_FAIL_IF_EXISTS and SHFL_CF_ACT_CREATE_IF_NEW\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:372:            Log(("FLAGS: invalid open/create action combination\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:380:            Log(("FLAGS: SHFL_CF_ACT_REPLACE_IF_EXISTS and SHFL_CF_ACT_CREATE_IF_NEW\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:385:            Log(("FLAGS: SHFL_CF_ACT_REPLACE_IF_EXISTS and SHFL_CF_ACT_FAIL_IF_NEW\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:389:            Log(("FLAGS: invalid open/create action combination\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:397:            Log(("FLAGS: SHFL_CF_ACT_OVERWRITE_IF_EXISTS and SHFL_CF_ACT_CREATE_IF_NEW\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:402:            Log(("FLAGS: SHFL_CF_ACT_OVERWRITE_IF_EXISTS and SHFL_CF_ACT_FAIL_IF_NEW\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:406:            Log(("FLAGS: invalid open/create action combination\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:412:        Log(("FLAG: SHFL_CF_ACT_MASK_IF_EXISTS - invalid parameter\n"));
VBox/HostServices/SharedFolders/vbsf.cpp:444:    Log(("SHFL create flags %08x\n", pParms->CreateFlags));
VBox/HostServices/SharedFolders/vbsf.cpp:627:    Log(("SHFL create flags %08x\n", pParms->CreateFlags));
VBox/HostServices/SharedFolders/vbsf.cpp:954:    Log(("vbsfCreate: handle = %RX64 rc = %Rrc result=%x\n", (uint64_t)pParms->Handle, rc, pParms->Result));
VBox/HostServices/SharedFolders/vbsf.cpp:1322:            Log(("SHFL: File name size %d\n", pSFDEntry->name.u16Size));
VBox/HostServices/SharedFolders/vbsf.cpp:1323:            Log(("SHFL: File name %ls\n", &pSFDEntry->name.String.ucs2));
VBox/HostServices/SharedFolders/vbsf.cpp:1506:        Log(("RTFileSetTimes failed with %Rrc\n", rc));
VBox/HostServices/SharedFolders/vbsf.cpp:1507:        Log(("AccessTime       %RX64\n", RTTimeSpecGetNano(&pSFDEntry->AccessTime)));
VBox/HostServices/SharedFolders/vbsf.cpp:1508:        Log(("ModificationTime %RX64\n", RTTimeSpecGetNano(&pSFDEntry->ModificationTime)));
VBox/HostServices/SharedFolders/vbsf.cpp:1509:        Log(("ChangeTime       %RX64\n", RTTimeSpecGetNano(&pSFDEntry->ChangeTime)));
VBox/HostServices/SharedFolders/vbsf.cpp:1510:        Log(("BirthTime        %RX64\n", RTTimeSpecGetNano(&pSFDEntry->BirthTime)));
VBox/HostServices/SharedFolders/vbsf.cpp:1540:                    Log(("RTFileSetMode %x failed with %Rrc\n", fMode, rc));
VBox/HostServices/SharedFolders/vbsf.cpp:1791:        Log(("RTFileLock %RTfile %RX64 %RX64 failed with %Rrc\n", pHandle->file.Handle, offset, length, rc));
VBox/HostServices/SharedFolders/vbsf.cpp:1793:    Log(("vbsfLock: Pretend success handle=%x\n", Handle));
VBox/HostServices/SharedFolders/vbsf.cpp:1822:        Log(("RTFileUnlock %RTfile %RX64 %RTX64 failed with %Rrc\n", pHandle->file.Handle, offset, length, rc));
VBox/HostServices/SharedFolders/vbsf.cpp:1824:    Log(("vbsfUnlock: Pretend success handle=%x\n", Handle));
VBox/HostServices/SharedFolders/vbsf.cpp:1927:        Log(("Rename %s to %s\n", pszFullPathSrc, pszFullPathDest));
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:253:            Log(("Found original name %s (%s)\n", &pDirEntry->szName[0], pszStartComponent));
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:260:        Log(("vbsfCorrectCasing %s failed with %d\n", pszStartComponent, rc));
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:322:        Log(("Handle case insensitive guest fs on top of host case sensitive fs for %s\n", pszFullPath));
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:336:                    Log(("Found valid partial path %s\n", pszFullPath));
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:394:                Log(("Unable to find suitable component rc=%d\n", rc));
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:404:        Log(("New valid path %s\n", pszFullPath));
VBox/HostServices/SharedFolders/testcase/tstShflCase.cpp:406:        Log(("Old invalid path %s\n", pszFullPath));
VBox/HostServices/SharedFolders/service.cpp:80:    Log(("svcUnload\n"));
VBox/HostServices/SharedFolders/service.cpp:91:    Log(("SharedFolders host service: connected, u32ClientID = %u\n", u32ClientID));
VBox/HostServices/SharedFolders/service.cpp:102:    Log(("SharedFolders host service: disconnected, u32ClientID = %u\n", u32ClientID));
VBox/HostServices/SharedFolders/service.cpp:120:    Log(("SharedFolders host service: saving state, u32ClientID = %u\n", u32ClientID));
VBox/HostServices/SharedFolders/service.cpp:187:    Log(("SharedFolders host service: loading state, u32ClientID = %u\n", u32ClientID));
VBox/HostServices/SharedFolders/service.cpp:292:    Log(("SharedFolders host service: successfully loaded state\n"));
VBox/HostServices/SharedFolders/service.cpp:304:    Log(("SharedFolders host service: svcCall: u32ClientID = %u, fn = %u, cParms = %u, pparms = %p\n", u32ClientID, u32Function, cParms, paParms));
VBox/HostServices/SharedFolders/service.cpp:314:        Log(("    pparms[%d]: type %u, value %u\n", i, paParms[i].type, paParms[i].u.uint32));
VBox/HostServices/SharedFolders/service.cpp:322:            Log(("SharedFolders host service: svcCall: SHFL_FN_QUERY_MAPPINGS\n"));
VBox/HostServices/SharedFolders/service.cpp:378:            Log(("SharedFolders host service: svcCall: SHFL_FN_QUERY_MAP_NAME\n"));
VBox/HostServices/SharedFolders/service.cpp:419:            Log(("SharedFolders host service: svcCall: SHFL_FN_CREATE\n"));
VBox/HostServices/SharedFolders/service.cpp:431:                Log(("SharedFolders host service: Invalid parameters types\n"));
VBox/HostServices/SharedFolders/service.cpp:469:            Log(("SharedFolders host service: svcCall: SHFL_FN_CLOSE\n"));
VBox/HostServices/SharedFolders/service.cpp:517:            Log(("SharedFolders host service: svcCall: SHFL_FN_READ\n"));
VBox/HostServices/SharedFolders/service.cpp:584:            Log(("SharedFolders host service: svcCall: SHFL_FN_WRITE\n"));
VBox/HostServices/SharedFolders/service.cpp:651:            Log(("SharedFolders host service: svcCall: SHFL_FN_LOCK\n"));
VBox/HostServices/SharedFolders/service.cpp:738:            Log(("SharedFolders host service: svcCall: SHFL_FN_LIST\n"));
VBox/HostServices/SharedFolders/service.cpp:816:            Log(("SharedFolders host service: svcCall: SHFL_FN_READLINK\n"));
VBox/HostServices/SharedFolders/service.cpp:864:            Log(("SharedFolders host service: svcCall: SHFL_FN_MAP_FOLDER_OLD\n"));
VBox/HostServices/SharedFolders/service.cpp:907:            Log(("SharedFolders host service: svcCall: SHFL_FN_MAP_FOLDER\n"));
VBox/HostServices/SharedFolders/service.cpp:909:                Log(("SharedFolders host service: request to map folder '%s'\n",
VBox/HostServices/SharedFolders/service.cpp:912:                Log(("SharedFolders host service: request to map folder '%ls'\n",
VBox/HostServices/SharedFolders/service.cpp:969:            Log(("SharedFolders host service: map operation result %Rrc\n", rc));
VBox/HostServices/SharedFolders/service.cpp:971:                Log(("SharedFolders host service: mapped to handle %d\n", paParms[1].u.uint32));
VBox/HostServices/SharedFolders/service.cpp:977:            Log(("SharedFolders host service: svcCall: SHFL_FN_UNMAP_FOLDER\n"));
VBox/HostServices/SharedFolders/service.cpp:978:            Log(("SharedFolders host service: request to unmap folder handle %u\n",
VBox/HostServices/SharedFolders/service.cpp:1005:            Log(("SharedFolders host service: unmap operation result %Rrc\n", rc));
VBox/HostServices/SharedFolders/service.cpp:1012:            Log(("SharedFolders host service: svcCall: SHFL_FN_INFORMATION\n"));
VBox/HostServices/SharedFolders/service.cpp:1068:            Log(("SharedFolders host service: svcCall: SHFL_FN_REMOVE\n"));
VBox/HostServices/SharedFolders/service.cpp:1111:            Log(("SharedFolders host service: svcCall: SHFL_FN_RENAME\n"));
VBox/HostServices/SharedFolders/service.cpp:1157:            Log(("SharedFolders host service: svcCall: SHFL_FN_FLUSH\n"));
VBox/HostServices/SharedFolders/service.cpp:1211:            Log(("SharedFolders host service: svnCall: SHFL_FN_SYMLINK\n"));
VBox/HostServices/SharedFolders/service.cpp:1293:    Log(("svcHostCall: fn = %d, cParms = %d, pparms = %d\n", u32Function, cParms, paParms));
VBox/HostServices/SharedFolders/service.cpp:1301:        Log(("    pparms[%d]: type %d value %d\n", i, paParms[i].type, paParms[i].u.uint32));
VBox/HostServices/SharedFolders/service.cpp:1309:        Log(("SharedFolders host service: svcCall: SHFL_FN_ADD_MAPPING\n"));
VBox/HostServices/SharedFolders/service.cpp:1376:        Log(("SharedFolders host service: svcCall: SHFL_FN_REMOVE_MAPPING\n"));
VBox/HostServices/SharedFolders/service.cpp:1419:        Log(("SharedFolders host service: svcCall: SHFL_FN_SET_STATUS_LED\n"));
VBox/HostServices/SharedFolders/service.cpp:1466:    Log(("SharedFolders host service: VBoxHGCMSvcLoad: ptable = %p\n", ptable));
VBox/HostServices/SharedFolders/service.cpp:1475:        Log(("SharedFolders host service: VBoxHGCMSvcLoad: ptable->cbSize = %u, ptable->u32Version = 0x%08X\n",
VBox/HostServices/HostChannel/HostChannel.h:27:#define HOSTCHLOG Log
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:76:    Log(("queryNewPasteboardFormats\n"));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:118:                    Log(("Unicode flavor detected.\n"));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:123:                    Log(("BMP flavor detected.\n"));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:131:    Log(("queryNewPasteboardFormats: rc = %02X\n", rc));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:149:    Log(("readFromPasteboard: fFormat = %02X\n", fFormat));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:175:                Log(("Clipboard content is utf-16\n"));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:187:                    Log(("readFromPasteboard: clipboard content is utf-8\n"));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:203:                    Log(("readFromPasteboard: clipboard conversion failed.  vboxClipboardUtf16GetWinSize returned %Rrc.  Abandoning.\n", rc));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:217:                        Log(("readFromPasteboard: clipboard conversion failed.  vboxClipboardUtf16LinToWin() returned %Rrc.  Abandoning.\n", rc));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:221:                    Log(("readFromPasteboard: clipboard content: %ls\n", static_cast <PRTUTF16>(pv)));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:237:                Log(("Clipboard content is BMP\n"));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:249:                    Log(("readFromPasteboard: unknown bitmap format. vboxClipboardBmpGetDib returned %Rrc.  Abandoning.\n", rc));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:261:                    Log(("readFromPasteboard: clipboard content bitmap %d bytes\n", cbDibSize));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:268:    Log(("readFromPasteboard: rc = %02X\n", rc));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:285:    Log(("writeToPasteboard: fFormat = %02X\n", fFormat));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:305:            Log(("writeToPasteboard: clipboard conversion failed.  vboxClipboardUtf16GetLinSize returned %Rrc.  Abandoning.\n", rc));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:311:            Log(("writeToPasteboard: received empty clipboard data from the guest, returning false.\n"));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:318:            Log(("writeToPasteboard: failed to allocate %d bytes\n", cwDest * 2));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:325:            Log(("writeToPasteboard: clipboard conversion failed.  vboxClipboardUtf16WinToLin() returned %Rrc.  Abandoning.\n", rc));
VBox/HostServices/SharedClipboard/darwin-pasteboard.cpp:391:    Log(("writeToPasteboard: rc = %02X\n", rc));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:31:#define dprintf Log
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:86:        Log(("DUMP: VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT:\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:88:            Log(("%ls\n", pv));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:90:            Log(("%p %d\n", pv, cb));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:96:        Log(("DUMP: VBOX_SHARED_CLIPBOARD_FMT_HTML:\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:99:            Log(("%s\n", pv));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:110:            Log(("%s\n", pszBuf));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:114:            Log(("%p %d\n", pv, cb));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:141:        Log(("New Clipboard API is enabled\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:147:        Log(("New Clipboard API is not available. rc = %Rrc\n", rc));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:375:            Log(("WM_CLIPBOARDUPDATE\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:386:            Log(("WM_CHANGECBCHAIN\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:419:            Log(("WM_DRAWCLIPBOARD\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:429:                Log(("WM_DRAWCLIPBOARD next %p\n", pCtx->hwndNextInChain));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:467:            Log(("WM_RENDERFORMAT %d\n", format));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:500:                Log(("WM_RENDERFORMAT unsupported format requested or client is not active.\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:527:                            Log(("WM_RENDERFORMAT setting data\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:573:            Log(("WM_RENDERALLFORMATS\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:598:                Log(("WM_USER ignored\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:605:            Log(("WM_USER u32Formats = %02X\n", u32Formats));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:612:                Log(("WM_USER emptied clipboard\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:662:            Log(("WM_ %p\n", msg));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:667:    Log(("WM_ rc %d\n", rc));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:697:        Log(("Failed to register window class\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:710:            Log(("Failed to create window\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:735:            Log(("VBoxClipboardThread Message loop finished. GetMessage returned %d, message id: %d \n", msgret, msg.message));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:777:    Log(("vboxClipboardDestroy\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:795:    Log(("vboxClipboardConnect\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:824:    Log(("vboxClipboardDisconnect\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:854:                Log(("Error in copying string.\n"));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:855:            Log(("Removed \\r\\n: %s\n", pszBuf));
VBox/HostServices/SharedClipboard/VBoxClipboard-win.cpp:861:            Log(("Not enough memory to allocate buffer.\n"));
VBox/HostServices/SharedClipboard/darwin.cpp:62:        Log (("vboxClipboardChanged fFormats %02X\n", fFormats));
VBox/HostServices/SharedClipboard/darwin.cpp:81:    Log (("vboxClipboardThread: starting clipboard thread\n"));
VBox/HostServices/SharedClipboard/darwin.cpp:98:    Log (("vboxClipboardThread: clipboard thread terminated successfully with return code %Rrc\n", VINF_SUCCESS));
VBox/HostServices/SharedClipboard/darwin.cpp:109:    Log (("vboxClipboardInit\n"));
VBox/HostServices/SharedClipboard/darwin.cpp:130:    Log (("vboxClipboardDestroy\n"));
VBox/HostServices/SharedClipboard/darwin.cpp:196:    Log (("vboxClipboardDisconnect\n"));
VBox/HostServices/SharedClipboard/darwin.cpp:212:    Log (("vboxClipboardFormatAnnounce u32Formats %02X\n", u32Formats));
VBox/Main/xml/Settings.cpp:403:        Log(("Parsed settings version %d.%d to enum value %d\n", ulMajor, ulMinor, sv));
VBox/Main/cbinding/VBoxCAPI.cpp:397:        Log(("Cbinding: COM/XPCOM could not be initialized! rc=%Rhrc\n", rc));
VBox/Main/cbinding/VBoxCAPI.cpp:406:        Log(("Cbinding: Could not get XPCOM event queue! rc=%Rhrc\n", rc));
VBox/Main/cbinding/VBoxCAPI.cpp:417:        Log(("Cbinding: Could not get component manager! rc=%Rhrc\n", rc));
VBox/Main/cbinding/VBoxCAPI.cpp:443:        Log(("Cbinding: Could not instantiate VirtualBox object! rc=%Rhrc\n",rc));
VBox/Main/cbinding/VBoxCAPI.cpp:452:    Log(("Cbinding: IVirtualBox object created.\n"));
VBox/Main/cbinding/VBoxCAPI.cpp:464:        Log(("Cbinding: Could not instantiate Session object! rc=%Rhrc\n",rc));
VBox/Main/cbinding/VBoxCAPI.cpp:473:    Log(("Cbinding: ISession object created.\n"));
VBox/Main/cbinding/VBoxCAPI.cpp:511:    Log(("Cbinding: Cleaned up the created objects.\n"));
VBox/Main/cbinding/VBoxCAPI.cpp:672:        Log(("Cbinding: COM/XPCOM could not be initialized! rc=%Rhrc\n", rc));
VBox/Main/cbinding/VBoxCAPI.cpp:681:        Log(("Cbinding: Could not get XPCOM event queue! rc=%Rhrc\n", rc));
VBox/Main/cbinding/VBoxCAPI.cpp:692:        Log(("Cbinding: Could not get component manager! rc=%Rhrc\n", rc));
VBox/Main/cbinding/VBoxCAPI.cpp:706:        Log(("Cbinding: Could not instantiate VirtualBoxClient object! rc=%Rhrc\n",rc));
VBox/Main/cbinding/VBoxCAPI.cpp:720:    Log(("Cbinding: IVirtualBoxClient object created.\n"));
VBox/Main/cbinding/VBoxCAPI.cpp:748:    Log(("Cbinding: Cleaned up the created objects.\n"));
VBox/Main/src-server/VRDEServerImpl.cpp:515:    Log(("VRDEPROP: get extpack hrc 0x%08X, isEmpty %d\n", hrc, bstrExtPack.isEmpty()));
VBox/Main/src-server/VRDEServerImpl.cpp:536:    Log(("VRDEPROP: library get rc %Rrc\n", vrc));
VBox/Main/src-server/VRDEServerImpl.cpp:546:        Log(("VRDEPROP: load library [%s] rc %Rrc\n", strVrdeLibrary.c_str(), vrc));
VBox/Main/src-server/VRDEServerImpl.cpp:559:            Log(("VRDEPROP: %d properties\n", cProperties));
VBox/Main/src-server/linux/USBGetDevices.cpp:1146:        Log(("usbGetPortFromSysfsPath(%s): failed [1]\n", pszPath));
VBox/Main/src-server/linux/USBGetDevices.cpp:1168:            Log(("usbGetPortFromSysfsPath(%s): failed [2]\n", pszPath));
VBox/Main/src-server/linux/USBGetDevices.cpp:1180:        Log(("usbGetPortFromSysfsPath(%s): failed [3], rc=%Rrc\n", pszPath, rc));
VBox/Main/src-server/linux/USBGetDevices.cpp:1185:        Log(("usbGetPortFromSysfsPath(%s): failed [4]\n", pszPath));
VBox/Main/src-server/linux/PerformanceLinux.cpp:203:        Log (("No stats pre-collected for process %x\n", process));
VBox/Main/src-server/linux/PerformanceLinux.cpp:270:        Log (("No stats pre-collected for process %x\n", process));
VBox/Main/src-server/linux/HostPowerLinux.cpp:108:    Log(("HostPowerServiceLinux: Thread started\n"));
VBox/Main/src-server/linux/HostPowerLinux.cpp:151:    Log(("HostPowerServiceLinux: Exiting thread\n"));
VBox/Main/src-server/linux/NetIf-linux.cpp:192:                    Log(("getInterfaceInfo: Error while reading /proc/net/if_inet6, n=%d uLength=%u\n",
VBox/Main/src-server/linux/NetIf-linux.cpp:225:        Log(("NetIfList: Failed to find default interface.\n"));
VBox/Main/src-server/linux/USBProxyBackendLinux.cpp:163:                Log(("USBProxyBackendLinux::USBProxyBackendLinux: RTFilePipe failed with rc=%Rrc\n", rc));
VBox/Main/src-server/linux/USBProxyBackendLinux.cpp:172:        Log(("USBProxyBackendLinux::USBProxyBackendLinux: out of memory!\n"));
VBox/Main/src-server/VirtualBoxImpl.cpp:4554:    Log(("Pushing medium %RTuuid\n", pMedium->i_getId().raw()));
VBox/Main/src-server/VirtualBoxImpl.cpp:4602:        Log(("Closing medium %RTuuid\n", pMedium->i_getId().raw()));
VBox/Main/src-server/NetworkAdapterImpl.cpp:438:            Log(("Internal network name not defined, setting to default \"intnet\"\n"));
VBox/Main/src-server/NetworkAdapterImpl.cpp:445:            Log(("NAT network name not defined, setting to default \"NatNetwork\"\n"));
VBox/Main/src-server/NATEngineImpl.cpp:73:    Log(("init that:%p this:%p\n", aThat, this));
VBox/Main/src-server/NATEngineImpl.cpp:94:    Log(("initCopy that:%p this:%p\n", aThat, this));
VBox/Main/src-server/NATEngineImpl.cpp:398:        Log(("Getter (this:%p) Network: %s\n", this, mData->m->strNetwork.c_str()));
VBox/Main/src-server/NATEngineImpl.cpp:458:        Log(("Getter (this:%p) TFTPPrefix: %s\n", this, mData->m->strTFTPPrefix.c_str()));
VBox/Main/src-server/NATEngineImpl.cpp:482:        Log(("Getter (this:%p) BootFile: %s\n", this, mData->m->strTFTPBootFile.c_str()));
VBox/Main/src-server/NATEngineImpl.cpp:506:        Log(("Getter (this:%p) NextServer: %s\n", this, mData->m->strTFTPNextServer.c_str()));
VBox/Main/src-server/ApplianceImplExport.cpp:523:                    Log(("Adding VirtualSystemDescriptionType_HardDiskImage, disk size: %RI64\n", llSize));
VBox/Main/src-server/ApplianceImplExport.cpp:533:                    Log(("Adding VirtualSystemDescriptionType_CDROM, disk size: %RI64\n", llSize));
VBox/Main/src-server/ApplianceImplExport.cpp:957:            Log(("Finding source disk \"%ls\"\n", bstrSrcFilePath.raw()));
VBox/Main/src-server/ApplianceImplExport.cpp:2145:        Log(("Finding source disk \"%s\"\n", strSrcFilePath.c_str()));
VBox/Main/src-server/ApplianceImplExport.cpp:2358:            Log(("Finding source disk \"%s\"\n", strSrcFilePath.c_str()));
VBox/Main/src-server/HostVideoInputDeviceImpl.cpp:194:            Log(("VBoxHostWebcamList rc %Rrc, result 0x%08X\n", rc, u64Result));
VBox/Main/src-server/generic/NetIf-generic.cpp:389:        Log(("NetIfGetState: ioctl(SIOCGIFFLAGS) -> %d\n", errno));
VBox/Main/src-server/generic/USBProxyBackendUsbIp.cpp:542:                    Log(("USB/IP: Lost connection to host \"%s\", trying to reconnect...\n", m->pszHost));
VBox/Main/src-server/ApplianceImpl.cpp:1085:    Log(("Setting up progress object: ulTotalMB = %d, cDisks = %d, => cOperations = %d, ulTotalOperationsWeight = %d, m->ulWeightForXmlOperation = %d\n",
VBox/Main/src-server/ApplianceImplImport.cpp:2272:    Log(("Appliance::i_convertDiskAttachmentValues: hdc.system=%d, hdc.fPrimary=%d, ulAddressOnParent=%d\n",
VBox/Main/src-server/ApplianceImplImport.cpp:2356:    Log(("=> lControllerPort=%d, lDevice=%d\n", lControllerPort, lDevice));
VBox/Main/src-server/ApplianceImplImport.cpp:3073:                Log(("Attaching floppy\n"));
VBox/Main/src-server/ApplianceImplImport.cpp:3121:                     Log(("avsdeHDs[%zu]: strRef=%s strOvf=%s\n", i, (*itHD)->strRef.c_str(), (*itHD)->strOvf.c_str()));
VBox/Main/src-server/ApplianceImplImport.cpp:3124:                    Log(("mapDisks[%zu]: strDiskId=%s strHref=%s\n",
VBox/Main/src-server/ApplianceImplImport.cpp:3152:                Log(("diCurrent.strDiskId=%s diCurrent.strHref=%s\n", diCurrent.strDiskId.c_str(), diCurrent.strHref.c_str()));
VBox/Main/src-server/ApplianceImplImport.cpp:3308:                Log(("Attaching disk %s to port %d on device %d\n",
VBox/Main/src-server/ApplianceImplImport.cpp:3641:        Log(("diCurrent.strDiskId=%s diCurrent.strHref=%s\n", diCurrent.strDiskId.c_str(), diCurrent.strHref.c_str()));
VBox/Main/src-server/solaris/PerformanceSolaris.cpp:127:        Log(("kstat_open() -> %d\n", errno));
VBox/Main/src-server/solaris/PerformanceSolaris.cpp:133:        Log(("kstat_lookup(system_pages) -> %d\n", errno));
VBox/Main/src-server/solaris/PerformanceSolaris.cpp:139:        Log(("kstat_lookup(system_pages) -> %d\n", errno));
VBox/Main/src-server/solaris/PerformanceSolaris.cpp:208:                Log(("kstat_read() -> %d\n", errno));
VBox/Main/src-server/solaris/PerformanceSolaris.cpp:220:        Log(("no cpu stats found!\n"));
VBox/Main/src-server/solaris/PerformanceSolaris.cpp:240:    Log(("Opening %s...\n", pszName));
VBox/Main/src-server/solaris/PerformanceSolaris.cpp:249:            //Log(("user=%u kernel=%u total=%u\n", prusage.pr_utime.tv_sec, prusage.pr_stime.tv_sec, prusage.pr_tstamp.tv_sec));
VBox/Main/src-server/solaris/PerformanceSolaris.cpp:263:            //Log(("user=%llu kernel=%llu total=%llu\n", *user, *kernel, *total));
VBox/Main/src-server/solaris/PerformanceSolaris.cpp:267:            Log(("read() -> %d\n", errno));
VBox/Main/src-server/solaris/PerformanceSolaris.cpp:274:        Log(("open() -> %d\n", errno));
VBox/Main/src-server/solaris/PerformanceSolaris.cpp:302:    Log(("Opening %s...\n", pszName));
VBox/Main/src-server/solaris/PerformanceSolaris.cpp:319:            Log(("read() -> %d\n", errno));
VBox/Main/src-server/solaris/PerformanceSolaris.cpp:326:        Log(("open() -> %d\n", errno));
VBox/Main/src-server/freebsd/NetIf-freebsd.cpp:93:        Log(("getDefaultIfaceIndex: Failed to get estimate for list size (errno=%d).\n", errno));
VBox/Main/src-server/freebsd/NetIf-freebsd.cpp:101:        Log(("getDefaultIfaceIndex: Failed to retrieve interface table (errno=%d).\n", errno));
VBox/Main/src-server/freebsd/NetIf-freebsd.cpp:113:            Log(("getDefaultIfaceIndex: Got message %u while expecting %u.\n",
VBox/Main/src-server/freebsd/NetIf-freebsd.cpp:172:            Log(("NetIfList: Unsupported address family: %u\n", addresses[RTAX_IFA]->sa_family));
VBox/Main/src-server/freebsd/NetIf-freebsd.cpp:227:        Log(("NetIfList: Failed to get estimate for list size (errno=%d).\n", errno));
VBox/Main/src-server/freebsd/NetIf-freebsd.cpp:235:        Log(("NetIfList: Failed to retrieve interface table (errno=%d).\n", errno));
VBox/Main/src-server/freebsd/NetIf-freebsd.cpp:243:        Log(("NetIfList: socket() -> %d\n", errno));
VBox/Main/src-server/freebsd/NetIf-freebsd.cpp:254:            Log(("NetIfList: Got message %u while expecting %u.\n",
VBox/Main/src-server/freebsd/NetIf-freebsd.cpp:302:                Log(("NetIfList: ioctl(SIOCGIFFLAGS) -> %d\n", errno));
VBox/Main/src-server/freebsd/NetIf-freebsd.cpp:354:        Log(("NetIfList: Failed to get estimate for list size (errno=%d).\n", errno));
VBox/Main/src-server/freebsd/NetIf-freebsd.cpp:362:        Log(("NetIfList: Failed to retrieve interface table (errno=%d).\n", errno));
VBox/Main/src-server/freebsd/NetIf-freebsd.cpp:370:        Log(("NetIfList: socket() -> %d\n", errno));
VBox/Main/src-server/freebsd/NetIf-freebsd.cpp:381:            Log(("NetIfList: Got message %u while expecting %u.\n",
VBox/Main/src-server/freebsd/NetIf-freebsd.cpp:423:                Log(("NetIfList: ioctl(SIOCGIFFLAGS) -> %d\n", errno));
VBox/Main/src-server/freebsd/HostHardwareFreeBSD.cpp:225:                    Log(("Error while querying available CD/DVD devices rc=%Rrc\n", rc));
VBox/Main/src-server/freebsd/HostHardwareFreeBSD.cpp:270:                                Log(("Error while querying available periph devices rc=%Rrc\n", rc));
VBox/Main/src-server/HostImpl.cpp:630:        Log(("Failed to update host network interface list with rc=%Rhrc\n", rc));
VBox/Main/src-server/HostImpl.cpp:1510:        Log(("Failed to update host network interface list with rc=%Rhrc\n", rc));
VBox/Main/src-server/HostImpl.cpp:1545:        Log(("Failed to update host network interface list with rc=%Rhrc\n", rc));
VBox/Main/src-server/HostImpl.cpp:1575:        Log(("Failed to update host network interface list with rc=%Rhrc\n", rc));
VBox/Main/src-server/HostImpl.cpp:3012:        Log(("Failed to get host network interface list with rc=%Rrc\n", rc));
VBox/Main/src-server/win/USBProxyBackendWindows.cpp:165:    Log(("USBFILTERIDX_PORT=%#x\n", USBFilterGetNum(&Filter, USBFILTERIDX_PORT)));
VBox/Main/src-server/win/USBProxyBackendWindows.cpp:166:    Log(("USBFILTERIDX_BUS=%#x\n", USBFilterGetNum(&Filter, USBFILTERIDX_BUS)));
VBox/Main/src-server/win/USBProxyBackendWindows.cpp:207:    Log(("USBFILTERIDX_PORT=%#x\n", USBFilterGetNum(&Filter, USBFILTERIDX_PORT)));
VBox/Main/src-server/win/USBProxyBackendWindows.cpp:208:    Log(("USBFILTERIDX_BUS=%#x\n", USBFilterGetNum(&Filter, USBFILTERIDX_BUS)));
VBox/Main/src-server/win/USBProxyBackendWindows.cpp:259:    Log(("USBProxyBackendWindows::getDevices\n"));
VBox/Main/src-server/win/HostPowerWin.cpp:45:        Log(("HostPowerServiceWin::HostPowerServiceWin: RTThreadCreate failed with %Rrc\n", rc));
VBox/Main/src-server/win/HostPowerWin.cpp:54:        Log(("HostPowerServiceWin::!HostPowerServiceWin: destroy window %x\n", mHwnd));
VBox/Main/src-server/win/HostPowerWin.cpp:95:        Log(("HostPowerServiceWin::NotificationThread: RegisterClassA failed with %x\n", GetLastError()));
VBox/Main/src-server/win/HostPowerWin.cpp:107:            Log(("HostPowerServiceWin::NotificationThread: CreateWindowExA failed with %x\n", GetLastError()));
VBox/Main/src-server/win/HostPowerWin.cpp:132:    Log(("HostPowerServiceWin::NotificationThread: exit thread\n"));
VBox/Main/src-server/win/HostPowerWin.cpp:168:                    Log(("PBT_APMPOWERSTATUSCHANGE\n"));
VBox/Main/src-server/win/HostPowerWin.cpp:171:                        Log(("PBT_APMPOWERSTATUSCHANGE ACLineStatus=%d BatteryFlag=%d\n", SystemPowerStatus.ACLineStatus,
VBox/Main/src-server/win/HostPowerWin.cpp:185:                                    Log(("CallNtPowerInformation claims %d seconds of power left\n",
VBox/Main/src-server/win/svcmain.cpp:347:    Log(("VirtualBoxClassFactory::i_deregisterWithSds\n"));
VBox/Main/src-server/win/svcmain.cpp:377:        Log(("VirtualBoxClassFactory::GetVirtualBox: S_OK - %p\n", pObj));
VBox/Main/src-server/win/svcmain.cpp:381:    Log(("VirtualBoxClassFactory::GetVirtualBox: E_FAIL\n"));
VBox/Main/src-server/win/svcmain.cpp:536:                    Log(("VBoxSVCWinMain: WM_QUERYENDSESSION: VBoxSvc has active connections. bActivity = %d. Loc count = %d\n",
VBox/Main/src-server/win/svcmain.cpp:551:                Log(("VBoxSVCWinMain: user canceled system shutdown.\n"));
VBox/Main/src-server/win/svcmain.cpp:591:        Log(("Failed to register main window class\n"));
VBox/Main/src-server/win/svcmain.cpp:603:            Log(("Failed to create main window\n"));
VBox/Main/src-server/win/svcmain.cpp:620:    Log(("SVCMain: DestroyMainWindow \n"));
VBox/Main/src-server/win/svcmain.cpp:860:            Log(("SVCMAIN: Processing Helper request (cmdline=\"%s\")...\n", pszPipeName));
VBox/Main/src-server/win/svcmain.cpp:875:                Log(("SVCMAIN: Failed to process Helper request (%Rrc).", vrc));
VBox/Main/src-server/win/svcmain.cpp:893:            Log(("SVCMain: Main window succesfully created\n"));
VBox/Main/src-server/win/svcmain.cpp:895:            Log(("SVCMain: Failed to create main window\n"));
VBox/Main/src-server/win/svcmain.cpp:920:    Log(("SVCMAIN: Returning, COM server process ends.\n"));
VBox/Main/src-server/win/PerformanceWin.cpp:151:            Log (("OpenProcess() -> 0x%x\n", dwError));
VBox/Main/src-server/win/PerformanceWin.cpp:164:                Log (("GetProcessTimes() -> 0x%x\n", dwError));
VBox/Main/src-server/win/PerformanceWin.cpp:180:                Log (("GetProcessMemoryInfo() -> 0x%x\n", dwError));
VBox/Main/src-server/win/PerformanceWin.cpp:221:            Log (("GetSystemTimes() -> 0x%x\n", dwError));
VBox/Main/src-server/win/PerformanceWin.cpp:241:            Log(("NtQuerySystemInformation() -> 0x%x\n", status));
VBox/Main/src-server/win/PerformanceWin.cpp:283:        Log(("CallNtPowerInformation() -> %x\n", ns));
VBox/Main/src-server/win/PerformanceWin.cpp:326:        Log (("No stats pre-collected for process %x\n", process));
VBox/Main/src-server/win/PerformanceWin.cpp:341:        Log (("No stats pre-collected for process %x\n", process));
VBox/Main/src-server/win/precomp_vcc.h:35:#if defined(Log) || defined(LogIsEnabled)
VBox/Main/src-server/win/precomp_vcc.h:36:# error "Log() from iprt/log.h cannot be defined in the precompiled header!"
VBox/Main/src-server/usb.ids:19938:	190  AL Log/Jounal/Timecard
VBox/Main/src-server/darwin/iokit.cpp:340:# define DARWIN_IOKIT_LOG(a)         Log(a)
VBox/Main/src-server/darwin/USBProxyBackendDarwin.cpp:190:    Log(("USBFILTERIDX_PORT=%#x\n", USBFilterGetNum(&Filter, USBFILTERIDX_PORT)));
VBox/Main/src-server/darwin/USBProxyBackendDarwin.cpp:191:    Log(("USBFILTERIDX_BUS=%#x\n", USBFilterGetNum(&Filter, USBFILTERIDX_BUS)));
VBox/Main/src-server/darwin/HostPowerDarwin.cpp:103:    Log(( "powerChangeNotificationHandler: messageType %08lx, arg %08lx\n", (long unsigned int)messageType, (long unsigned int)pMessageArgument));
VBox/Main/src-server/darwin/HostPowerDarwin.cpp:232:                Log(("checkBatteryCriticalLevel: Remains: %d.%d%% Critical: %d Critical State Changed: %d\n", (int)remCapacity, (int)(remCapacity * 10) % 10, critical, pfCriticalChanged?*pfCriticalChanged:-1));
VBox/Main/src-server/darwin/PerformanceDarwin.cpp:105:        Log(("host_statistics() -> %s", mach_error_string(krc)));
VBox/Main/src-server/darwin/PerformanceDarwin.cpp:137:        Log(("proc_pidinfo() -> %s", strerror(rc)));
VBox/Main/src-server/darwin/PerformanceDarwin.cpp:142:        Log(("proc_pidinfo() -> too few bytes %d", nb));
VBox/Main/src-server/darwin/NetIf-darwin.cpp:62:        Log(("NetIfList: socket() -> %d\n", errno));
VBox/Main/src-server/darwin/NetIf-darwin.cpp:70:        Log(("NetIfList: getifaddrs() -> %d\n", rc));
VBox/Main/src-server/darwin/NetIf-darwin.cpp:91:            Log(("NetIfList: ioctl(SIOCGIFFLAGS) -> %d\n", errno));
VBox/Main/src-server/darwin/NetIf-darwin.cpp:202:            Log(("NetIfList: Unsupported address family: %u\n", addresses[RTAX_IFA]->sa_family));
VBox/Main/src-server/darwin/NetIf-darwin.cpp:223:        Log(("getDefaultIfaceIndex: Failed to get estimate for list size (errno=%d).\n", errno));
VBox/Main/src-server/darwin/NetIf-darwin.cpp:231:        Log(("getDefaultIfaceIndex: Failed to retrieve interface table (errno=%d).\n", errno));
VBox/Main/src-server/darwin/NetIf-darwin.cpp:243:            Log(("getDefaultIfaceIndex: Got message %u while expecting %u.\n",
VBox/Main/src-server/darwin/NetIf-darwin.cpp:298:        Log(("NetIfList: Failed to get estimate for list size (errno=%d).\n", errno));
VBox/Main/src-server/darwin/NetIf-darwin.cpp:306:        Log(("NetIfList: Failed to retrieve interface table (errno=%d).\n", errno));
VBox/Main/src-server/darwin/NetIf-darwin.cpp:314:        Log(("NetIfList: socket() -> %d\n", errno));
VBox/Main/src-server/darwin/NetIf-darwin.cpp:328:            Log(("NetIfList: Got message %u while expecting %u.\n",
VBox/Main/src-server/darwin/NetIf-darwin.cpp:398:                Log(("NetIfList: ioctl(SIOCGIFFLAGS) -> %d\n", errno));
VBox/Main/src-server/darwin/NetIf-darwin.cpp:450:        Log(("NetIfList: Failed to get estimate for list size (errno=%d).\n", errno));
VBox/Main/src-server/darwin/NetIf-darwin.cpp:458:        Log(("NetIfList: Failed to retrieve interface table (errno=%d).\n", errno));
VBox/Main/src-server/darwin/NetIf-darwin.cpp:466:        Log(("NetIfList: socket() -> %d\n", errno));
VBox/Main/src-server/darwin/NetIf-darwin.cpp:477:            Log(("NetIfList: Got message %u while expecting %u.\n",
VBox/Main/src-server/darwin/NetIf-darwin.cpp:520:                Log(("NetIfList: ioctl(SIOCGIFFLAGS) -> %d\n", errno));
VBox/Main/src-client/HGCM.cpp:288:            Log(("HGCMService::loadServiceDLL: Error resolving the service entry point %s, rc = %d, m_pfnLoad = %p\n",
VBox/Main/src-client/HGCM.cpp:318:                    Log(("HGCMService::loadServiceDLL: at least one of function pointers is NULL\n"));
VBox/Main/src-client/HGCM.cpp:1209:            Log(("client id 0x%08X\n", u32ClientId));
VBox/Main/src-client/HGCM.cpp:1581:        Log(("MAIN::HGCMService::Call: Message allocation failed: %Rrc\n", rc));
VBox/Main/src-client/ConsoleVRDPServer.cpp:142:#define LOGDUMPPTR Log
VBox/Main/src-client/ConsoleVRDPServer.cpp:785:            Log(("VRDE_QP_FEATURE [%s]\n", pFeature->achInfo));
VBox/Main/src-client/ConsoleVRDPServer.cpp:904:            Log(("VRDE_SP_CLIENT_STATUS [%s]\n", pStatus->achStatus));
VBox/Main/src-client/ConsoleVRDPServer.cpp:1034:                Log(("AUDIOIN: ignored client %RU32, active client %RU32\n", u32ClientId, pServer->mu32AudioInputClientId));
VBox/Main/src-client/ConsoleVRDPServer.cpp:1802:#define H3DORLOG Log
VBox/Main/src-client/ConsoleVRDPServer.cpp:2143:        Log(("SHCRGL_HOST_FN_SET_CONSOLE failed with %Rrc\n", rc));
VBox/Main/src-client/ConsoleVRDPServer.cpp:2543:        Log(("VBOX_HOST_CHANNEL_HOST_FN_REGISTER failed with %Rrc\n", rc));
VBox/Main/src-client/ConsoleVRDPServer.cpp:4010:            Log(("VRDEServerInfo::"                                       \
VBox/Main/src-client/HGCMObjects.cpp:155:            Log(("Object key inserted 0x%08X\n", Key));
VBox/Main/src-client/RemoteUSBBackend.cpp:184:                Log(("USBClientResponseCallback: WARNING: not enough data in response: pv = %p, cb = %d, expected %d.\n",
VBox/Main/src-client/RemoteUSBBackend.cpp:203:            Log(("USBClientResponseCallback: WARNING: response to a request %d is not expected!!!\n", code));
VBox/Main/src-client/RemoteUSBBackend.cpp:227:                        Log(("USBClientResponseCallback: WARNING: invalid device id %08X.\n", pret->id));
VBox/Main/src-client/RemoteUSBBackend.cpp:232:                        Log(("USBClientResponseCallback: WARNING: the operation failed, status %d\n", pret->status));
VBox/Main/src-client/RemoteUSBBackend.cpp:239:                Log(("USBClientResponseCallback: WARNING: not enough data in response: pv = %p, cb = %d, expected %d.\n",
VBox/Main/src-client/RemoteUSBBackend.cpp:246:            Log(("USBClientResponseCallback: WARNING: invalid code %d\n", code));
VBox/Main/src-client/RemoteUSBBackend.cpp:786:        Log(("URB len = %d, data = %p\n", qurb->u32Len, qurb->pvURB));
VBox/Main/src-client/RemoteUSBBackend.cpp:789:            Log(("Received URB content:\n%.*Rhxd\n", qurb->u32Len, qurb->pvData));
VBox/Main/src-client/RemoteUSBBackend.cpp:1019:    Log(("RemoteUSBBackend::negotiateResponse: flags = %02X.\n", pret->flags));
VBox/Main/src-client/RemoteUSBBackend.cpp:1026:        Log(("RemoteUSBBackend::negotiateResponse: client requested URB polling.\n"));
VBox/Main/src-client/RemoteUSBBackend.cpp:1093:    Log(("RemoteUSBBackend::saveDeviceList: pvList = %p, cbList = %d\n", pvList, cbList));
VBox/Main/src-client/RemoteUSBBackend.cpp:1188:        Log(("RemoteUSBBackend::reapURB: id = %d,  flags = %02X, error = %d, handle %d, len = %d.\n",
VBox/Main/src-client/RemoteUSBBackend.cpp:1251:                    default: Log(("RemoteUSBBackend::reapURB: Invalid error %d\n", pBody->error));
VBox/Main/src-client/RemoteUSBBackend.cpp:1275:                    default: Log(("RemoteUSBBackend::reapURB: Invalid error %d\n", pBody->error));
VBox/Main/src-client/ConsoleImpl.cpp:2297:    Log(("UnplugCpu: rc=%Rrc\n", vrc));
VBox/Main/src-client/ConsoleImpl.cpp:2436:    Log(("PlugCpu: rc=%Rrc\n", rc));
VBox/Main/src-client/ConsoleImpl.cpp:4058:                            Log(("Console::onNetworkAdapterChange: setting link state to %d\n",
VBox/Main/src-client/ConsoleImpl.cpp:4243:    Log(("DNS change - %zu nameservers\n", cNameServers));
VBox/Main/src-client/ConsoleImpl.cpp:4248:        Log(("- nameserver[%zu] = \"%s\"\n", i, strNameServer.c_str()));
VBox/Main/src-client/ConsoleImpl.cpp:4253:    Log(("domain name = \"%s\"\n", com::Utf8Str(domain).c_str()));
VBox/Main/src-client/ConsoleImpl.cpp:4282:    Log(("notifyNatDnsChange: looking for DrvNAT attachment on %s device instances\n", pszDevice));
VBox/Main/src-client/ConsoleImpl.cpp:4290:        Log(("Instance %s#%d has DrvNAT attachment; do actual notify\n", pszDevice, ulInstance));
VBox/Main/src-client/ConsoleImpl.cpp:4956:    Log(("pszDevice=%s uLun=%d uInstance=%d\n", pszDevice, uLun, uInstance));
VBox/Main/src-client/ConsoleImpl.cpp:8307:    Log(("Adding shared folder '%s' -> '%s'\n", strName.c_str(), aData.m_strHostPath.c_str()));
VBox/Main/src-client/ConsoleImpl.cpp:8412:    Log(("Removing shared folder '%s'\n", strName.c_str()));
VBox/Main/src-client/ConsoleImpl.cpp:9185:                Log(("i_attachToTapInterface: %RTfile %ls\n", maTapFD[slot], tapDeviceName.raw()));
VBox/Main/src-client/ConsoleImpl.cpp:10515:        Log(("drvStatus_UnitChanged: iLUN=%d pLed=%p\n", iLUN, pLed));
VBox/Main/src-client/ConsoleImpl2.cpp:3163:                    Log(("Cannot register VBoxDragAndDropSvc extension, rc=%Rrc\n", rc));
VBox/Main/src-client/ConsoleImpl2.cpp:5135:            Log(( #res " extracting from %s is failed\n", str.c_str())); \
VBox/Main/src-client/ConsoleImpl2.cpp:5484:                    Log(("Set SharedMacOnWire\n"));
VBox/Main/src-client/ConsoleImpl2.cpp:5612:                    Log(("help-text=%ls\n", pwszHelpText));
VBox/Main/src-client/ConsoleImpl2.cpp:5620:                    Log(("trunk=%s\n", szTrunkName));
VBox/Main/src-client/ConsoleImpl2.cpp:5957:            Log(("Failed to set the global flags.\n"));
VBox/Main/src-client/ConsoleImpl2.cpp:5959:            Log(("Failed to set the global flags \"%s\".\n", szFlags));
VBox/Main/src-client/ConsoleImpl2.cpp:6115:        Log(("Set VBoxGuestPropSvc property store\n"));
VBox/Main/src-client/ConsoleImpl2.cpp:6148:            Log(("Cannot register VBoxGuestControlSvc extension!\n"));
VBox/Main/src-client/VMMDevInterface.cpp:404:    Log(("vmmdevVideoModeSupported: [%d]: %dx%dx%d\n", display, width, height, bpp));
VBox/Main/src-client/VMMDevInterface.cpp:416:        Log(("vmmdevVideoModeSupported: hrc %x, framebuffer %p!!!\n", hrc, framebuffer));
VBox/Main/src-client/win/precomp_vcc.h:36:#if defined(Log) || defined(LogIsEnabled)
VBox/Main/src-client/win/precomp_vcc.h:37:# error "Log() from iprt/log.h cannot be defined in the precompiled header!"
VBox/Main/src-client/DisplayImplLegacy.cpp:418:        Log(("MAIN::vbvaPartialRead: failed to (re)alocate memory for partial record!!! cbRecord 0x%08X\n",
VBox/Main/src-client/DisplayImplLegacy.cpp:656:        Log(("Display::VideoAccelFlush: called with disabled VBVA!!! Ignoring.\n"));
VBox/Main/src-client/DisplayImplLegacy.cpp:690:            Log(("Display::VideoAccelFlush: unable to fetch command. off32Data = %d, off32Free = %d. Disabling VBVA!!!\n",
VBox/Main/src-client/GuestSessionImpl.cpp:848:        Log(("Out of memory!\n"));
VBox/Main/src-client/GuestSessionImpl.cpp:1415:        Log(("Out of memory!\n"));
VBox/Main/src-client/HGCMThread.cpp:304:                    Log(("hgcmThreadCreate: FAILURE: Can't start worker thread.\n"));
VBox/Main/src-client/HGCMThread.cpp:309:                Log(("hgcmThreadCreate: FAILURE: Can't init a critical section for a hgcm worker thread.\n"));
VBox/Main/src-client/HGCMThread.cpp:315:            Log(("hgcmThreadCreate: FAILURE: Can't create an event semaphore for a sent messages.\n"));
VBox/Main/src-client/HGCMThread.cpp:321:        Log(("hgcmThreadCreate: FAILURE: Can't create an event semaphore for a hgcm worker thread.\n"));
VBox/Main/src-client/HGCMThread.cpp:335:        Log(("HGCMThread::MsgPost: FAILURE: could not obtain worker thread mutex, rc = %Rrc!!!\n", rc));
VBox/Main/src-client/HGCMThread.cpp:653:        Log(("hgcmThreadCreate: FAILURE: Can't allocate memory for a hgcm worker thread.\n"));
VBox/Main/src-client/HGCMThread.cpp:663:        Log(("hgcmThreadCreate: FAILURE: rc = %Rrc.\n", rc));
Binary file VBox/Main/webservice/jaxlibs/jaxb-xjc.jar matches
VBox/Main/webservice/vboxweb.cpp:1500:        // Log some MOR usage statistics every 5 minutes, but only if there's
VBox/Main/glue/VBoxLogRelCreate.cpp:62:                   "Log opened %s\n",
VBox/Main/glue/VBoxLogRelCreate.cpp:122:            pfnLog(pReleaseLogger, "Log rotated - Log started %s\n", szTmp);
VBox/Main/glue/VBoxLogRelCreate.cpp:126:            pfnLog(pReleaseLogger, "Log continuation - Log started %s\n", szTmp);
VBox/Main/glue/VBoxLogRelCreate.cpp:130:            pfnLog(pReleaseLogger, "End of log file - Log started %s\n", szTmp);
VBox/Main/glue/errorprint.cpp:79:    Log(("ERROR: %s", str.c_str()));
VBox/Main/glue/errorprint.cpp:93:    Log(("%s", str.c_str()));
VBox/Main/glue/errorprint.cpp:101:    Log(("ERROR: %s", str.c_str()));
VBox/Main/src-all/EventImpl.cpp:975:            Log(("Wait for %d waiters+signalers to release.\n", cBusy));
VBox/Main/src-all/EventImpl.cpp:986:            Log(("All waiters+signalers just released the lock.\n"));
VBox/Main/src-all/win/VBoxAPIWrap-precomp_vcc.h:37:#if defined(Log) || defined(LogIsEnabled)
VBox/Main/src-all/win/VBoxAPIWrap-precomp_vcc.h:38:# error "Log() from iprt/log.h cannot be defined in the precompiled header!"
VBox/Main/include/HGCMObjects.h:67:            Log(("Reference: refCnt = %d\n", refCnt));
VBox/Main/include/HGCMObjects.h:74:            Log(("Dereference: refCnt = %d\n", refCnt));
VBox/Main/UnattendedTemplates/win_postinstall.cmd:25:rem Log header.
VBox/Main/UnattendedTemplates/redhat_postinstall.sh:111:# Log header.
VBox/Main/UnattendedTemplates/redhat_postinstall.sh:277:# Log footer.
VBox/Main/UnattendedTemplates/debian_postinstall.sh:122:# Log header.
VBox/Main/UnattendedTemplates/debian_postinstall.sh:305:# Log footer.
VBox/NetworkServices/DHCP/Config.cpp:604:            Log(("dhcp-opt: list (%d) unsupported\n", u8OptId));
VBox/NetworkServices/DHCP/Config.cpp:621:            Log(("dhcp-opt: list (%d) unsupported\n", u8OptId));
VBox/NetworkServices/DHCP/Config.cpp:1222:                        Log(("opt: %d is ignored\n", u8Req));
VBox/NetworkServices/NAT/VBoxNetLwipNAT.cpp:1376:        Log(("%d-%s rule: %ls\n", idxRules, (fIsIPv6 ? "IPv6" : "IPv4"), rules[idxRules]));
VBox/NetworkServices/NAT/proxy.h:111:#define DPRINTF0(a) Log(a)
VBox/NetworkServices/NetLib/VBoxNetPortForwardString.cpp:351:    Log(("name: %s\n"
libs/zlib-1.2.8/examples/gzlog.c:223:   - Log the repair with a date stamp in foo.repairs
libs/libxml2-2.9.4/check-xml-test-suite.py:345:    # Log the ontext
libs/libxml2-2.9.4/win32/wince/libxml2.vcl:4:<h1>Build Log</h1>
libs/libxml2-2.9.4/check-xinclude-test-suite.py:153:    # Log the ontext
libs/xpcom18a4/nsprpub/pr/src/io/prlog.c:165:        Log(("%*.*S", nb, nb, buf)); \
libs/xpcom18a4/nsprpub/pr/src/md/windows/ntio.c:307:                /* ARGH - what can we do here? Log an error? XXXMB */
libs/xpcom18a4/nsprpub/pr/tests/logger.c:112:    PR_LOG( myLM, PR_LOG_NOTICE, ("Log a Notice %d\n", 1 ));
libs/xpcom18a4/nsprpub/pr/tests/logger.c:116:        PR_LOG( myLM, PR_LOG_DEBUG, ("Log Debug number: %d\n", i));
libs/xpcom18a4/nsprpub/pr/include/prlog.h:126:**    PR_LOG( myLm, PR_LOG_ALWAYS, ("Log this! %d\n", one)); 
libs/xpcom18a4/nsprpub/pr/include/prlog.h:138:** When you execute your application, the string "Log this! 1" will be
libs/xpcom18a4/nsprpub/pr/include/prlog.h:212:** Log something.
libs/xpcom18a4/xpcom/io/nsStorageStream.cpp:58:// Log module for StorageStream logging...
libs/xpcom18a4/xpcom/glue/nsDebug.h:66:   * Log a warning message to the debug log.
libs/xpcom18a4/xpcom/glue/nsDebug.h:82:   * Log an assertion message to the debug log
libs/xpcom18a4/xpcom/glue/nsDebug.h:176: * Log an error message.
libs/xpcom18a4/xpcom/glue/nsDebug.h:182: * Log a warning message.
libs/xpcom18a4/xpcom/ds/nsObserverService.cpp:55:// Log module for nsObserverService logging...
libs/xpcom18a4/xpcom/threads/nsThread.cpp:48:// Log module for nsIThread logging...
libs/xpcom18a4/java/src/nsFileStreams.cpp:69:// Log module for nsFileTransport logging...
libs/xpcom18a4/python/src/PyXPCOM.h:207:// Log a warning for the user - something at runtime
libs/xpcom18a4/python/src/PyXPCOM.h:213:// Log an error for the user - something that _has_ prevented
libs/xpcom18a4/python/server/policy.py:334:            # any other errors are evil!?  Log it
